
CDC_libUSB_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ed0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060f4  080060f4  00020180  2**0
                  CONTENTS
  4 .ARM          00000000  080060f4  080060f4  00020180  2**0
                  CONTENTS
  5 .preinit_array 00000000  080060f4  080060f4  00020180  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060f4  080060f4  000160f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060f8  080060f8  000160f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000180  20000000  080060fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011b0  20000180  0800627c  00020180  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20001330  0800627c  00021330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015deb  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f10  00000000  00000000  00035f9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee0  00000000  00000000  00038eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d78  00000000  00000000  00039d90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020083  00000000  00000000  0003ab08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e0d7  00000000  00000000  0005ab8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba64d  00000000  00000000  00068c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001232af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bd0  00000000  00000000  0012332c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000180 	.word	0x20000180
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006090 	.word	0x08006090

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000184 	.word	0x20000184
 8000214:	08006090 	.word	0x08006090

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f938 	bl	8000498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f005 f91d 	bl	8005478 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f944 	bl	80004fe <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f000 f910 	bl	80004ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	20000118 	.word	0x20000118
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	200003c0 	.word	0x200003c0
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200003c0 	.word	0x200003c0

080002f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b085      	sub	sp, #20
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f003 0307 	and.w	r3, r3, #7
 8000306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000308:	4b0c      	ldr	r3, [pc, #48]	; (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800030e:	68ba      	ldr	r2, [r7, #8]
 8000310:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000314:	4013      	ands	r3, r2
 8000316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000320:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000324:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800032a:	4a04      	ldr	r2, [pc, #16]	; (800033c <__NVIC_SetPriorityGrouping+0x44>)
 800032c:	68bb      	ldr	r3, [r7, #8]
 800032e:	60d3      	str	r3, [r2, #12]
}
 8000330:	bf00      	nop
 8000332:	3714      	adds	r7, #20
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000344:	4b04      	ldr	r3, [pc, #16]	; (8000358 <__NVIC_GetPriorityGrouping+0x18>)
 8000346:	68db      	ldr	r3, [r3, #12]
 8000348:	0a1b      	lsrs	r3, r3, #8
 800034a:	f003 0307 	and.w	r3, r3, #7
}
 800034e:	4618      	mov	r0, r3
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr
 8000358:	e000ed00 	.word	0xe000ed00

0800035c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800036a:	2b00      	cmp	r3, #0
 800036c:	db0b      	blt.n	8000386 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800036e:	79fb      	ldrb	r3, [r7, #7]
 8000370:	f003 021f 	and.w	r2, r3, #31
 8000374:	4907      	ldr	r1, [pc, #28]	; (8000394 <__NVIC_EnableIRQ+0x38>)
 8000376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800037a:	095b      	lsrs	r3, r3, #5
 800037c:	2001      	movs	r0, #1
 800037e:	fa00 f202 	lsl.w	r2, r0, r2
 8000382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	e000e100 	.word	0xe000e100

08000398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	4603      	mov	r3, r0
 80003a0:	6039      	str	r1, [r7, #0]
 80003a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003a8:	2b00      	cmp	r3, #0
 80003aa:	db0a      	blt.n	80003c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ac:	683b      	ldr	r3, [r7, #0]
 80003ae:	b2da      	uxtb	r2, r3
 80003b0:	490c      	ldr	r1, [pc, #48]	; (80003e4 <__NVIC_SetPriority+0x4c>)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	0112      	lsls	r2, r2, #4
 80003b8:	b2d2      	uxtb	r2, r2
 80003ba:	440b      	add	r3, r1
 80003bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003c0:	e00a      	b.n	80003d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	b2da      	uxtb	r2, r3
 80003c6:	4908      	ldr	r1, [pc, #32]	; (80003e8 <__NVIC_SetPriority+0x50>)
 80003c8:	79fb      	ldrb	r3, [r7, #7]
 80003ca:	f003 030f 	and.w	r3, r3, #15
 80003ce:	3b04      	subs	r3, #4
 80003d0:	0112      	lsls	r2, r2, #4
 80003d2:	b2d2      	uxtb	r2, r2
 80003d4:	440b      	add	r3, r1
 80003d6:	761a      	strb	r2, [r3, #24]
}
 80003d8:	bf00      	nop
 80003da:	370c      	adds	r7, #12
 80003dc:	46bd      	mov	sp, r7
 80003de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e2:	4770      	bx	lr
 80003e4:	e000e100 	.word	0xe000e100
 80003e8:	e000ed00 	.word	0xe000ed00

080003ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b089      	sub	sp, #36	; 0x24
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	60f8      	str	r0, [r7, #12]
 80003f4:	60b9      	str	r1, [r7, #8]
 80003f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	f003 0307 	and.w	r3, r3, #7
 80003fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000400:	69fb      	ldr	r3, [r7, #28]
 8000402:	f1c3 0307 	rsb	r3, r3, #7
 8000406:	2b04      	cmp	r3, #4
 8000408:	bf28      	it	cs
 800040a:	2304      	movcs	r3, #4
 800040c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800040e:	69fb      	ldr	r3, [r7, #28]
 8000410:	3304      	adds	r3, #4
 8000412:	2b06      	cmp	r3, #6
 8000414:	d902      	bls.n	800041c <NVIC_EncodePriority+0x30>
 8000416:	69fb      	ldr	r3, [r7, #28]
 8000418:	3b03      	subs	r3, #3
 800041a:	e000      	b.n	800041e <NVIC_EncodePriority+0x32>
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000420:	f04f 32ff 	mov.w	r2, #4294967295
 8000424:	69bb      	ldr	r3, [r7, #24]
 8000426:	fa02 f303 	lsl.w	r3, r2, r3
 800042a:	43da      	mvns	r2, r3
 800042c:	68bb      	ldr	r3, [r7, #8]
 800042e:	401a      	ands	r2, r3
 8000430:	697b      	ldr	r3, [r7, #20]
 8000432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000434:	f04f 31ff 	mov.w	r1, #4294967295
 8000438:	697b      	ldr	r3, [r7, #20]
 800043a:	fa01 f303 	lsl.w	r3, r1, r3
 800043e:	43d9      	mvns	r1, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000444:	4313      	orrs	r3, r2
         );
}
 8000446:	4618      	mov	r0, r3
 8000448:	3724      	adds	r7, #36	; 0x24
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
	...

08000454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000464:	d301      	bcc.n	800046a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000466:	2301      	movs	r3, #1
 8000468:	e00f      	b.n	800048a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800046a:	4a0a      	ldr	r2, [pc, #40]	; (8000494 <SysTick_Config+0x40>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	3b01      	subs	r3, #1
 8000470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000472:	210f      	movs	r1, #15
 8000474:	f04f 30ff 	mov.w	r0, #4294967295
 8000478:	f7ff ff8e 	bl	8000398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <SysTick_Config+0x40>)
 800047e:	2200      	movs	r2, #0
 8000480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000482:	4b04      	ldr	r3, [pc, #16]	; (8000494 <SysTick_Config+0x40>)
 8000484:	2207      	movs	r2, #7
 8000486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3708      	adds	r7, #8
 800048e:	46bd      	mov	sp, r7
 8000490:	bd80      	pop	{r7, pc}
 8000492:	bf00      	nop
 8000494:	e000e010 	.word	0xe000e010

08000498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004a0:	6878      	ldr	r0, [r7, #4]
 80004a2:	f7ff ff29 	bl	80002f8 <__NVIC_SetPriorityGrouping>
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}

080004ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004ae:	b580      	push	{r7, lr}
 80004b0:	b086      	sub	sp, #24
 80004b2:	af00      	add	r7, sp, #0
 80004b4:	4603      	mov	r3, r0
 80004b6:	60b9      	str	r1, [r7, #8]
 80004b8:	607a      	str	r2, [r7, #4]
 80004ba:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004bc:	f7ff ff40 	bl	8000340 <__NVIC_GetPriorityGrouping>
 80004c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	68b9      	ldr	r1, [r7, #8]
 80004c6:	6978      	ldr	r0, [r7, #20]
 80004c8:	f7ff ff90 	bl	80003ec <NVIC_EncodePriority>
 80004cc:	4602      	mov	r2, r0
 80004ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80004d2:	4611      	mov	r1, r2
 80004d4:	4618      	mov	r0, r3
 80004d6:	f7ff ff5f 	bl	8000398 <__NVIC_SetPriority>
}
 80004da:	bf00      	nop
 80004dc:	3718      	adds	r7, #24
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b082      	sub	sp, #8
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80004ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff ff33 	bl	800035c <__NVIC_EnableIRQ>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}

080004fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80004fe:	b580      	push	{r7, lr}
 8000500:	b082      	sub	sp, #8
 8000502:	af00      	add	r7, sp, #0
 8000504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000506:	6878      	ldr	r0, [r7, #4]
 8000508:	f7ff ffa4 	bl	8000454 <SysTick_Config>
 800050c:	4603      	mov	r3, r0
}
 800050e:	4618      	mov	r0, r3
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
	...

08000518 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d101      	bne.n	800052a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8000526:	2301      	movs	r3, #1
 8000528:	e147      	b.n	80007ba <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d106      	bne.n	8000544 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f004 ffbe 	bl	80054c0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	699a      	ldr	r2, [r3, #24]
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f022 0210 	bic.w	r2, r2, #16
 8000552:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000554:	f7ff fec4 	bl	80002e0 <HAL_GetTick>
 8000558:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800055a:	e012      	b.n	8000582 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800055c:	f7ff fec0 	bl	80002e0 <HAL_GetTick>
 8000560:	4602      	mov	r2, r0
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	1ad3      	subs	r3, r2, r3
 8000566:	2b0a      	cmp	r3, #10
 8000568:	d90b      	bls.n	8000582 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800056e:	f043 0201 	orr.w	r2, r3, #1
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2203      	movs	r2, #3
 800057a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e11b      	b.n	80007ba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	f003 0308 	and.w	r3, r3, #8
 800058c:	2b08      	cmp	r3, #8
 800058e:	d0e5      	beq.n	800055c <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	699a      	ldr	r2, [r3, #24]
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f042 0201 	orr.w	r2, r2, #1
 800059e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005a0:	f7ff fe9e 	bl	80002e0 <HAL_GetTick>
 80005a4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80005a6:	e012      	b.n	80005ce <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80005a8:	f7ff fe9a 	bl	80002e0 <HAL_GetTick>
 80005ac:	4602      	mov	r2, r0
 80005ae:	68fb      	ldr	r3, [r7, #12]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	2b0a      	cmp	r3, #10
 80005b4:	d90b      	bls.n	80005ce <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005ba:	f043 0201 	orr.w	r2, r3, #1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2203      	movs	r2, #3
 80005c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
 80005cc:	e0f5      	b.n	80007ba <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0301 	and.w	r3, r3, #1
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d0e5      	beq.n	80005a8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	699a      	ldr	r2, [r3, #24]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f042 0202 	orr.w	r2, r2, #2
 80005ea:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a74      	ldr	r2, [pc, #464]	; (80007c4 <HAL_FDCAN_Init+0x2ac>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d103      	bne.n	80005fe <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80005f6:	4a74      	ldr	r2, [pc, #464]	; (80007c8 <HAL_FDCAN_Init+0x2b0>)
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	7c1b      	ldrb	r3, [r3, #16]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d108      	bne.n	8000618 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	699a      	ldr	r2, [r3, #24]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000614:	619a      	str	r2, [r3, #24]
 8000616:	e007      	b.n	8000628 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	699a      	ldr	r2, [r3, #24]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000626:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	7c5b      	ldrb	r3, [r3, #17]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d108      	bne.n	8000642 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	699a      	ldr	r2, [r3, #24]
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800063e:	619a      	str	r2, [r3, #24]
 8000640:	e007      	b.n	8000652 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	699a      	ldr	r2, [r3, #24]
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000650:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	7c9b      	ldrb	r3, [r3, #18]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d108      	bne.n	800066c <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	699a      	ldr	r2, [r3, #24]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000668:	619a      	str	r2, [r3, #24]
 800066a:	e007      	b.n	800067c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	699a      	ldr	r2, [r3, #24]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800067a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	699b      	ldr	r3, [r3, #24]
 8000682:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	689a      	ldr	r2, [r3, #8]
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	430a      	orrs	r2, r1
 8000690:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	699a      	ldr	r2, [r3, #24]
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80006a0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	691a      	ldr	r2, [r3, #16]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f022 0210 	bic.w	r2, r2, #16
 80006b0:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d108      	bne.n	80006cc <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	699a      	ldr	r2, [r3, #24]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f042 0204 	orr.w	r2, r2, #4
 80006c8:	619a      	str	r2, [r3, #24]
 80006ca:	e02c      	b.n	8000726 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d028      	beq.n	8000726 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	2b02      	cmp	r3, #2
 80006da:	d01c      	beq.n	8000716 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	699a      	ldr	r2, [r3, #24]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80006ea:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	691a      	ldr	r2, [r3, #16]
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f042 0210 	orr.w	r2, r2, #16
 80006fa:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d110      	bne.n	8000726 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	699a      	ldr	r2, [r3, #24]
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f042 0220 	orr.w	r2, r2, #32
 8000712:	619a      	str	r2, [r3, #24]
 8000714:	e007      	b.n	8000726 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	699a      	ldr	r2, [r3, #24]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f042 0220 	orr.w	r2, r2, #32
 8000724:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	699b      	ldr	r3, [r3, #24]
 800072a:	3b01      	subs	r3, #1
 800072c:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	3b01      	subs	r3, #1
 8000734:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000736:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6a1b      	ldr	r3, [r3, #32]
 800073c:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800073e:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	3b01      	subs	r3, #1
 8000748:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800074e:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000750:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	689b      	ldr	r3, [r3, #8]
 8000756:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800075a:	d115      	bne.n	8000788 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000760:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000766:	3b01      	subs	r3, #1
 8000768:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800076a:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000770:	3b01      	subs	r3, #1
 8000772:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8000774:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800077c:	3b01      	subs	r3, #1
 800077e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8000784:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8000786:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	430a      	orrs	r2, r1
 800079a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f000 f814 	bl	80007cc <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2200      	movs	r2, #0
 80007a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	2200      	movs	r2, #0
 80007ae:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	2201      	movs	r2, #1
 80007b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80007b8:	2300      	movs	r3, #0
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40006400 	.word	0x40006400
 80007c8:	40006500 	.word	0x40006500

080007cc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80007d4:	4b27      	ldr	r3, [pc, #156]	; (8000874 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80007d6:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	68ba      	ldr	r2, [r7, #8]
 80007dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007e6:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ee:	041a      	lsls	r2, r3, #16
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	430a      	orrs	r2, r1
 80007f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800080c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000814:	061a      	lsls	r2, r3, #24
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	430a      	orrs	r2, r1
 800081c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000834:	68bb      	ldr	r3, [r7, #8]
 8000836:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000848:	68bb      	ldr	r3, [r7, #8]
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	e005      	b.n	800085a <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	3304      	adds	r3, #4
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	429a      	cmp	r2, r3
 8000864:	d3f3      	bcc.n	800084e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	4000a400 	.word	0x4000a400

08000878 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000878:	b480      	push	{r7}
 800087a:	b087      	sub	sp, #28
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000886:	e15a      	b.n	8000b3e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	2101      	movs	r1, #1
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	fa01 f303 	lsl.w	r3, r1, r3
 8000894:	4013      	ands	r3, r2
 8000896:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	2b00      	cmp	r3, #0
 800089c:	f000 814c 	beq.w	8000b38 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d00b      	beq.n	80008c0 <HAL_GPIO_Init+0x48>
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d007      	beq.n	80008c0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b4:	2b11      	cmp	r3, #17
 80008b6:	d003      	beq.n	80008c0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	2b12      	cmp	r3, #18
 80008be:	d130      	bne.n	8000922 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	689b      	ldr	r3, [r3, #8]
 80008c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	005b      	lsls	r3, r3, #1
 80008ca:	2203      	movs	r2, #3
 80008cc:	fa02 f303 	lsl.w	r3, r2, r3
 80008d0:	43db      	mvns	r3, r3
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	4013      	ands	r3, r2
 80008d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	68da      	ldr	r2, [r3, #12]
 80008dc:	697b      	ldr	r3, [r7, #20]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	fa02 f303 	lsl.w	r3, r2, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	693a      	ldr	r2, [r7, #16]
 80008ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	685b      	ldr	r3, [r3, #4]
 80008f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008f6:	2201      	movs	r2, #1
 80008f8:	697b      	ldr	r3, [r7, #20]
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	693a      	ldr	r2, [r7, #16]
 8000902:	4013      	ands	r3, r2
 8000904:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	685b      	ldr	r3, [r3, #4]
 800090a:	091b      	lsrs	r3, r3, #4
 800090c:	f003 0201 	and.w	r2, r3, #1
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4313      	orrs	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	693a      	ldr	r2, [r7, #16]
 8000920:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68db      	ldr	r3, [r3, #12]
 8000926:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	2203      	movs	r2, #3
 800092e:	fa02 f303 	lsl.w	r3, r2, r3
 8000932:	43db      	mvns	r3, r3
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	4013      	ands	r3, r2
 8000938:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	005b      	lsls	r3, r3, #1
 8000942:	fa02 f303 	lsl.w	r3, r2, r3
 8000946:	693a      	ldr	r2, [r7, #16]
 8000948:	4313      	orrs	r3, r2
 800094a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	693a      	ldr	r2, [r7, #16]
 8000950:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	685b      	ldr	r3, [r3, #4]
 8000956:	2b02      	cmp	r3, #2
 8000958:	d003      	beq.n	8000962 <HAL_GPIO_Init+0xea>
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2b12      	cmp	r3, #18
 8000960:	d123      	bne.n	80009aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	08da      	lsrs	r2, r3, #3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	3208      	adds	r2, #8
 800096a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800096e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	f003 0307 	and.w	r3, r3, #7
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	220f      	movs	r2, #15
 800097a:	fa02 f303 	lsl.w	r3, r2, r3
 800097e:	43db      	mvns	r3, r3
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	4013      	ands	r3, r2
 8000984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	691a      	ldr	r2, [r3, #16]
 800098a:	697b      	ldr	r3, [r7, #20]
 800098c:	f003 0307 	and.w	r3, r3, #7
 8000990:	009b      	lsls	r3, r3, #2
 8000992:	fa02 f303 	lsl.w	r3, r2, r3
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	4313      	orrs	r3, r2
 800099a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	08da      	lsrs	r2, r3, #3
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3208      	adds	r2, #8
 80009a4:	6939      	ldr	r1, [r7, #16]
 80009a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	005b      	lsls	r3, r3, #1
 80009b4:	2203      	movs	r2, #3
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43db      	mvns	r3, r3
 80009bc:	693a      	ldr	r2, [r7, #16]
 80009be:	4013      	ands	r3, r2
 80009c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	f003 0203 	and.w	r2, r3, #3
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	005b      	lsls	r3, r3, #1
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	4313      	orrs	r3, r2
 80009d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009de:	683b      	ldr	r3, [r7, #0]
 80009e0:	685b      	ldr	r3, [r3, #4]
 80009e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	f000 80a6 	beq.w	8000b38 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ec:	4b5b      	ldr	r3, [pc, #364]	; (8000b5c <HAL_GPIO_Init+0x2e4>)
 80009ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f0:	4a5a      	ldr	r2, [pc, #360]	; (8000b5c <HAL_GPIO_Init+0x2e4>)
 80009f2:	f043 0301 	orr.w	r3, r3, #1
 80009f6:	6613      	str	r3, [r2, #96]	; 0x60
 80009f8:	4b58      	ldr	r3, [pc, #352]	; (8000b5c <HAL_GPIO_Init+0x2e4>)
 80009fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a04:	4a56      	ldr	r2, [pc, #344]	; (8000b60 <HAL_GPIO_Init+0x2e8>)
 8000a06:	697b      	ldr	r3, [r7, #20]
 8000a08:	089b      	lsrs	r3, r3, #2
 8000a0a:	3302      	adds	r3, #2
 8000a0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	220f      	movs	r2, #15
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a2e:	d01f      	beq.n	8000a70 <HAL_GPIO_Init+0x1f8>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <HAL_GPIO_Init+0x2ec>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d019      	beq.n	8000a6c <HAL_GPIO_Init+0x1f4>
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	4a4b      	ldr	r2, [pc, #300]	; (8000b68 <HAL_GPIO_Init+0x2f0>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d013      	beq.n	8000a68 <HAL_GPIO_Init+0x1f0>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	4a4a      	ldr	r2, [pc, #296]	; (8000b6c <HAL_GPIO_Init+0x2f4>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d00d      	beq.n	8000a64 <HAL_GPIO_Init+0x1ec>
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a49      	ldr	r2, [pc, #292]	; (8000b70 <HAL_GPIO_Init+0x2f8>)
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	d007      	beq.n	8000a60 <HAL_GPIO_Init+0x1e8>
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a48      	ldr	r2, [pc, #288]	; (8000b74 <HAL_GPIO_Init+0x2fc>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d101      	bne.n	8000a5c <HAL_GPIO_Init+0x1e4>
 8000a58:	2305      	movs	r3, #5
 8000a5a:	e00a      	b.n	8000a72 <HAL_GPIO_Init+0x1fa>
 8000a5c:	2306      	movs	r3, #6
 8000a5e:	e008      	b.n	8000a72 <HAL_GPIO_Init+0x1fa>
 8000a60:	2304      	movs	r3, #4
 8000a62:	e006      	b.n	8000a72 <HAL_GPIO_Init+0x1fa>
 8000a64:	2303      	movs	r3, #3
 8000a66:	e004      	b.n	8000a72 <HAL_GPIO_Init+0x1fa>
 8000a68:	2302      	movs	r3, #2
 8000a6a:	e002      	b.n	8000a72 <HAL_GPIO_Init+0x1fa>
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	e000      	b.n	8000a72 <HAL_GPIO_Init+0x1fa>
 8000a70:	2300      	movs	r3, #0
 8000a72:	697a      	ldr	r2, [r7, #20]
 8000a74:	f002 0203 	and.w	r2, r2, #3
 8000a78:	0092      	lsls	r2, r2, #2
 8000a7a:	4093      	lsls	r3, r2
 8000a7c:	693a      	ldr	r2, [r7, #16]
 8000a7e:	4313      	orrs	r3, r2
 8000a80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a82:	4937      	ldr	r1, [pc, #220]	; (8000b60 <HAL_GPIO_Init+0x2e8>)
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	089b      	lsrs	r3, r3, #2
 8000a88:	3302      	adds	r3, #2
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000a90:	4b39      	ldr	r3, [pc, #228]	; (8000b78 <HAL_GPIO_Init+0x300>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	43db      	mvns	r3, r3
 8000a9a:	693a      	ldr	r2, [r7, #16]
 8000a9c:	4013      	ands	r3, r2
 8000a9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aa0:	683b      	ldr	r3, [r7, #0]
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ab4:	4a30      	ldr	r2, [pc, #192]	; (8000b78 <HAL_GPIO_Init+0x300>)
 8000ab6:	693b      	ldr	r3, [r7, #16]
 8000ab8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000aba:	4b2f      	ldr	r3, [pc, #188]	; (8000b78 <HAL_GPIO_Init+0x300>)
 8000abc:	685b      	ldr	r3, [r3, #4]
 8000abe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	693a      	ldr	r2, [r7, #16]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ade:	4a26      	ldr	r2, [pc, #152]	; (8000b78 <HAL_GPIO_Init+0x300>)
 8000ae0:	693b      	ldr	r3, [r7, #16]
 8000ae2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000ae4:	4b24      	ldr	r3, [pc, #144]	; (8000b78 <HAL_GPIO_Init+0x300>)
 8000ae6:	689b      	ldr	r3, [r3, #8]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	4013      	ands	r3, r2
 8000af2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b08:	4a1b      	ldr	r2, [pc, #108]	; (8000b78 <HAL_GPIO_Init+0x300>)
 8000b0a:	693b      	ldr	r3, [r7, #16]
 8000b0c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b0e:	4b1a      	ldr	r3, [pc, #104]	; (8000b78 <HAL_GPIO_Init+0x300>)
 8000b10:	68db      	ldr	r3, [r3, #12]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b32:	4a11      	ldr	r2, [pc, #68]	; (8000b78 <HAL_GPIO_Init+0x300>)
 8000b34:	693b      	ldr	r3, [r7, #16]
 8000b36:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b38:	697b      	ldr	r3, [r7, #20]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	fa22 f303 	lsr.w	r3, r2, r3
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f47f ae9d 	bne.w	8000888 <HAL_GPIO_Init+0x10>
  }
}
 8000b4e:	bf00      	nop
 8000b50:	371c      	adds	r7, #28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40021000 	.word	0x40021000
 8000b60:	40010000 	.word	0x40010000
 8000b64:	48000400 	.word	0x48000400
 8000b68:	48000800 	.word	0x48000800
 8000b6c:	48000c00 	.word	0x48000c00
 8000b70:	48001000 	.word	0x48001000
 8000b74:	48001400 	.word	0x48001400
 8000b78:	40010400 	.word	0x40010400

08000b7c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b7e:	b08b      	sub	sp, #44	; 0x2c
 8000b80:	af06      	add	r7, sp, #24
 8000b82:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d101      	bne.n	8000b8e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e0ad      	b.n	8000cea <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000b94:	b2db      	uxtb	r3, r3
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d106      	bne.n	8000ba8 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f004 fe08 	bl	80057b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2203      	movs	r2, #3
 8000bac:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f001 fea0 	bl	80028fa <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000bba:	2300      	movs	r3, #0
 8000bbc:	73fb      	strb	r3, [r7, #15]
 8000bbe:	e035      	b.n	8000c2c <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	015b      	lsls	r3, r3, #5
 8000bc6:	4413      	add	r3, r2
 8000bc8:	3329      	adds	r3, #41	; 0x29
 8000bca:	2201      	movs	r2, #1
 8000bcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000bce:	7bfb      	ldrb	r3, [r7, #15]
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	015b      	lsls	r3, r3, #5
 8000bd4:	4413      	add	r3, r2
 8000bd6:	3328      	adds	r3, #40	; 0x28
 8000bd8:	7bfa      	ldrb	r2, [r7, #15]
 8000bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000bdc:	7bfb      	ldrb	r3, [r7, #15]
 8000bde:	7bfa      	ldrb	r2, [r7, #15]
 8000be0:	b291      	uxth	r1, r2
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	015b      	lsls	r3, r3, #5
 8000be6:	4413      	add	r3, r2
 8000be8:	3336      	adds	r3, #54	; 0x36
 8000bea:	460a      	mov	r2, r1
 8000bec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000bee:	7bfb      	ldrb	r3, [r7, #15]
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	015b      	lsls	r3, r3, #5
 8000bf4:	4413      	add	r3, r2
 8000bf6:	332b      	adds	r3, #43	; 0x2b
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000bfc:	7bfb      	ldrb	r3, [r7, #15]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	015b      	lsls	r3, r3, #5
 8000c02:	4413      	add	r3, r2
 8000c04:	3338      	adds	r3, #56	; 0x38
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000c0a:	7bfb      	ldrb	r3, [r7, #15]
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	015b      	lsls	r3, r3, #5
 8000c10:	4413      	add	r3, r2
 8000c12:	333c      	adds	r3, #60	; 0x3c
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000c18:	7bfb      	ldrb	r3, [r7, #15]
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	3302      	adds	r3, #2
 8000c1e:	015b      	lsls	r3, r3, #5
 8000c20:	4413      	add	r3, r2
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	7bfa      	ldrb	r2, [r7, #15]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	685b      	ldr	r3, [r3, #4]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d3c4      	bcc.n	8000bc0 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	e031      	b.n	8000ca0 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000c3c:	7bfb      	ldrb	r3, [r7, #15]
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	015b      	lsls	r3, r3, #5
 8000c42:	4413      	add	r3, r2
 8000c44:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000c48:	2200      	movs	r2, #0
 8000c4a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000c4c:	7bfb      	ldrb	r3, [r7, #15]
 8000c4e:	687a      	ldr	r2, [r7, #4]
 8000c50:	015b      	lsls	r3, r3, #5
 8000c52:	4413      	add	r3, r2
 8000c54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000c58:	7bfa      	ldrb	r2, [r7, #15]
 8000c5a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000c5c:	7bfb      	ldrb	r3, [r7, #15]
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	015b      	lsls	r3, r3, #5
 8000c62:	4413      	add	r3, r2
 8000c64:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000c68:	2200      	movs	r2, #0
 8000c6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	687a      	ldr	r2, [r7, #4]
 8000c70:	015b      	lsls	r3, r3, #5
 8000c72:	4413      	add	r3, r2
 8000c74:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	015b      	lsls	r3, r3, #5
 8000c82:	4413      	add	r3, r2
 8000c84:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	330a      	adds	r3, #10
 8000c92:	015b      	lsls	r3, r3, #5
 8000c94:	4413      	add	r3, r2
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	73fb      	strb	r3, [r7, #15]
 8000ca0:	7bfa      	ldrb	r2, [r7, #15]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d3c8      	bcc.n	8000c3c <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	687e      	ldr	r6, [r7, #4]
 8000cb2:	466d      	mov	r5, sp
 8000cb4:	f106 0410 	add.w	r4, r6, #16
 8000cb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000cba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	602b      	str	r3, [r5, #0]
 8000cc0:	1d33      	adds	r3, r6, #4
 8000cc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cc4:	6838      	ldr	r0, [r7, #0]
 8000cc6:	f001 fe33 	bl	8002930 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	69db      	ldr	r3, [r3, #28]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d102      	bne.n	8000ce8 <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f000 fe35 	bl	8001952 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000ce8:	2300      	movs	r3, #0
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3714      	adds	r7, #20
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000cf2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d101      	bne.n	8000d08 <HAL_PCD_Start+0x16>
 8000d04:	2302      	movs	r3, #2
 8000d06:	e012      	b.n	8000d2e <HAL_PCD_Start+0x3c>
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fe57 	bl	80039c8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f001 fdd2 	bl	80028c8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f002 fe57 	bl	80039f6 <USB_ReadInterrupts>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d52:	d102      	bne.n	8000d5a <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f000 fb33 	bl	80013c0 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fe49 	bl	80039f6 <USB_ReadInterrupts>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000d6e:	d112      	bne.n	8000d96 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000d78:	b29a      	uxth	r2, r3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000d82:	b292      	uxth	r2, r2
 8000d84:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f004 fdac 	bl	80058e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000d8e:	2100      	movs	r1, #0
 8000d90:	6878      	ldr	r0, [r7, #4]
 8000d92:	f000 f91e 	bl	8000fd2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 fe2b 	bl	80039f6 <USB_ReadInterrupts>
 8000da0:	4603      	mov	r3, r0
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000daa:	d10b      	bne.n	8000dc4 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000dbe:	b292      	uxth	r2, r2
 8000dc0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f002 fe14 	bl	80039f6 <USB_ReadInterrupts>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000dd8:	d10b      	bne.n	8000df2 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000de2:	b29a      	uxth	r2, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000dec:	b292      	uxth	r2, r2
 8000dee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4618      	mov	r0, r3
 8000df8:	f002 fdfd 	bl	80039f6 <USB_ReadInterrupts>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e06:	d133      	bne.n	8000e70 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e10:	b29a      	uxth	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f022 0204 	bic.w	r2, r2, #4
 8000e1a:	b292      	uxth	r2, r2
 8000e1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 0208 	bic.w	r2, r2, #8
 8000e32:	b292      	uxth	r2, r2
 8000e34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d107      	bne.n	8000e52 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f004 ff3b 	bl	8005cc8 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f004 fd80 	bl	8005958 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e6a:	b292      	uxth	r2, r2
 8000e6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f002 fdbe 	bl	80039f6 <USB_ReadInterrupts>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000e84:	d126      	bne.n	8000ed4 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f042 0208 	orr.w	r2, r2, #8
 8000e98:	b292      	uxth	r2, r2
 8000e9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000eb0:	b292      	uxth	r2, r2
 8000eb2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f042 0204 	orr.w	r2, r2, #4
 8000ec8:	b292      	uxth	r2, r2
 8000eca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f004 fd28 	bl	8005924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fd8c 	bl	80039f6 <USB_ReadInterrupts>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee4:	2b80      	cmp	r3, #128	; 0x80
 8000ee6:	d13f      	bne.n	8000f68 <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000efa:	b292      	uxth	r2, r2
 8000efc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d12b      	bne.n	8000f62 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f042 0204 	orr.w	r2, r2, #4
 8000f1c:	b292      	uxth	r2, r2
 8000f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f042 0208 	orr.w	r2, r2, #8
 8000f34:	b292      	uxth	r2, r2
 8000f36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000f4a:	b29b      	uxth	r3, r3
 8000f4c:	089b      	lsrs	r3, r3, #2
 8000f4e:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000f58:	2101      	movs	r1, #1
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f004 feb4 	bl	8005cc8 <HAL_PCDEx_LPM_Callback>
 8000f60:	e002      	b.n	8000f68 <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f004 fcde 	bl	8005924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f002 fd42 	bl	80039f6 <USB_ReadInterrupts>
 8000f72:	4603      	mov	r3, r0
 8000f74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f7c:	d10e      	bne.n	8000f9c <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000f90:	b292      	uxth	r2, r2
 8000f92:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f004 fc97 	bl	80058ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 fd28 	bl	80039f6 <USB_ReadInterrupts>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fb0:	d10b      	bne.n	8000fca <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000fc4:	b292      	uxth	r2, r2
 8000fc6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
 8000fda:	460b      	mov	r3, r1
 8000fdc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d101      	bne.n	8000fec <HAL_PCD_SetAddress+0x1a>
 8000fe8:	2302      	movs	r3, #2
 8000fea:	e013      	b.n	8001014 <HAL_PCD_SetAddress+0x42>
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	78fa      	ldrb	r2, [r7, #3]
 8000ff8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	78fa      	ldrb	r2, [r7, #3]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fccb 	bl	80039a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001012:	2300      	movs	r3, #0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	4608      	mov	r0, r1
 8001026:	4611      	mov	r1, r2
 8001028:	461a      	mov	r2, r3
 800102a:	4603      	mov	r3, r0
 800102c:	70fb      	strb	r3, [r7, #3]
 800102e:	460b      	mov	r3, r1
 8001030:	803b      	strh	r3, [r7, #0]
 8001032:	4613      	mov	r3, r2
 8001034:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800103a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da0b      	bge.n	800105a <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001042:	78fb      	ldrb	r3, [r7, #3]
 8001044:	f003 0307 	and.w	r3, r3, #7
 8001048:	015b      	lsls	r3, r3, #5
 800104a:	3328      	adds	r3, #40	; 0x28
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	4413      	add	r3, r2
 8001050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2201      	movs	r2, #1
 8001056:	705a      	strb	r2, [r3, #1]
 8001058:	e00b      	b.n	8001072 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800105a:	78fb      	ldrb	r3, [r7, #3]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	015b      	lsls	r3, r3, #5
 8001062:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001066:	687a      	ldr	r2, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	2200      	movs	r2, #0
 8001070:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001072:	78fb      	ldrb	r3, [r7, #3]
 8001074:	f003 0307 	and.w	r3, r3, #7
 8001078:	b2da      	uxtb	r2, r3
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800107e:	883a      	ldrh	r2, [r7, #0]
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	78ba      	ldrb	r2, [r7, #2]
 8001088:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	785b      	ldrb	r3, [r3, #1]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d004      	beq.n	800109c <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	b29a      	uxth	r2, r3
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800109c:	78bb      	ldrb	r3, [r7, #2]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d102      	bne.n	80010a8 <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2200      	movs	r2, #0
 80010a6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d101      	bne.n	80010b6 <HAL_PCD_EP_Open+0x9a>
 80010b2:	2302      	movs	r3, #2
 80010b4:	e00e      	b.n	80010d4 <HAL_PCD_EP_Open+0xb8>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fc57 	bl	8002978 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80010d2:	7afb      	ldrb	r3, [r7, #11]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	460b      	mov	r3, r1
 80010e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	da0b      	bge.n	8001108 <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	015b      	lsls	r3, r3, #5
 80010f8:	3328      	adds	r3, #40	; 0x28
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	2201      	movs	r2, #1
 8001104:	705a      	strb	r2, [r3, #1]
 8001106:	e00b      	b.n	8001120 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	015b      	lsls	r3, r3, #5
 8001110:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001114:	687a      	ldr	r2, [r7, #4]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2200      	movs	r2, #0
 800111e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	b2da      	uxtb	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001132:	2b01      	cmp	r3, #1
 8001134:	d101      	bne.n	800113a <HAL_PCD_EP_Close+0x5e>
 8001136:	2302      	movs	r3, #2
 8001138:	e00e      	b.n	8001158 <HAL_PCD_EP_Close+0x7c>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	68f9      	ldr	r1, [r7, #12]
 8001148:	4618      	mov	r0, r3
 800114a:	f001 ff05 	bl	8002f58 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	3710      	adds	r7, #16
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	460b      	mov	r3, r1
 800116e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	f003 0307 	and.w	r3, r3, #7
 8001176:	015b      	lsls	r3, r3, #5
 8001178:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800117c:	68fa      	ldr	r2, [r7, #12]
 800117e:	4413      	add	r3, r2
 8001180:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	2200      	movs	r2, #0
 8001192:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	2200      	movs	r2, #0
 8001198:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800119a:	7afb      	ldrb	r3, [r7, #11]
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80011a6:	7afb      	ldrb	r3, [r7, #11]
 80011a8:	f003 0307 	and.w	r3, r3, #7
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d106      	bne.n	80011be <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6979      	ldr	r1, [r7, #20]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f002 f864 	bl	8003284 <USB_EPStartXfer>
 80011bc:	e005      	b.n	80011ca <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	6979      	ldr	r1, [r7, #20]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 f85d 	bl	8003284 <USB_EPStartXfer>
  }

  return HAL_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80011e0:	78fb      	ldrb	r3, [r7, #3]
 80011e2:	f003 0307 	and.w	r3, r3, #7
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	330a      	adds	r3, #10
 80011ea:	015b      	lsls	r3, r3, #5
 80011ec:	4413      	add	r3, r2
 80011ee:	3304      	adds	r3, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr

080011fe <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b086      	sub	sp, #24
 8001202:	af00      	add	r7, sp, #0
 8001204:	60f8      	str	r0, [r7, #12]
 8001206:	607a      	str	r2, [r7, #4]
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	460b      	mov	r3, r1
 800120c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800120e:	7afb      	ldrb	r3, [r7, #11]
 8001210:	f003 0307 	and.w	r3, r3, #7
 8001214:	015b      	lsls	r3, r3, #5
 8001216:	3328      	adds	r3, #40	; 0x28
 8001218:	68fa      	ldr	r2, [r7, #12]
 800121a:	4413      	add	r3, r2
 800121c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	683a      	ldr	r2, [r7, #0]
 8001228:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2200      	movs	r2, #0
 800122e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	2201      	movs	r2, #1
 8001234:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001236:	7afb      	ldrb	r3, [r7, #11]
 8001238:	f003 0307 	and.w	r3, r3, #7
 800123c:	b2da      	uxtb	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	f003 0307 	and.w	r3, r3, #7
 8001248:	2b00      	cmp	r3, #0
 800124a:	d106      	bne.n	800125a <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6979      	ldr	r1, [r7, #20]
 8001252:	4618      	mov	r0, r3
 8001254:	f002 f816 	bl	8003284 <USB_EPStartXfer>
 8001258:	e005      	b.n	8001266 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6979      	ldr	r1, [r7, #20]
 8001260:	4618      	mov	r0, r3
 8001262:	f002 f80f 	bl	8003284 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b084      	sub	sp, #16
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800127c:	78fb      	ldrb	r3, [r7, #3]
 800127e:	f003 0207 	and.w	r2, r3, #7
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	429a      	cmp	r2, r3
 8001288:	d901      	bls.n	800128e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e046      	b.n	800131c <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800128e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001292:	2b00      	cmp	r3, #0
 8001294:	da0b      	bge.n	80012ae <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	f003 0307 	and.w	r3, r3, #7
 800129c:	015b      	lsls	r3, r3, #5
 800129e:	3328      	adds	r3, #40	; 0x28
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2201      	movs	r2, #1
 80012aa:	705a      	strb	r2, [r3, #1]
 80012ac:	e009      	b.n	80012c2 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80012ae:	78fb      	ldrb	r3, [r7, #3]
 80012b0:	015b      	lsls	r3, r3, #5
 80012b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	2200      	movs	r2, #0
 80012c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2201      	movs	r2, #1
 80012c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012c8:	78fb      	ldrb	r3, [r7, #3]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d101      	bne.n	80012e2 <HAL_PCD_EP_SetStall+0x72>
 80012de:	2302      	movs	r3, #2
 80012e0:	e01c      	b.n	800131c <HAL_PCD_EP_SetStall+0xac>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68f9      	ldr	r1, [r7, #12]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f002 fa7f 	bl	80037f4 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d108      	bne.n	8001312 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800130a:	4619      	mov	r1, r3
 800130c:	4610      	mov	r0, r2
 800130e:	f002 fb82 	bl	8003a16 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2200      	movs	r2, #0
 8001316:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001330:	78fb      	ldrb	r3, [r7, #3]
 8001332:	f003 020f 	and.w	r2, r3, #15
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	d901      	bls.n	8001342 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e03a      	b.n	80013b8 <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001342:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001346:	2b00      	cmp	r3, #0
 8001348:	da0b      	bge.n	8001362 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	f003 0307 	and.w	r3, r3, #7
 8001350:	015b      	lsls	r3, r3, #5
 8001352:	3328      	adds	r3, #40	; 0x28
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	4413      	add	r3, r2
 8001358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	2201      	movs	r2, #1
 800135e:	705a      	strb	r2, [r3, #1]
 8001360:	e00b      	b.n	800137a <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001362:	78fb      	ldrb	r3, [r7, #3]
 8001364:	f003 0307 	and.w	r3, r3, #7
 8001368:	015b      	lsls	r3, r3, #5
 800136a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2200      	movs	r2, #0
 8001378:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	2200      	movs	r2, #0
 800137e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001380:	78fb      	ldrb	r3, [r7, #3]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	b2da      	uxtb	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001392:	2b01      	cmp	r3, #1
 8001394:	d101      	bne.n	800139a <HAL_PCD_EP_ClrStall+0x76>
 8001396:	2302      	movs	r3, #2
 8001398:	e00e      	b.n	80013b8 <HAL_PCD_EP_ClrStall+0x94>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2201      	movs	r2, #1
 800139e:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68f9      	ldr	r1, [r7, #12]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f002 fa65 	bl	8003878 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80013c0:	b590      	push	{r4, r7, lr}
 80013c2:	b089      	sub	sp, #36	; 0x24
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80013c8:	e274      	b.n	80018b4 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013d2:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80013d4:	8afb      	ldrh	r3, [r7, #22]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	f003 030f 	and.w	r3, r3, #15
 80013dc:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80013de:	7d7b      	ldrb	r3, [r7, #21]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	f040 813c 	bne.w	800165e <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80013e6:	8afb      	ldrh	r3, [r7, #22]
 80013e8:	f003 0310 	and.w	r3, r3, #16
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d14f      	bne.n	8001490 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80013fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001400:	b29c      	uxth	r4, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800140a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800140e:	b29b      	uxth	r3, r3
 8001410:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	3328      	adds	r3, #40	; 0x28
 8001416:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001420:	b29b      	uxth	r3, r3
 8001422:	461a      	mov	r2, r3
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4413      	add	r3, r2
 800142c:	687a      	ldr	r2, [r7, #4]
 800142e:	6812      	ldr	r2, [r2, #0]
 8001430:	4413      	add	r3, r2
 8001432:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001436:	881b      	ldrh	r3, [r3, #0]
 8001438:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	695a      	ldr	r2, [r3, #20]
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	441a      	add	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800144e:	2100      	movs	r1, #0
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f004 fa23 	bl	800589c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b00      	cmp	r3, #0
 8001460:	f000 8228 	beq.w	80018b4 <PCD_EP_ISR_Handler+0x4f4>
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	699b      	ldr	r3, [r3, #24]
 8001468:	2b00      	cmp	r3, #0
 800146a:	f040 8223 	bne.w	80018b4 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800147a:	b2da      	uxtb	r2, r3
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	b292      	uxth	r2, r2
 8001482:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2200      	movs	r2, #0
 800148a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800148e:	e211      	b.n	80018b4 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001496:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80014a0:	8a7b      	ldrh	r3, [r7, #18]
 80014a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d031      	beq.n	800150e <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	6812      	ldr	r2, [r2, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6818      	ldr	r0, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f503 710c 	add.w	r1, r3, #560	; 0x230
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	f002 fae3 	bl	8003ab0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	881b      	ldrh	r3, [r3, #0]
 80014f0:	b29a      	uxth	r2, r3
 80014f2:	f640 738f 	movw	r3, #3983	; 0xf8f
 80014f6:	4013      	ands	r3, r2
 80014f8:	b29c      	uxth	r4, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001502:	b292      	uxth	r2, r2
 8001504:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f004 f99e 	bl	8005848 <HAL_PCD_SetupStageCallback>
 800150c:	e1d2      	b.n	80018b4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800150e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001512:	2b00      	cmp	r3, #0
 8001514:	f280 81ce 	bge.w	80018b4 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	881b      	ldrh	r3, [r3, #0]
 800151e:	b29a      	uxth	r2, r3
 8001520:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001524:	4013      	ands	r3, r2
 8001526:	b29c      	uxth	r4, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001530:	b292      	uxth	r2, r2
 8001532:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800153c:	b29b      	uxth	r3, r3
 800153e:	461a      	mov	r2, r3
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	00db      	lsls	r3, r3, #3
 8001546:	4413      	add	r3, r2
 8001548:	687a      	ldr	r2, [r7, #4]
 800154a:	6812      	ldr	r2, [r2, #0]
 800154c:	4413      	add	r3, r2
 800154e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	69db      	ldr	r3, [r3, #28]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d019      	beq.n	8001598 <PCD_EP_ISR_Handler+0x1d8>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d015      	beq.n	8001598 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6818      	ldr	r0, [r3, #0]
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6959      	ldr	r1, [r3, #20]
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800157c:	b29b      	uxth	r3, r3
 800157e:	f002 fa97 	bl	8003ab0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	695a      	ldr	r2, [r3, #20]
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	69db      	ldr	r3, [r3, #28]
 800158a:	441a      	add	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001590:	2100      	movs	r1, #0
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f004 f96a 	bl	800586c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	461c      	mov	r4, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015a6:	b29b      	uxth	r3, r3
 80015a8:	441c      	add	r4, r3
 80015aa:	f204 4306 	addw	r3, r4, #1030	; 0x406
 80015ae:	461c      	mov	r4, r3
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10e      	bne.n	80015d6 <PCD_EP_ISR_Handler+0x216>
 80015b8:	8823      	ldrh	r3, [r4, #0]
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	8023      	strh	r3, [r4, #0]
 80015c4:	8823      	ldrh	r3, [r4, #0]
 80015c6:	b29b      	uxth	r3, r3
 80015c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80015cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80015d0:	b29b      	uxth	r3, r3
 80015d2:	8023      	strh	r3, [r4, #0]
 80015d4:	e02d      	b.n	8001632 <PCD_EP_ISR_Handler+0x272>
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	691b      	ldr	r3, [r3, #16]
 80015da:	2b3e      	cmp	r3, #62	; 0x3e
 80015dc:	d812      	bhi.n	8001604 <PCD_EP_ISR_Handler+0x244>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	085b      	lsrs	r3, r3, #1
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d002      	beq.n	80015f8 <PCD_EP_ISR_Handler+0x238>
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	3301      	adds	r3, #1
 80015f6:	61bb      	str	r3, [r7, #24]
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	029b      	lsls	r3, r3, #10
 80015fe:	b29b      	uxth	r3, r3
 8001600:	8023      	strh	r3, [r4, #0]
 8001602:	e016      	b.n	8001632 <PCD_EP_ISR_Handler+0x272>
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	691b      	ldr	r3, [r3, #16]
 8001608:	095b      	lsrs	r3, r3, #5
 800160a:	61bb      	str	r3, [r7, #24]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	f003 031f 	and.w	r3, r3, #31
 8001614:	2b00      	cmp	r3, #0
 8001616:	d102      	bne.n	800161e <PCD_EP_ISR_Handler+0x25e>
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	3b01      	subs	r3, #1
 800161c:	61bb      	str	r3, [r7, #24]
 800161e:	69bb      	ldr	r3, [r7, #24]
 8001620:	b29b      	uxth	r3, r3
 8001622:	029b      	lsls	r3, r3, #10
 8001624:	b29b      	uxth	r3, r3
 8001626:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800162a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800162e:	b29b      	uxth	r3, r3
 8001630:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	881b      	ldrh	r3, [r3, #0]
 8001638:	b29b      	uxth	r3, r3
 800163a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800163e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001642:	b29c      	uxth	r4, r3
 8001644:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001648:	b29c      	uxth	r4, r3
 800164a:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800164e:	b29c      	uxth	r4, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	4b9e      	ldr	r3, [pc, #632]	; (80018d0 <PCD_EP_ISR_Handler+0x510>)
 8001656:	4323      	orrs	r3, r4
 8001658:	b29b      	uxth	r3, r3
 800165a:	8013      	strh	r3, [r2, #0]
 800165c:	e12a      	b.n	80018b4 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	461a      	mov	r2, r3
 8001664:	7d7b      	ldrb	r3, [r7, #21]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800166e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f280 80cb 	bge.w	800180e <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	7d7b      	ldrb	r3, [r7, #21]
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29a      	uxth	r2, r3
 8001688:	f640 738f 	movw	r3, #3983	; 0xf8f
 800168c:	4013      	ands	r3, r2
 800168e:	b29c      	uxth	r4, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	461a      	mov	r2, r3
 8001696:	7d7b      	ldrb	r3, [r7, #21]
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80016a0:	b292      	uxth	r2, r2
 80016a2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80016a4:	7d7b      	ldrb	r3, [r7, #21]
 80016a6:	015b      	lsls	r3, r3, #5
 80016a8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	4413      	add	r3, r2
 80016b0:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	7b1b      	ldrb	r3, [r3, #12]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d11f      	bne.n	80016fa <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	4413      	add	r3, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6812      	ldr	r2, [r2, #0]
 80016d2:	4413      	add	r3, r2
 80016d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80016d8:	881b      	ldrh	r3, [r3, #0]
 80016da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80016de:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 80016e0:	8bfb      	ldrh	r3, [r7, #30]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d06e      	beq.n	80017c4 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6959      	ldr	r1, [r3, #20]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	88da      	ldrh	r2, [r3, #6]
 80016f2:	8bfb      	ldrh	r3, [r7, #30]
 80016f4:	f002 f9dc 	bl	8003ab0 <USB_ReadPMA>
 80016f8:	e064      	b.n	80017c4 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	881b      	ldrh	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001714:	b29c      	uxth	r4, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	461a      	mov	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	441a      	add	r2, r3
 8001724:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <PCD_EP_ISR_Handler+0x514>)
 8001726:	4323      	orrs	r3, r4
 8001728:	b29b      	uxth	r3, r3
 800172a:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	461a      	mov	r2, r3
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	4413      	add	r3, r2
 800173a:	881b      	ldrh	r3, [r3, #0]
 800173c:	b29b      	uxth	r3, r3
 800173e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d01f      	beq.n	8001786 <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800174e:	b29b      	uxth	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	4413      	add	r3, r2
 8001760:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800176a:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 800176c:	8bfb      	ldrh	r3, [r7, #30]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d028      	beq.n	80017c4 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6818      	ldr	r0, [r3, #0]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6959      	ldr	r1, [r3, #20]
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	891a      	ldrh	r2, [r3, #8]
 800177e:	8bfb      	ldrh	r3, [r7, #30]
 8001780:	f002 f996 	bl	8003ab0 <USB_ReadPMA>
 8001784:	e01e      	b.n	80017c4 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800178e:	b29b      	uxth	r3, r3
 8001790:	461a      	mov	r2, r3
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	4413      	add	r3, r2
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6812      	ldr	r2, [r2, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017aa:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 80017ac:	8bfb      	ldrh	r3, [r7, #30]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d008      	beq.n	80017c4 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6818      	ldr	r0, [r3, #0]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	6959      	ldr	r1, [r3, #20]
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	895a      	ldrh	r2, [r3, #10]
 80017be:	8bfb      	ldrh	r3, [r7, #30]
 80017c0:	f002 f976 	bl	8003ab0 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	69da      	ldr	r2, [r3, #28]
 80017c8:	8bfb      	ldrh	r3, [r7, #30]
 80017ca:	441a      	add	r2, r3
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	695a      	ldr	r2, [r3, #20]
 80017d4:	8bfb      	ldrh	r3, [r7, #30]
 80017d6:	441a      	add	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <PCD_EP_ISR_Handler+0x42e>
 80017e4:	8bfa      	ldrh	r2, [r7, #30]
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d206      	bcs.n	80017fc <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	4619      	mov	r1, r3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f004 f839 	bl	800586c <HAL_PCD_DataOutStageCallback>
 80017fa:	e008      	b.n	800180e <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	7819      	ldrb	r1, [r3, #0]
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	695a      	ldr	r2, [r3, #20]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f7ff fca9 	bl	8001160 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800180e:	8a7b      	ldrh	r3, [r7, #18]
 8001810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001814:	2b00      	cmp	r3, #0
 8001816:	d04d      	beq.n	80018b4 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001818:	7d7b      	ldrb	r3, [r7, #21]
 800181a:	015b      	lsls	r3, r3, #5
 800181c:	3328      	adds	r3, #40	; 0x28
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	7d7b      	ldrb	r3, [r7, #21]
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800183c:	b29c      	uxth	r4, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	7d7b      	ldrb	r3, [r7, #21]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	441a      	add	r2, r3
 800184a:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 800184e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001852:	b29b      	uxth	r3, r3
 8001854:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800185e:	b29b      	uxth	r3, r3
 8001860:	461a      	mov	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	4413      	add	r3, r2
 8001870:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001874:	881b      	ldrh	r3, [r3, #0]
 8001876:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	441a      	add	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d106      	bne.n	80018a2 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f003 fffe 	bl	800589c <HAL_PCD_DataInStageCallback>
 80018a0:	e008      	b.n	80018b4 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	7819      	ldrb	r1, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	695a      	ldr	r2, [r3, #20]
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff fca5 	bl	80011fe <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018bc:	b29b      	uxth	r3, r3
 80018be:	b21b      	sxth	r3, r3
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f6ff ad82 	blt.w	80013ca <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3724      	adds	r7, #36	; 0x24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd90      	pop	{r4, r7, pc}
 80018d0:	ffff8080 	.word	0xffff8080
 80018d4:	ffff80c0 	.word	0xffff80c0

080018d8 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 80018d8:	b480      	push	{r7}
 80018da:	b087      	sub	sp, #28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	460b      	mov	r3, r1
 80018e4:	817b      	strh	r3, [r7, #10]
 80018e6:	4613      	mov	r3, r2
 80018e8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80018ea:	897b      	ldrh	r3, [r7, #10]
 80018ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d008      	beq.n	8001908 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018f6:	897b      	ldrh	r3, [r7, #10]
 80018f8:	f003 0307 	and.w	r3, r3, #7
 80018fc:	015b      	lsls	r3, r3, #5
 80018fe:	3328      	adds	r3, #40	; 0x28
 8001900:	68fa      	ldr	r2, [r7, #12]
 8001902:	4413      	add	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
 8001906:	e006      	b.n	8001916 <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001908:	897b      	ldrh	r3, [r7, #10]
 800190a:	015b      	lsls	r3, r3, #5
 800190c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	4413      	add	r3, r2
 8001914:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001916:	893b      	ldrh	r3, [r7, #8]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d107      	bne.n	800192c <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2200      	movs	r2, #0
 8001920:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	b29a      	uxth	r2, r3
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	80da      	strh	r2, [r3, #6]
 800192a:	e00b      	b.n	8001944 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	2201      	movs	r2, #1
 8001930:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	b29a      	uxth	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	b29a      	uxth	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001944:	2300      	movs	r3, #0
}
 8001946:	4618      	mov	r0, r3
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001952:	b480      	push	{r7}
 8001954:	b085      	sub	sp, #20
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001976:	b29b      	uxth	r3, r3
 8001978:	f043 0301 	orr.w	r3, r3, #1
 800197c:	b29a      	uxth	r2, r3
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800198a:	b29b      	uxth	r3, r3
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	b29a      	uxth	r2, r3
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3714      	adds	r7, #20
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
	...

080019a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d141      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019b6:	4b4b      	ldr	r3, [pc, #300]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c2:	d131      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019c4:	4b47      	ldr	r3, [pc, #284]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ca:	4a46      	ldr	r2, [pc, #280]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d4:	4b43      	ldr	r3, [pc, #268]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019dc:	4a41      	ldr	r2, [pc, #260]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019e4:	4b40      	ldr	r3, [pc, #256]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2232      	movs	r2, #50	; 0x32
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	4a3f      	ldr	r2, [pc, #252]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0c9b      	lsrs	r3, r3, #18
 80019f6:	3301      	adds	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019fa:	e002      	b.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d102      	bne.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f2      	bne.n	80019fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a16:	4b33      	ldr	r3, [pc, #204]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d158      	bne.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e057      	b.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a28:	4b2e      	ldr	r3, [pc, #184]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2e:	4a2d      	ldr	r2, [pc, #180]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a38:	e04d      	b.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a40:	d141      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a42:	4b28      	ldr	r3, [pc, #160]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a4e:	d131      	bne.n	8001ab4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a50:	4b24      	ldr	r3, [pc, #144]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a56:	4a23      	ldr	r2, [pc, #140]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a68:	4a1e      	ldr	r2, [pc, #120]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2232      	movs	r2, #50	; 0x32
 8001a76:	fb02 f303 	mul.w	r3, r2, r3
 8001a7a:	4a1c      	ldr	r2, [pc, #112]	; (8001aec <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	3301      	adds	r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a86:	e002      	b.n	8001a8e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a90:	695b      	ldr	r3, [r3, #20]
 8001a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a9a:	d102      	bne.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f2      	bne.n	8001a88 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aae:	d112      	bne.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	e011      	b.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aba:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ac4:	e007      	b.n	8001ad6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ac6:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ad4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	40007000 	.word	0x40007000
 8001ae8:	20000118 	.word	0x20000118
 8001aec:	431bde83 	.word	0x431bde83

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b088      	sub	sp, #32
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e308      	b.n	8002114 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d075      	beq.n	8001bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b0e:	4ba3      	ldr	r3, [pc, #652]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b18:	4ba0      	ldr	r3, [pc, #640]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	2b0c      	cmp	r3, #12
 8001b26:	d102      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3e>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	d002      	beq.n	8001b34 <HAL_RCC_OscConfig+0x44>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d10b      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	4b99      	ldr	r3, [pc, #612]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d05b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x108>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d157      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e2e3      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x74>
 8001b56:	4b91      	ldr	r3, [pc, #580]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a8a      	ldr	r2, [pc, #552]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a87      	ldr	r2, [pc, #540]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b88:	4b84      	ldr	r3, [pc, #528]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a83      	ldr	r2, [pc, #524]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b81      	ldr	r3, [pc, #516]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a80      	ldr	r2, [pc, #512]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba8:	f7fe fb9a 	bl	80002e0 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7fe fb96 	bl	80002e0 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e2a8      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xc0>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd0:	f7fe fb86 	bl	80002e0 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7fe fb82 	bl	80002e0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e294      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bea:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xe8>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d075      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b65      	ldr	r3, [pc, #404]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	2b0c      	cmp	r3, #12
 8001c1e:	d102      	bne.n	8001c26 <HAL_RCC_OscConfig+0x136>
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d002      	beq.n	8001c2c <HAL_RCC_OscConfig+0x13c>
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d11f      	bne.n	8001c6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c2c:	4b5b      	ldr	r3, [pc, #364]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_RCC_OscConfig+0x154>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d101      	bne.n	8001c44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	e267      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c44:	4b55      	ldr	r3, [pc, #340]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691b      	ldr	r3, [r3, #16]
 8001c50:	061b      	lsls	r3, r3, #24
 8001c52:	4952      	ldr	r1, [pc, #328]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c58:	4b51      	ldr	r3, [pc, #324]	; (8001da0 <HAL_RCC_OscConfig+0x2b0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe faf3 	bl	8000248 <HAL_InitTick>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d043      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e253      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d023      	beq.n	8001cbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a48      	ldr	r2, [pc, #288]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7fe fb2e 	bl	80002e0 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7fe fb2a 	bl	80002e0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e23c      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9a:	4b40      	ldr	r3, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca6:	4b3d      	ldr	r3, [pc, #244]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	061b      	lsls	r3, r3, #24
 8001cb4:	4939      	ldr	r1, [pc, #228]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
 8001cba:	e01a      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cbc:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a36      	ldr	r2, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7fe fb0a 	bl	80002e0 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cd0:	f7fe fb06 	bl	80002e0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e218      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce2:	4b2e      	ldr	r3, [pc, #184]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x1e0>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d03c      	beq.n	8001d78 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	695b      	ldr	r3, [r3, #20]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d01c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0c:	4a23      	ldr	r2, [pc, #140]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d16:	f7fe fae3 	bl	80002e0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7fe fadf 	bl	80002e0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e1f1      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0ef      	beq.n	8001d1e <HAL_RCC_OscConfig+0x22e>
 8001d3e:	e01b      	b.n	8001d78 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d40:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d46:	4a15      	ldr	r2, [pc, #84]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	f023 0301 	bic.w	r3, r3, #1
 8001d4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d50:	f7fe fac6 	bl	80002e0 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d58:	f7fe fac2 	bl	80002e0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1d4      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d1ef      	bne.n	8001d58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 80ab 	beq.w	8001edc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d86:	2300      	movs	r3, #0
 8001d88:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2b4>
 8001d96:	2301      	movs	r3, #1
 8001d98:	e005      	b.n	8001da6 <HAL_RCC_OscConfig+0x2b6>
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	20000000 	.word	0x20000000
 8001da4:	2300      	movs	r3, #0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00d      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4baf      	ldr	r3, [pc, #700]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dae:	4aae      	ldr	r2, [pc, #696]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	6593      	str	r3, [r2, #88]	; 0x58
 8001db6:	4bac      	ldr	r3, [pc, #688]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dc6:	4ba9      	ldr	r3, [pc, #676]	; (800206c <HAL_RCC_OscConfig+0x57c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dd2:	4ba6      	ldr	r3, [pc, #664]	; (800206c <HAL_RCC_OscConfig+0x57c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4aa5      	ldr	r2, [pc, #660]	; (800206c <HAL_RCC_OscConfig+0x57c>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7fe fa7f 	bl	80002e0 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7fe fa7b 	bl	80002e0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e18d      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	4b9c      	ldr	r3, [pc, #624]	; (800206c <HAL_RCC_OscConfig+0x57c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d108      	bne.n	8001e1e <HAL_RCC_OscConfig+0x32e>
 8001e0c:	4b96      	ldr	r3, [pc, #600]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e12:	4a95      	ldr	r2, [pc, #596]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e1c:	e024      	b.n	8001e68 <HAL_RCC_OscConfig+0x378>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d110      	bne.n	8001e48 <HAL_RCC_OscConfig+0x358>
 8001e26:	4b90      	ldr	r3, [pc, #576]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2c:	4a8e      	ldr	r2, [pc, #568]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e2e:	f043 0304 	orr.w	r3, r3, #4
 8001e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e36:	4b8c      	ldr	r3, [pc, #560]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3c:	4a8a      	ldr	r2, [pc, #552]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e3e:	f043 0301 	orr.w	r3, r3, #1
 8001e42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e46:	e00f      	b.n	8001e68 <HAL_RCC_OscConfig+0x378>
 8001e48:	4b87      	ldr	r3, [pc, #540]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	4a86      	ldr	r2, [pc, #536]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e50:	f023 0301 	bic.w	r3, r3, #1
 8001e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e58:	4b83      	ldr	r3, [pc, #524]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	4a82      	ldr	r2, [pc, #520]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d016      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7fe fa36 	bl	80002e0 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e76:	e00a      	b.n	8001e8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e78:	f7fe fa32 	bl	80002e0 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e142      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	4b76      	ldr	r3, [pc, #472]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ed      	beq.n	8001e78 <HAL_RCC_OscConfig+0x388>
 8001e9c:	e015      	b.n	8001eca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fa1f 	bl	80002e0 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7fe fa1b 	bl	80002e0 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e12b      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d1ed      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001eca:	7ffb      	ldrb	r3, [r7, #31]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d105      	bne.n	8001edc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ed0:	4b65      	ldr	r3, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	4a64      	ldr	r2, [pc, #400]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0320 	and.w	r3, r3, #32
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d03c      	beq.n	8001f62 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d01c      	beq.n	8001f2a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ef0:	4b5d      	ldr	r3, [pc, #372]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ef6:	4a5c      	ldr	r2, [pc, #368]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f00:	f7fe f9ee 	bl	80002e0 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f08:	f7fe f9ea 	bl	80002e0 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e0fc      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d0ef      	beq.n	8001f08 <HAL_RCC_OscConfig+0x418>
 8001f28:	e01b      	b.n	8001f62 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f2a:	4b4f      	ldr	r3, [pc, #316]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f30:	4a4d      	ldr	r2, [pc, #308]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f3a:	f7fe f9d1 	bl	80002e0 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f42:	f7fe f9cd 	bl	80002e0 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e0df      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f54:	4b44      	ldr	r3, [pc, #272]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f5a:	f003 0302 	and.w	r3, r3, #2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d1ef      	bne.n	8001f42 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	f000 80d3 	beq.w	8002112 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6c:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	f003 030c 	and.w	r3, r3, #12
 8001f74:	2b0c      	cmp	r3, #12
 8001f76:	f000 808d 	beq.w	8002094 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d15a      	bne.n	8002038 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a38      	ldr	r2, [pc, #224]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001f88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7fe f9a7 	bl	80002e0 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f96:	f7fe f9a3 	bl	80002e0 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e0b5      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fa8:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001fb4:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	68da      	ldr	r2, [r3, #12]
 8001fb8:	4b2d      	ldr	r3, [pc, #180]	; (8002070 <HAL_RCC_OscConfig+0x580>)
 8001fba:	4013      	ands	r3, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6a11      	ldr	r1, [r2, #32]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001fc4:	3a01      	subs	r2, #1
 8001fc6:	0112      	lsls	r2, r2, #4
 8001fc8:	4311      	orrs	r1, r2
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001fce:	0212      	lsls	r2, r2, #8
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fd6:	0852      	lsrs	r2, r2, #1
 8001fd8:	3a01      	subs	r2, #1
 8001fda:	0552      	lsls	r2, r2, #21
 8001fdc:	4311      	orrs	r1, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fe2:	0852      	lsrs	r2, r2, #1
 8001fe4:	3a01      	subs	r2, #1
 8001fe6:	0652      	lsls	r2, r2, #25
 8001fe8:	4311      	orrs	r1, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fee:	06d2      	lsls	r2, r2, #27
 8001ff0:	430a      	orrs	r2, r1
 8001ff2:	491d      	ldr	r1, [pc, #116]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a1a      	ldr	r2, [pc, #104]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002002:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002004:	4b18      	ldr	r3, [pc, #96]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	4a17      	ldr	r2, [pc, #92]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800200a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800200e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe f966 	bl	80002e0 <HAL_GetTick>
 8002014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	e008      	b.n	800202a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002018:	f7fe f962 	bl	80002e0 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	2b02      	cmp	r3, #2
 8002024:	d901      	bls.n	800202a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e074      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800202a:	4b0f      	ldr	r3, [pc, #60]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002032:	2b00      	cmp	r3, #0
 8002034:	d0f0      	beq.n	8002018 <HAL_RCC_OscConfig+0x528>
 8002036:	e06c      	b.n	8002112 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800203e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002042:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002044:	4b08      	ldr	r3, [pc, #32]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4a07      	ldr	r2, [pc, #28]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002050:	4b05      	ldr	r3, [pc, #20]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_RCC_OscConfig+0x578>)
 8002056:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800205a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800205e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002060:	f7fe f93e 	bl	80002e0 <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002066:	e00e      	b.n	8002086 <HAL_RCC_OscConfig+0x596>
 8002068:	40021000 	.word	0x40021000
 800206c:	40007000 	.word	0x40007000
 8002070:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002074:	f7fe f934 	bl	80002e0 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e046      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <HAL_RCC_OscConfig+0x62c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f0      	bne.n	8002074 <HAL_RCC_OscConfig+0x584>
 8002092:	e03e      	b.n	8002112 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d101      	bne.n	80020a0 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e039      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020a0:	4b1e      	ldr	r3, [pc, #120]	; (800211c <HAL_RCC_OscConfig+0x62c>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f003 0203 	and.w	r2, r3, #3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d12c      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	3b01      	subs	r3, #1
 80020c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d123      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d11b      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d113      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d109      	bne.n	800210e <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800210a:	429a      	cmp	r2, r3
 800210c:	d001      	beq.n	8002112 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3720      	adds	r7, #32
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e11e      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002138:	4b91      	ldr	r3, [pc, #580]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 030f 	and.w	r3, r3, #15
 8002140:	683a      	ldr	r2, [r7, #0]
 8002142:	429a      	cmp	r2, r3
 8002144:	d910      	bls.n	8002168 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002146:	4b8e      	ldr	r3, [pc, #568]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f023 020f 	bic.w	r2, r3, #15
 800214e:	498c      	ldr	r1, [pc, #560]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002156:	4b8a      	ldr	r3, [pc, #552]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	683a      	ldr	r2, [r7, #0]
 8002160:	429a      	cmp	r2, r3
 8002162:	d001      	beq.n	8002168 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	e106      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d073      	beq.n	800225c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d129      	bne.n	80021d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800217c:	4b81      	ldr	r3, [pc, #516]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0f4      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800218c:	f000 f966 	bl	800245c <RCC_GetSysClockFreqFromPLLSource>
 8002190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4a7c      	ldr	r2, [pc, #496]	; (8002388 <HAL_RCC_ClockConfig+0x268>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d93f      	bls.n	800221a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800219a:	4b7a      	ldr	r3, [pc, #488]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d009      	beq.n	80021ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d033      	beq.n	800221a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d12f      	bne.n	800221a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021ba:	4b72      	ldr	r3, [pc, #456]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021c2:	4a70      	ldr	r2, [pc, #448]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	617b      	str	r3, [r7, #20]
 80021ce:	e024      	b.n	800221a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d107      	bne.n	80021e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021d8:	4b6a      	ldr	r3, [pc, #424]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d109      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	e0c6      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021e8:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0be      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80021f8:	f000 f8ce 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 80021fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	4a61      	ldr	r2, [pc, #388]	; (8002388 <HAL_RCC_ClockConfig+0x268>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d909      	bls.n	800221a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002206:	4b5f      	ldr	r3, [pc, #380]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800220e:	4a5d      	ldr	r2, [pc, #372]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002214:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4957      	ldr	r1, [pc, #348]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800222c:	f7fe f858 	bl	80002e0 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe f854 	bl	80002e0 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e095      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b4e      	ldr	r3, [pc, #312]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d023      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	4a42      	ldr	r2, [pc, #264]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800227a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800227e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800228c:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002294:	4a3b      	ldr	r2, [pc, #236]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002296:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800229a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800229c:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4936      	ldr	r1, [pc, #216]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	608b      	str	r3, [r1, #8]
 80022ae:	e008      	b.n	80022c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022b6:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d21d      	bcs.n	800230c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022d0:	4b2b      	ldr	r3, [pc, #172]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f023 020f 	bic.w	r2, r3, #15
 80022d8:	4929      	ldr	r1, [pc, #164]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	4313      	orrs	r3, r2
 80022de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80022e0:	f7fd fffe 	bl	80002e0 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7fd fffa 	bl	80002e0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e03b      	b.n	8002376 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_RCC_ClockConfig+0x260>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 030f 	and.w	r3, r3, #15
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	429a      	cmp	r2, r3
 800230a:	d1ed      	bne.n	80022e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b00      	cmp	r3, #0
 8002316:	d008      	beq.n	800232a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002318:	4b1a      	ldr	r3, [pc, #104]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	4917      	ldr	r1, [pc, #92]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002326:	4313      	orrs	r3, r2
 8002328:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0308 	and.w	r3, r3, #8
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002336:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	490f      	ldr	r1, [pc, #60]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800234a:	f000 f825 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 800234e:	4601      	mov	r1, r0
 8002350:	4b0c      	ldr	r3, [pc, #48]	; (8002384 <HAL_RCC_ClockConfig+0x264>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	091b      	lsrs	r3, r3, #4
 8002356:	f003 030f 	and.w	r3, r3, #15
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <HAL_RCC_ClockConfig+0x26c>)
 800235c:	5cd3      	ldrb	r3, [r2, r3]
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	fa21 f303 	lsr.w	r3, r1, r3
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <HAL_RCC_ClockConfig+0x270>)
 8002368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800236a:	4b0a      	ldr	r3, [pc, #40]	; (8002394 <HAL_RCC_ClockConfig+0x274>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4618      	mov	r0, r3
 8002370:	f7fd ff6a 	bl	8000248 <HAL_InitTick>
 8002374:	4603      	mov	r3, r0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	04c4b400 	.word	0x04c4b400
 800238c:	080060e4 	.word	0x080060e4
 8002390:	20000118 	.word	0x20000118
 8002394:	20000000 	.word	0x20000000

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800239e:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d102      	bne.n	80023b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023aa:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023ac:	613b      	str	r3, [r7, #16]
 80023ae:	e047      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023b0:	4b27      	ldr	r3, [pc, #156]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d102      	bne.n	80023c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	e03e      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80023c2:	4b23      	ldr	r3, [pc, #140]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b0c      	cmp	r3, #12
 80023cc:	d136      	bne.n	800243c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	f003 0303 	and.w	r3, r3, #3
 80023d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023d8:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	091b      	lsrs	r3, r3, #4
 80023de:	f003 030f 	and.w	r3, r3, #15
 80023e2:	3301      	adds	r3, #1
 80023e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d10c      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ec:	4a1a      	ldr	r2, [pc, #104]	; (8002458 <HAL_RCC_GetSysClockFreq+0xc0>)
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	4a16      	ldr	r2, [pc, #88]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f6:	68d2      	ldr	r2, [r2, #12]
 80023f8:	0a12      	lsrs	r2, r2, #8
 80023fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023fe:	fb02 f303 	mul.w	r3, r2, r3
 8002402:	617b      	str	r3, [r7, #20]
      break;
 8002404:	e00c      	b.n	8002420 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002406:	4a13      	ldr	r2, [pc, #76]	; (8002454 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	fbb2 f3f3 	udiv	r3, r2, r3
 800240e:	4a10      	ldr	r2, [pc, #64]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002410:	68d2      	ldr	r2, [r2, #12]
 8002412:	0a12      	lsrs	r2, r2, #8
 8002414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002418:	fb02 f303 	mul.w	r3, r2, r3
 800241c:	617b      	str	r3, [r7, #20]
      break;
 800241e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	0e5b      	lsrs	r3, r3, #25
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	3301      	adds	r3, #1
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	613b      	str	r3, [r7, #16]
 800243a:	e001      	b.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002440:	693b      	ldr	r3, [r7, #16]
}
 8002442:	4618      	mov	r0, r3
 8002444:	371c      	adds	r7, #28
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40021000 	.word	0x40021000
 8002454:	00f42400 	.word	0x00f42400
 8002458:	007a1200 	.word	0x007a1200

0800245c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800245c:	b480      	push	{r7}
 800245e:	b087      	sub	sp, #28
 8002460:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002462:	4b1e      	ldr	r3, [pc, #120]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800246c:	4b1b      	ldr	r3, [pc, #108]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f003 030f 	and.w	r3, r3, #15
 8002476:	3301      	adds	r3, #1
 8002478:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d10c      	bne.n	800249a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002480:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	fbb2 f3f3 	udiv	r3, r2, r3
 8002488:	4a14      	ldr	r2, [pc, #80]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800248a:	68d2      	ldr	r2, [r2, #12]
 800248c:	0a12      	lsrs	r2, r2, #8
 800248e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	617b      	str	r3, [r7, #20]
    break;
 8002498:	e00c      	b.n	80024b4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800249a:	4a12      	ldr	r2, [pc, #72]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a2:	4a0e      	ldr	r2, [pc, #56]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a4:	68d2      	ldr	r2, [r2, #12]
 80024a6:	0a12      	lsrs	r2, r2, #8
 80024a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	617b      	str	r3, [r7, #20]
    break;
 80024b2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b4:	4b09      	ldr	r3, [pc, #36]	; (80024dc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	0e5b      	lsrs	r3, r3, #25
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	3301      	adds	r3, #1
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024c4:	697a      	ldr	r2, [r7, #20]
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024cc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024ce:	687b      	ldr	r3, [r7, #4]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40021000 	.word	0x40021000
 80024e0:	007a1200 	.word	0x007a1200
 80024e4:	00f42400 	.word	0x00f42400

080024e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024f0:	2300      	movs	r3, #0
 80024f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f4:	2300      	movs	r3, #0
 80024f6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002500:	2b00      	cmp	r3, #0
 8002502:	f000 8098 	beq.w	8002636 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250a:	4b43      	ldr	r3, [pc, #268]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800250c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10d      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	4b40      	ldr	r3, [pc, #256]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251a:	4a3f      	ldr	r2, [pc, #252]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800251c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002520:	6593      	str	r3, [r2, #88]	; 0x58
 8002522:	4b3d      	ldr	r3, [pc, #244]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252e:	2301      	movs	r3, #1
 8002530:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002532:	4b3a      	ldr	r3, [pc, #232]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a39      	ldr	r2, [pc, #228]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800253e:	f7fd fecf 	bl	80002e0 <HAL_GetTick>
 8002542:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002544:	e009      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002546:	f7fd fecb 	bl	80002e0 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d902      	bls.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	74fb      	strb	r3, [r7, #19]
        break;
 8002558:	e005      	b.n	8002566 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800255a:	4b30      	ldr	r3, [pc, #192]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002562:	2b00      	cmp	r3, #0
 8002564:	d0ef      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002566:	7cfb      	ldrb	r3, [r7, #19]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d159      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800256e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002572:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002576:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d01e      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	429a      	cmp	r2, r3
 8002586:	d019      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002588:	4b23      	ldr	r3, [pc, #140]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002592:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002594:	4b20      	ldr	r3, [pc, #128]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259a:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a4:	4b1c      	ldr	r3, [pc, #112]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025aa:	4a1b      	ldr	r2, [pc, #108]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b4:	4a18      	ldr	r2, [pc, #96]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7fd fe8b 	bl	80002e0 <HAL_GetTick>
 80025ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025cc:	e00b      	b.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7fd fe87 	bl	80002e0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d902      	bls.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	74fb      	strb	r3, [r7, #19]
            break;
 80025e4:	e006      	b.n	80025f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ec      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10b      	bne.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002600:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	4903      	ldr	r1, [pc, #12]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002610:	e008      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	74bb      	strb	r3, [r7, #18]
 8002616:	e005      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002624:	7c7b      	ldrb	r3, [r7, #17]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4ba6      	ldr	r3, [pc, #664]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	4aa5      	ldr	r2, [pc, #660]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002634:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002642:	4ba0      	ldr	r3, [pc, #640]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f023 0203 	bic.w	r2, r3, #3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	499c      	ldr	r1, [pc, #624]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002664:	4b97      	ldr	r3, [pc, #604]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f023 020c 	bic.w	r2, r3, #12
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4994      	ldr	r1, [pc, #592]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002686:	4b8f      	ldr	r3, [pc, #572]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	498b      	ldr	r1, [pc, #556]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0308 	and.w	r3, r3, #8
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026a8:	4b86      	ldr	r3, [pc, #536]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	4983      	ldr	r1, [pc, #524]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00a      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ca:	4b7e      	ldr	r3, [pc, #504]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	695b      	ldr	r3, [r3, #20]
 80026d8:	497a      	ldr	r1, [pc, #488]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d00a      	beq.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026ec:	4b75      	ldr	r3, [pc, #468]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	699b      	ldr	r3, [r3, #24]
 80026fa:	4972      	ldr	r1, [pc, #456]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800270e:	4b6d      	ldr	r3, [pc, #436]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002710:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002714:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	69db      	ldr	r3, [r3, #28]
 800271c:	4969      	ldr	r1, [pc, #420]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271e:	4313      	orrs	r3, r2
 8002720:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002730:	4b64      	ldr	r3, [pc, #400]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002736:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4961      	ldr	r1, [pc, #388]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002752:	4b5c      	ldr	r3, [pc, #368]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002754:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002758:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	4958      	ldr	r1, [pc, #352]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d015      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002774:	4b53      	ldr	r3, [pc, #332]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002782:	4950      	ldr	r1, [pc, #320]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800278e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002792:	d105      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4a4a      	ldr	r2, [pc, #296]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800279e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d015      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027ac:	4b45      	ldr	r3, [pc, #276]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ba:	4942      	ldr	r1, [pc, #264]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ca:	d105      	bne.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027cc:	4b3d      	ldr	r3, [pc, #244]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a3c      	ldr	r2, [pc, #240]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d015      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027e4:	4b37      	ldr	r3, [pc, #220]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f2:	4934      	ldr	r1, [pc, #208]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002802:	d105      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002804:	4b2f      	ldr	r3, [pc, #188]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	4a2e      	ldr	r2, [pc, #184]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800280e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d015      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800281c:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	4926      	ldr	r1, [pc, #152]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800283a:	d105      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b21      	ldr	r3, [pc, #132]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002854:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002862:	4918      	ldr	r1, [pc, #96]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002872:	d105      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a12      	ldr	r2, [pc, #72]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289a:	490a      	ldr	r1, [pc, #40]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028aa:	d105      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028ac:	4b05      	ldr	r3, [pc, #20]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028b6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	40021000 	.word	0x40021000

080028c8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80028d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80028d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	4313      	orrs	r3, r2
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3714      	adds	r7, #20
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b085      	sub	sp, #20
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002902:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002906:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	b29b      	uxth	r3, r3
 8002914:	43db      	mvns	r3, r3
 8002916:	b29b      	uxth	r3, r3
 8002918:	4013      	ands	r3, r2
 800291a:	b29a      	uxth	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002930:	b084      	sub	sp, #16
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
 800293a:	f107 0014 	add.w	r0, r7, #20
 800293e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffb0 	bl	80028c8 <USB_EnableGlobalInt>

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002974:	b004      	add	sp, #16
 8002976:	4770      	bx	lr

08002978 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002978:	b490      	push	{r4, r7}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002998:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800299c:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	78db      	ldrb	r3, [r3, #3]
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d819      	bhi.n	80029da <USB_ActivateEndpoint+0x62>
 80029a6:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <USB_ActivateEndpoint+0x34>)
 80029a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029ac:	080029bd 	.word	0x080029bd
 80029b0:	080029d1 	.word	0x080029d1
 80029b4:	080029e1 	.word	0x080029e1
 80029b8:	080029c7 	.word	0x080029c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80029bc:	89bb      	ldrh	r3, [r7, #12]
 80029be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c2:	81bb      	strh	r3, [r7, #12]
      break;
 80029c4:	e00d      	b.n	80029e2 <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80029c6:	89bb      	ldrh	r3, [r7, #12]
 80029c8:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80029cc:	81bb      	strh	r3, [r7, #12]
      break;
 80029ce:	e008      	b.n	80029e2 <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80029d0:	89bb      	ldrh	r3, [r7, #12]
 80029d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029d6:	81bb      	strh	r3, [r7, #12]
      break;
 80029d8:	e003      	b.n	80029e2 <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      break;
 80029de:	e000      	b.n	80029e2 <USB_ActivateEndpoint+0x6a>
      break;
 80029e0:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	441a      	add	r2, r3
 80029ec:	89bb      	ldrh	r3, [r7, #12]
 80029ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	009b      	lsls	r3, r3, #2
 8002a0a:	4413      	add	r3, r2
 8002a0c:	881b      	ldrh	r3, [r3, #0]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	b21b      	sxth	r3, r3
 8002a12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1a:	b21a      	sxth	r2, r3
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	b21b      	sxth	r3, r3
 8002a22:	4313      	orrs	r3, r2
 8002a24:	b21b      	sxth	r3, r3
 8002a26:	b29c      	uxth	r4, r3
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	441a      	add	r2, r3
 8002a32:	4b8a      	ldr	r3, [pc, #552]	; (8002c5c <USB_ActivateEndpoint+0x2e4>)
 8002a34:	4323      	orrs	r3, r4
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	7b1b      	ldrb	r3, [r3, #12]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f040 8112 	bne.w	8002c68 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	785b      	ldrb	r3, [r3, #1]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d067      	beq.n	8002b1c <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a4c:	687c      	ldr	r4, [r7, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	441c      	add	r4, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4423      	add	r3, r4
 8002a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a64:	461c      	mov	r4, r3
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	88db      	ldrh	r3, [r3, #6]
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	4413      	add	r3, r2
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	b29c      	uxth	r4, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d014      	beq.n	8002ab6 <USB_ActivateEndpoint+0x13e>
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	881b      	ldrh	r3, [r3, #0]
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	b29c      	uxth	r4, r3
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	4b6c      	ldr	r3, [pc, #432]	; (8002c60 <USB_ActivateEndpoint+0x2e8>)
 8002ab0:	4323      	orrs	r3, r4
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	78db      	ldrb	r3, [r3, #3]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d018      	beq.n	8002af0 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad4:	b29c      	uxth	r4, r3
 8002ad6:	f084 0320 	eor.w	r3, r4, #32
 8002ada:	b29c      	uxth	r4, r3
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	441a      	add	r2, r3
 8002ae6:	4b5d      	ldr	r3, [pc, #372]	; (8002c5c <USB_ActivateEndpoint+0x2e4>)
 8002ae8:	4323      	orrs	r3, r4
 8002aea:	b29b      	uxth	r3, r3
 8002aec:	8013      	strh	r3, [r2, #0]
 8002aee:	e22b      	b.n	8002f48 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	881b      	ldrh	r3, [r3, #0]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b06:	b29c      	uxth	r4, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	441a      	add	r2, r3
 8002b12:	4b52      	ldr	r3, [pc, #328]	; (8002c5c <USB_ActivateEndpoint+0x2e4>)
 8002b14:	4323      	orrs	r3, r4
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	8013      	strh	r3, [r2, #0]
 8002b1a:	e215      	b.n	8002f48 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b1c:	687c      	ldr	r4, [r7, #4]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	441c      	add	r4, r3
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4423      	add	r3, r4
 8002b30:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b34:	461c      	mov	r4, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	88db      	ldrh	r3, [r3, #6]
 8002b3a:	085b      	lsrs	r3, r3, #1
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002b44:	687c      	ldr	r4, [r7, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	441c      	add	r4, r3
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4423      	add	r3, r4
 8002b58:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b5c:	461c      	mov	r4, r3
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d10e      	bne.n	8002b84 <USB_ActivateEndpoint+0x20c>
 8002b66:	8823      	ldrh	r3, [r4, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	8023      	strh	r3, [r4, #0]
 8002b72:	8823      	ldrh	r3, [r4, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	8023      	strh	r3, [r4, #0]
 8002b82:	e02d      	b.n	8002be0 <USB_ActivateEndpoint+0x268>
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	691b      	ldr	r3, [r3, #16]
 8002b88:	2b3e      	cmp	r3, #62	; 0x3e
 8002b8a:	d812      	bhi.n	8002bb2 <USB_ActivateEndpoint+0x23a>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	085b      	lsrs	r3, r3, #1
 8002b92:	60bb      	str	r3, [r7, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d002      	beq.n	8002ba6 <USB_ActivateEndpoint+0x22e>
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	029b      	lsls	r3, r3, #10
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	8023      	strh	r3, [r4, #0]
 8002bb0:	e016      	b.n	8002be0 <USB_ActivateEndpoint+0x268>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d102      	bne.n	8002bcc <USB_ActivateEndpoint+0x254>
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	3b01      	subs	r3, #1
 8002bca:	60bb      	str	r3, [r7, #8]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	029b      	lsls	r3, r3, #10
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	b29c      	uxth	r4, r3
 8002bee:	4623      	mov	r3, r4
 8002bf0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d014      	beq.n	8002c22 <USB_ActivateEndpoint+0x2aa>
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	4413      	add	r3, r2
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c0e:	b29c      	uxth	r4, r3
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	441a      	add	r2, r3
 8002c1a:	4b12      	ldr	r3, [pc, #72]	; (8002c64 <USB_ActivateEndpoint+0x2ec>)
 8002c1c:	4323      	orrs	r3, r4
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	4413      	add	r3, r2
 8002c2c:	881b      	ldrh	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c38:	b29c      	uxth	r4, r3
 8002c3a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002c3e:	b29c      	uxth	r4, r3
 8002c40:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002c44:	b29c      	uxth	r4, r3
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	441a      	add	r2, r3
 8002c50:	4b02      	ldr	r3, [pc, #8]	; (8002c5c <USB_ActivateEndpoint+0x2e4>)
 8002c52:	4323      	orrs	r3, r4
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	8013      	strh	r3, [r2, #0]
 8002c58:	e176      	b.n	8002f48 <USB_ActivateEndpoint+0x5d0>
 8002c5a:	bf00      	nop
 8002c5c:	ffff8080 	.word	0xffff8080
 8002c60:	ffff80c0 	.word	0xffff80c0
 8002c64:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	4413      	add	r3, r2
 8002c72:	881b      	ldrh	r3, [r3, #0]
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7e:	b29c      	uxth	r4, r3
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	441a      	add	r2, r3
 8002c8a:	4b96      	ldr	r3, [pc, #600]	; (8002ee4 <USB_ActivateEndpoint+0x56c>)
 8002c8c:	4323      	orrs	r3, r4
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002c92:	687c      	ldr	r4, [r7, #4]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	441c      	add	r4, r3
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4423      	add	r3, r4
 8002ca6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002caa:	461c      	mov	r4, r3
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	891b      	ldrh	r3, [r3, #8]
 8002cb0:	085b      	lsrs	r3, r3, #1
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	8023      	strh	r3, [r4, #0]
 8002cba:	687c      	ldr	r4, [r7, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	441c      	add	r4, r3
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4423      	add	r3, r4
 8002cce:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002cd2:	461c      	mov	r4, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	895b      	ldrh	r3, [r3, #10]
 8002cd8:	085b      	lsrs	r3, r3, #1
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	785b      	ldrb	r3, [r3, #1]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f040 8088 	bne.w	8002dfc <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	881b      	ldrh	r3, [r3, #0]
 8002cf8:	b29c      	uxth	r4, r3
 8002cfa:	4623      	mov	r3, r4
 8002cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d014      	beq.n	8002d2e <USB_ActivateEndpoint+0x3b6>
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	881b      	ldrh	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1a:	b29c      	uxth	r4, r3
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	441a      	add	r2, r3
 8002d26:	4b70      	ldr	r3, [pc, #448]	; (8002ee8 <USB_ActivateEndpoint+0x570>)
 8002d28:	4323      	orrs	r3, r4
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	781b      	ldrb	r3, [r3, #0]
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	881b      	ldrh	r3, [r3, #0]
 8002d3a:	b29c      	uxth	r4, r3
 8002d3c:	4623      	mov	r3, r4
 8002d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d014      	beq.n	8002d70 <USB_ActivateEndpoint+0x3f8>
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	881b      	ldrh	r3, [r3, #0]
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5c:	b29c      	uxth	r4, r3
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	441a      	add	r2, r3
 8002d68:	4b60      	ldr	r3, [pc, #384]	; (8002eec <USB_ActivateEndpoint+0x574>)
 8002d6a:	4323      	orrs	r3, r4
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	881b      	ldrh	r3, [r3, #0]
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d86:	b29c      	uxth	r4, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	441a      	add	r2, r3
 8002d92:	4b56      	ldr	r3, [pc, #344]	; (8002eec <USB_ActivateEndpoint+0x574>)
 8002d94:	4323      	orrs	r3, r4
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	881b      	ldrh	r3, [r3, #0]
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	b29c      	uxth	r4, r3
 8002db2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002db6:	b29c      	uxth	r4, r3
 8002db8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002dbc:	b29c      	uxth	r4, r3
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	441a      	add	r2, r3
 8002dc8:	4b49      	ldr	r3, [pc, #292]	; (8002ef0 <USB_ActivateEndpoint+0x578>)
 8002dca:	4323      	orrs	r3, r4
 8002dcc:	b29b      	uxth	r3, r3
 8002dce:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	781b      	ldrb	r3, [r3, #0]
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002de6:	b29c      	uxth	r4, r3
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	441a      	add	r2, r3
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <USB_ActivateEndpoint+0x578>)
 8002df4:	4323      	orrs	r3, r4
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	8013      	strh	r3, [r2, #0]
 8002dfa:	e0a5      	b.n	8002f48 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29c      	uxth	r4, r3
 8002e0a:	4623      	mov	r3, r4
 8002e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d014      	beq.n	8002e3e <USB_ActivateEndpoint+0x4c6>
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	881b      	ldrh	r3, [r3, #0]
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2a:	b29c      	uxth	r4, r3
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	441a      	add	r2, r3
 8002e36:	4b2c      	ldr	r3, [pc, #176]	; (8002ee8 <USB_ActivateEndpoint+0x570>)
 8002e38:	4323      	orrs	r3, r4
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29c      	uxth	r4, r3
 8002e4c:	4623      	mov	r3, r4
 8002e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d014      	beq.n	8002e80 <USB_ActivateEndpoint+0x508>
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	881b      	ldrh	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e6c:	b29c      	uxth	r4, r3
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	441a      	add	r2, r3
 8002e78:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <USB_ActivateEndpoint+0x574>)
 8002e7a:	4323      	orrs	r3, r4
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	881b      	ldrh	r3, [r3, #0]
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e96:	b29c      	uxth	r4, r3
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	441a      	add	r2, r3
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <USB_ActivateEndpoint+0x570>)
 8002ea4:	4323      	orrs	r3, r4
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	78db      	ldrb	r3, [r3, #3]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d020      	beq.n	8002ef4 <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4413      	add	r3, r2
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	b29b      	uxth	r3, r3
 8002ec0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ec8:	b29c      	uxth	r4, r3
 8002eca:	f084 0320 	eor.w	r3, r4, #32
 8002ece:	b29c      	uxth	r4, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	441a      	add	r2, r3
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <USB_ActivateEndpoint+0x578>)
 8002edc:	4323      	orrs	r3, r4
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	8013      	strh	r3, [r2, #0]
 8002ee2:	e01c      	b.n	8002f1e <USB_ActivateEndpoint+0x5a6>
 8002ee4:	ffff8180 	.word	0xffff8180
 8002ee8:	ffffc080 	.word	0xffffc080
 8002eec:	ffff80c0 	.word	0xffff80c0
 8002ef0:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	881b      	ldrh	r3, [r3, #0]
 8002f00:	b29b      	uxth	r3, r3
 8002f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f0a:	b29c      	uxth	r4, r3
 8002f0c:	687a      	ldr	r2, [r7, #4]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	441a      	add	r2, r3
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <USB_ActivateEndpoint+0x5dc>)
 8002f18:	4323      	orrs	r3, r4
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f34:	b29c      	uxth	r4, r3
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	009b      	lsls	r3, r3, #2
 8002f3e:	441a      	add	r2, r3
 8002f40:	4b04      	ldr	r3, [pc, #16]	; (8002f54 <USB_ActivateEndpoint+0x5dc>)
 8002f42:	4323      	orrs	r3, r4
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc90      	pop	{r4, r7}
 8002f52:	4770      	bx	lr
 8002f54:	ffff8080 	.word	0xffff8080

08002f58 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f58:	b490      	push	{r4, r7}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
 8002f60:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	7b1b      	ldrb	r3, [r3, #12]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d171      	bne.n	800304e <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	785b      	ldrb	r3, [r3, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d036      	beq.n	8002fe0 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	4413      	add	r3, r2
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	b29c      	uxth	r4, r3
 8002f80:	4623      	mov	r3, r4
 8002f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d014      	beq.n	8002fb4 <USB_DeactivateEndpoint+0x5c>
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	4413      	add	r3, r2
 8002f94:	881b      	ldrh	r3, [r3, #0]
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa0:	b29c      	uxth	r4, r3
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	441a      	add	r2, r3
 8002fac:	4b6b      	ldr	r3, [pc, #428]	; (800315c <USB_DeactivateEndpoint+0x204>)
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	4413      	add	r3, r2
 8002fbe:	881b      	ldrh	r3, [r3, #0]
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fca:	b29c      	uxth	r4, r3
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	441a      	add	r2, r3
 8002fd6:	4b62      	ldr	r3, [pc, #392]	; (8003160 <USB_DeactivateEndpoint+0x208>)
 8002fd8:	4323      	orrs	r3, r4
 8002fda:	b29b      	uxth	r3, r3
 8002fdc:	8013      	strh	r3, [r2, #0]
 8002fde:	e144      	b.n	800326a <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	881b      	ldrh	r3, [r3, #0]
 8002fec:	b29c      	uxth	r4, r3
 8002fee:	4623      	mov	r3, r4
 8002ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d014      	beq.n	8003022 <USB_DeactivateEndpoint+0xca>
 8002ff8:	687a      	ldr	r2, [r7, #4]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	881b      	ldrh	r3, [r3, #0]
 8003004:	b29b      	uxth	r3, r3
 8003006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800300e:	b29c      	uxth	r4, r3
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	441a      	add	r2, r3
 800301a:	4b52      	ldr	r3, [pc, #328]	; (8003164 <USB_DeactivateEndpoint+0x20c>)
 800301c:	4323      	orrs	r3, r4
 800301e:	b29b      	uxth	r3, r3
 8003020:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	881b      	ldrh	r3, [r3, #0]
 800302e:	b29b      	uxth	r3, r3
 8003030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003038:	b29c      	uxth	r4, r3
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	441a      	add	r2, r3
 8003044:	4b46      	ldr	r3, [pc, #280]	; (8003160 <USB_DeactivateEndpoint+0x208>)
 8003046:	4323      	orrs	r3, r4
 8003048:	b29b      	uxth	r3, r3
 800304a:	8013      	strh	r3, [r2, #0]
 800304c:	e10d      	b.n	800326a <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	785b      	ldrb	r3, [r3, #1]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 8088 	bne.w	8003168 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	881b      	ldrh	r3, [r3, #0]
 8003064:	b29c      	uxth	r4, r3
 8003066:	4623      	mov	r3, r4
 8003068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d014      	beq.n	800309a <USB_DeactivateEndpoint+0x142>
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4413      	add	r3, r2
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	b29b      	uxth	r3, r3
 800307e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003086:	b29c      	uxth	r4, r3
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	441a      	add	r2, r3
 8003092:	4b34      	ldr	r3, [pc, #208]	; (8003164 <USB_DeactivateEndpoint+0x20c>)
 8003094:	4323      	orrs	r3, r4
 8003096:	b29b      	uxth	r3, r3
 8003098:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	881b      	ldrh	r3, [r3, #0]
 80030a6:	b29c      	uxth	r4, r3
 80030a8:	4623      	mov	r3, r4
 80030aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d014      	beq.n	80030dc <USB_DeactivateEndpoint+0x184>
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	881b      	ldrh	r3, [r3, #0]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c8:	b29c      	uxth	r4, r3
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	441a      	add	r2, r3
 80030d4:	4b21      	ldr	r3, [pc, #132]	; (800315c <USB_DeactivateEndpoint+0x204>)
 80030d6:	4323      	orrs	r3, r4
 80030d8:	b29b      	uxth	r3, r3
 80030da:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	4413      	add	r3, r2
 80030e6:	881b      	ldrh	r3, [r3, #0]
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030f2:	b29c      	uxth	r4, r3
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	441a      	add	r2, r3
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <USB_DeactivateEndpoint+0x204>)
 8003100:	4323      	orrs	r3, r4
 8003102:	b29b      	uxth	r3, r3
 8003104:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	b29b      	uxth	r3, r3
 8003114:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311c:	b29c      	uxth	r4, r3
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	441a      	add	r2, r3
 8003128:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <USB_DeactivateEndpoint+0x208>)
 800312a:	4323      	orrs	r3, r4
 800312c:	b29b      	uxth	r3, r3
 800312e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	881b      	ldrh	r3, [r3, #0]
 800313c:	b29b      	uxth	r3, r3
 800313e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003146:	b29c      	uxth	r4, r3
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	441a      	add	r2, r3
 8003152:	4b03      	ldr	r3, [pc, #12]	; (8003160 <USB_DeactivateEndpoint+0x208>)
 8003154:	4323      	orrs	r3, r4
 8003156:	b29b      	uxth	r3, r3
 8003158:	8013      	strh	r3, [r2, #0]
 800315a:	e086      	b.n	800326a <USB_DeactivateEndpoint+0x312>
 800315c:	ffff80c0 	.word	0xffff80c0
 8003160:	ffff8080 	.word	0xffff8080
 8003164:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	b29c      	uxth	r4, r3
 8003176:	4623      	mov	r3, r4
 8003178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d014      	beq.n	80031aa <USB_DeactivateEndpoint+0x252>
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29b      	uxth	r3, r3
 800318e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003196:	b29c      	uxth	r4, r3
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	441a      	add	r2, r3
 80031a2:	4b35      	ldr	r3, [pc, #212]	; (8003278 <USB_DeactivateEndpoint+0x320>)
 80031a4:	4323      	orrs	r3, r4
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	4413      	add	r3, r2
 80031b4:	881b      	ldrh	r3, [r3, #0]
 80031b6:	b29c      	uxth	r4, r3
 80031b8:	4623      	mov	r3, r4
 80031ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d014      	beq.n	80031ec <USB_DeactivateEndpoint+0x294>
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4413      	add	r3, r2
 80031cc:	881b      	ldrh	r3, [r3, #0]
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d8:	b29c      	uxth	r4, r3
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	441a      	add	r2, r3
 80031e4:	4b25      	ldr	r3, [pc, #148]	; (800327c <USB_DeactivateEndpoint+0x324>)
 80031e6:	4323      	orrs	r3, r4
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	781b      	ldrb	r3, [r3, #0]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	4413      	add	r3, r2
 80031f6:	881b      	ldrh	r3, [r3, #0]
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003202:	b29c      	uxth	r4, r3
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	4b1a      	ldr	r3, [pc, #104]	; (8003278 <USB_DeactivateEndpoint+0x320>)
 8003210:	4323      	orrs	r3, r4
 8003212:	b29b      	uxth	r3, r3
 8003214:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	4413      	add	r3, r2
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800322c:	b29c      	uxth	r4, r3
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	441a      	add	r2, r3
 8003238:	4b11      	ldr	r3, [pc, #68]	; (8003280 <USB_DeactivateEndpoint+0x328>)
 800323a:	4323      	orrs	r3, r4
 800323c:	b29b      	uxth	r3, r3
 800323e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	881b      	ldrh	r3, [r3, #0]
 800324c:	b29b      	uxth	r3, r3
 800324e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003256:	b29c      	uxth	r4, r3
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	441a      	add	r2, r3
 8003262:	4b07      	ldr	r3, [pc, #28]	; (8003280 <USB_DeactivateEndpoint+0x328>)
 8003264:	4323      	orrs	r3, r4
 8003266:	b29b      	uxth	r3, r3
 8003268:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800326a:	2300      	movs	r3, #0
}
 800326c:	4618      	mov	r0, r3
 800326e:	3708      	adds	r7, #8
 8003270:	46bd      	mov	sp, r7
 8003272:	bc90      	pop	{r4, r7}
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	ffffc080 	.word	0xffffc080
 800327c:	ffff80c0 	.word	0xffff80c0
 8003280:	ffff8080 	.word	0xffff8080

08003284 <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003284:	b590      	push	{r4, r7, lr}
 8003286:	b08d      	sub	sp, #52	; 0x34
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	785b      	ldrb	r3, [r3, #1]
 8003292:	2b01      	cmp	r3, #1
 8003294:	f040 8160 	bne.w	8003558 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	699a      	ldr	r2, [r3, #24]
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	691b      	ldr	r3, [r3, #16]
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d909      	bls.n	80032b8 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	1ad2      	subs	r2, r2, r3
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	619a      	str	r2, [r3, #24]
 80032b6:	e005      	b.n	80032c4 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2200      	movs	r2, #0
 80032c2:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	7b1b      	ldrb	r3, [r3, #12]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d119      	bne.n	8003300 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	6959      	ldr	r1, [r3, #20]
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	88da      	ldrh	r2, [r3, #6]
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f000 fba8 	bl	8003a2e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80032de:	687c      	ldr	r4, [r7, #4]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	441c      	add	r4, r3
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	00db      	lsls	r3, r3, #3
 80032f0:	4423      	add	r3, r4
 80032f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80032f6:	461c      	mov	r4, r3
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	8023      	strh	r3, [r4, #0]
 80032fe:	e10f      	b.n	8003520 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	881b      	ldrh	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d065      	beq.n	80033e2 <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003316:	687c      	ldr	r4, [r7, #4]
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	785b      	ldrb	r3, [r3, #1]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d148      	bne.n	80033b2 <USB_EPStartXfer+0x12e>
 8003320:	687c      	ldr	r4, [r7, #4]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003328:	b29b      	uxth	r3, r3
 800332a:	441c      	add	r4, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	4423      	add	r3, r4
 8003334:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003338:	461c      	mov	r4, r3
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10e      	bne.n	800335e <USB_EPStartXfer+0xda>
 8003340:	8823      	ldrh	r3, [r4, #0]
 8003342:	b29b      	uxth	r3, r3
 8003344:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003348:	b29b      	uxth	r3, r3
 800334a:	8023      	strh	r3, [r4, #0]
 800334c:	8823      	ldrh	r3, [r4, #0]
 800334e:	b29b      	uxth	r3, r3
 8003350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003358:	b29b      	uxth	r3, r3
 800335a:	8023      	strh	r3, [r4, #0]
 800335c:	e03d      	b.n	80033da <USB_EPStartXfer+0x156>
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	2b3e      	cmp	r3, #62	; 0x3e
 8003362:	d810      	bhi.n	8003386 <USB_EPStartXfer+0x102>
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	627b      	str	r3, [r7, #36]	; 0x24
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d002      	beq.n	800337a <USB_EPStartXfer+0xf6>
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	3301      	adds	r3, #1
 8003378:	627b      	str	r3, [r7, #36]	; 0x24
 800337a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337c:	b29b      	uxth	r3, r3
 800337e:	029b      	lsls	r3, r3, #10
 8003380:	b29b      	uxth	r3, r3
 8003382:	8023      	strh	r3, [r4, #0]
 8003384:	e029      	b.n	80033da <USB_EPStartXfer+0x156>
 8003386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	627b      	str	r3, [r7, #36]	; 0x24
 800338c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	2b00      	cmp	r3, #0
 8003394:	d102      	bne.n	800339c <USB_EPStartXfer+0x118>
 8003396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003398:	3b01      	subs	r3, #1
 800339a:	627b      	str	r3, [r7, #36]	; 0x24
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	b29b      	uxth	r3, r3
 80033a0:	029b      	lsls	r3, r3, #10
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	8023      	strh	r3, [r4, #0]
 80033b0:	e013      	b.n	80033da <USB_EPStartXfer+0x156>
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	785b      	ldrb	r3, [r3, #1]
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d10f      	bne.n	80033da <USB_EPStartXfer+0x156>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	441c      	add	r4, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4423      	add	r3, r4
 80033cc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033d0:	60fb      	str	r3, [r7, #12]
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	895b      	ldrh	r3, [r3, #10]
 80033de:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80033e0:	e063      	b.n	80034aa <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	785b      	ldrb	r3, [r3, #1]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d148      	bne.n	800347c <USB_EPStartXfer+0x1f8>
 80033ea:	687c      	ldr	r4, [r7, #4]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	441c      	add	r4, r3
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4423      	add	r3, r4
 80033fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003402:	461c      	mov	r4, r3
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10e      	bne.n	8003428 <USB_EPStartXfer+0x1a4>
 800340a:	8823      	ldrh	r3, [r4, #0]
 800340c:	b29b      	uxth	r3, r3
 800340e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003412:	b29b      	uxth	r3, r3
 8003414:	8023      	strh	r3, [r4, #0]
 8003416:	8823      	ldrh	r3, [r4, #0]
 8003418:	b29b      	uxth	r3, r3
 800341a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800341e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003422:	b29b      	uxth	r3, r3
 8003424:	8023      	strh	r3, [r4, #0]
 8003426:	e03d      	b.n	80034a4 <USB_EPStartXfer+0x220>
 8003428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342a:	2b3e      	cmp	r3, #62	; 0x3e
 800342c:	d810      	bhi.n	8003450 <USB_EPStartXfer+0x1cc>
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	623b      	str	r3, [r7, #32]
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <USB_EPStartXfer+0x1c0>
 800343e:	6a3b      	ldr	r3, [r7, #32]
 8003440:	3301      	adds	r3, #1
 8003442:	623b      	str	r3, [r7, #32]
 8003444:	6a3b      	ldr	r3, [r7, #32]
 8003446:	b29b      	uxth	r3, r3
 8003448:	029b      	lsls	r3, r3, #10
 800344a:	b29b      	uxth	r3, r3
 800344c:	8023      	strh	r3, [r4, #0]
 800344e:	e029      	b.n	80034a4 <USB_EPStartXfer+0x220>
 8003450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003452:	095b      	lsrs	r3, r3, #5
 8003454:	623b      	str	r3, [r7, #32]
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	f003 031f 	and.w	r3, r3, #31
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <USB_EPStartXfer+0x1e2>
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	3b01      	subs	r3, #1
 8003464:	623b      	str	r3, [r7, #32]
 8003466:	6a3b      	ldr	r3, [r7, #32]
 8003468:	b29b      	uxth	r3, r3
 800346a:	029b      	lsls	r3, r3, #10
 800346c:	b29b      	uxth	r3, r3
 800346e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003472:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003476:	b29b      	uxth	r3, r3
 8003478:	8023      	strh	r3, [r4, #0]
 800347a:	e013      	b.n	80034a4 <USB_EPStartXfer+0x220>
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	785b      	ldrb	r3, [r3, #1]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d10f      	bne.n	80034a4 <USB_EPStartXfer+0x220>
 8003484:	687c      	ldr	r4, [r7, #4]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800348c:	b29b      	uxth	r3, r3
 800348e:	441c      	add	r4, r3
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4423      	add	r3, r4
 8003498:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800349c:	461c      	mov	r4, r3
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	891b      	ldrh	r3, [r3, #8]
 80034a8:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	6959      	ldr	r1, [r3, #20]
 80034ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 faba 	bl	8003a2e <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	785b      	ldrb	r3, [r3, #1]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d115      	bne.n	80034ee <USB_EPStartXfer+0x26a>
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034d8:	b29c      	uxth	r4, r3
 80034da:	687a      	ldr	r2, [r7, #4]
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	441a      	add	r2, r3
 80034e4:	4b9a      	ldr	r3, [pc, #616]	; (8003750 <USB_EPStartXfer+0x4cc>)
 80034e6:	4323      	orrs	r3, r4
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	8013      	strh	r3, [r2, #0]
 80034ec:	e018      	b.n	8003520 <USB_EPStartXfer+0x29c>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	785b      	ldrb	r3, [r3, #1]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d114      	bne.n	8003520 <USB_EPStartXfer+0x29c>
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350c:	b29c      	uxth	r4, r3
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	441a      	add	r2, r3
 8003518:	4b8e      	ldr	r3, [pc, #568]	; (8003754 <USB_EPStartXfer+0x4d0>)
 800351a:	4323      	orrs	r3, r4
 800351c:	b29b      	uxth	r3, r3
 800351e:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003520:	687a      	ldr	r2, [r7, #4]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003532:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003536:	b29c      	uxth	r4, r3
 8003538:	f084 0310 	eor.w	r3, r4, #16
 800353c:	b29c      	uxth	r4, r3
 800353e:	f084 0320 	eor.w	r3, r4, #32
 8003542:	b29c      	uxth	r4, r3
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	441a      	add	r2, r3
 800354e:	4b82      	ldr	r3, [pc, #520]	; (8003758 <USB_EPStartXfer+0x4d4>)
 8003550:	4323      	orrs	r3, r4
 8003552:	b29b      	uxth	r3, r3
 8003554:	8013      	strh	r3, [r2, #0]
 8003556:	e146      	b.n	80037e6 <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	699a      	ldr	r2, [r3, #24]
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	429a      	cmp	r2, r3
 8003562:	d909      	bls.n	8003578 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	691b      	ldr	r3, [r3, #16]
 8003568:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	699a      	ldr	r2, [r3, #24]
 800356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003570:	1ad2      	subs	r2, r2, r3
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	619a      	str	r2, [r3, #24]
 8003576:	e005      	b.n	8003584 <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	2200      	movs	r2, #0
 8003582:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	7b1b      	ldrb	r3, [r3, #12]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d148      	bne.n	800361e <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800358c:	687c      	ldr	r4, [r7, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003594:	b29b      	uxth	r3, r3
 8003596:	441c      	add	r4, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4423      	add	r3, r4
 80035a0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035a4:	461c      	mov	r4, r3
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10e      	bne.n	80035ca <USB_EPStartXfer+0x346>
 80035ac:	8823      	ldrh	r3, [r4, #0]
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	8023      	strh	r3, [r4, #0]
 80035b8:	8823      	ldrh	r3, [r4, #0]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80035c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	8023      	strh	r3, [r4, #0]
 80035c8:	e0f2      	b.n	80037b0 <USB_EPStartXfer+0x52c>
 80035ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035cc:	2b3e      	cmp	r3, #62	; 0x3e
 80035ce:	d810      	bhi.n	80035f2 <USB_EPStartXfer+0x36e>
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	085b      	lsrs	r3, r3, #1
 80035d4:	61fb      	str	r3, [r7, #28]
 80035d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d8:	f003 0301 	and.w	r3, r3, #1
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <USB_EPStartXfer+0x362>
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	3301      	adds	r3, #1
 80035e4:	61fb      	str	r3, [r7, #28]
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	b29b      	uxth	r3, r3
 80035ea:	029b      	lsls	r3, r3, #10
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	8023      	strh	r3, [r4, #0]
 80035f0:	e0de      	b.n	80037b0 <USB_EPStartXfer+0x52c>
 80035f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	61fb      	str	r3, [r7, #28]
 80035f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d102      	bne.n	8003608 <USB_EPStartXfer+0x384>
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	3b01      	subs	r3, #1
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	b29b      	uxth	r3, r3
 800360c:	029b      	lsls	r3, r3, #10
 800360e:	b29b      	uxth	r3, r3
 8003610:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003614:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003618:	b29b      	uxth	r3, r3
 800361a:	8023      	strh	r3, [r4, #0]
 800361c:	e0c8      	b.n	80037b0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	785b      	ldrb	r3, [r3, #1]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d148      	bne.n	80036b8 <USB_EPStartXfer+0x434>
 8003626:	687c      	ldr	r4, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800362e:	b29b      	uxth	r3, r3
 8003630:	441c      	add	r4, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	781b      	ldrb	r3, [r3, #0]
 8003636:	00db      	lsls	r3, r3, #3
 8003638:	4423      	add	r3, r4
 800363a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800363e:	461c      	mov	r4, r3
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10e      	bne.n	8003664 <USB_EPStartXfer+0x3e0>
 8003646:	8823      	ldrh	r3, [r4, #0]
 8003648:	b29b      	uxth	r3, r3
 800364a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800364e:	b29b      	uxth	r3, r3
 8003650:	8023      	strh	r3, [r4, #0]
 8003652:	8823      	ldrh	r3, [r4, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800365a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800365e:	b29b      	uxth	r3, r3
 8003660:	8023      	strh	r3, [r4, #0]
 8003662:	e03d      	b.n	80036e0 <USB_EPStartXfer+0x45c>
 8003664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003666:	2b3e      	cmp	r3, #62	; 0x3e
 8003668:	d810      	bhi.n	800368c <USB_EPStartXfer+0x408>
 800366a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366c:	085b      	lsrs	r3, r3, #1
 800366e:	61bb      	str	r3, [r7, #24]
 8003670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <USB_EPStartXfer+0x3fc>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	3301      	adds	r3, #1
 800367e:	61bb      	str	r3, [r7, #24]
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	b29b      	uxth	r3, r3
 8003684:	029b      	lsls	r3, r3, #10
 8003686:	b29b      	uxth	r3, r3
 8003688:	8023      	strh	r3, [r4, #0]
 800368a:	e029      	b.n	80036e0 <USB_EPStartXfer+0x45c>
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	61bb      	str	r3, [r7, #24]
 8003692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003694:	f003 031f 	and.w	r3, r3, #31
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <USB_EPStartXfer+0x41e>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	3b01      	subs	r3, #1
 80036a0:	61bb      	str	r3, [r7, #24]
 80036a2:	69bb      	ldr	r3, [r7, #24]
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	029b      	lsls	r3, r3, #10
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	8023      	strh	r3, [r4, #0]
 80036b6:	e013      	b.n	80036e0 <USB_EPStartXfer+0x45c>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	785b      	ldrb	r3, [r3, #1]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d10f      	bne.n	80036e0 <USB_EPStartXfer+0x45c>
 80036c0:	687c      	ldr	r4, [r7, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	441c      	add	r4, r3
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	00db      	lsls	r3, r3, #3
 80036d2:	4423      	add	r3, r4
 80036d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036d8:	461c      	mov	r4, r3
 80036da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036dc:	b29b      	uxth	r3, r3
 80036de:	8023      	strh	r3, [r4, #0]
 80036e0:	687c      	ldr	r4, [r7, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	785b      	ldrb	r3, [r3, #1]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d14e      	bne.n	8003788 <USB_EPStartXfer+0x504>
 80036ea:	687c      	ldr	r4, [r7, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	441c      	add	r4, r3
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	4423      	add	r3, r4
 80036fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003702:	461c      	mov	r4, r3
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10e      	bne.n	8003728 <USB_EPStartXfer+0x4a4>
 800370a:	8823      	ldrh	r3, [r4, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003712:	b29b      	uxth	r3, r3
 8003714:	8023      	strh	r3, [r4, #0]
 8003716:	8823      	ldrh	r3, [r4, #0]
 8003718:	b29b      	uxth	r3, r3
 800371a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800371e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003722:	b29b      	uxth	r3, r3
 8003724:	8023      	strh	r3, [r4, #0]
 8003726:	e043      	b.n	80037b0 <USB_EPStartXfer+0x52c>
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	2b3e      	cmp	r3, #62	; 0x3e
 800372c:	d816      	bhi.n	800375c <USB_EPStartXfer+0x4d8>
 800372e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003730:	085b      	lsrs	r3, r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <USB_EPStartXfer+0x4c0>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	3301      	adds	r3, #1
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	b29b      	uxth	r3, r3
 8003748:	029b      	lsls	r3, r3, #10
 800374a:	b29b      	uxth	r3, r3
 800374c:	8023      	strh	r3, [r4, #0]
 800374e:	e02f      	b.n	80037b0 <USB_EPStartXfer+0x52c>
 8003750:	ffff80c0 	.word	0xffff80c0
 8003754:	ffffc080 	.word	0xffffc080
 8003758:	ffff8080 	.word	0xffff8080
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	f003 031f 	and.w	r3, r3, #31
 8003768:	2b00      	cmp	r3, #0
 800376a:	d102      	bne.n	8003772 <USB_EPStartXfer+0x4ee>
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	3b01      	subs	r3, #1
 8003770:	617b      	str	r3, [r7, #20]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	b29b      	uxth	r3, r3
 8003776:	029b      	lsls	r3, r3, #10
 8003778:	b29b      	uxth	r3, r3
 800377a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800377e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003782:	b29b      	uxth	r3, r3
 8003784:	8023      	strh	r3, [r4, #0]
 8003786:	e013      	b.n	80037b0 <USB_EPStartXfer+0x52c>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	785b      	ldrb	r3, [r3, #1]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d10f      	bne.n	80037b0 <USB_EPStartXfer+0x52c>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003796:	b29b      	uxth	r3, r3
 8003798:	441c      	add	r4, r3
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	00db      	lsls	r3, r3, #3
 80037a0:	4423      	add	r3, r4
 80037a2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	881b      	ldrh	r3, [r3, #0]
 80037bc:	b29b      	uxth	r3, r3
 80037be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037c6:	b29c      	uxth	r4, r3
 80037c8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80037cc:	b29c      	uxth	r4, r3
 80037ce:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80037d2:	b29c      	uxth	r4, r3
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	441a      	add	r2, r3
 80037de:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <USB_EPStartXfer+0x56c>)
 80037e0:	4323      	orrs	r3, r4
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3734      	adds	r7, #52	; 0x34
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}
 80037f0:	ffff8080 	.word	0xffff8080

080037f4 <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80037f4:	b490      	push	{r4, r7}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	785b      	ldrb	r3, [r3, #1]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003806:	687a      	ldr	r2, [r7, #4]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	881b      	ldrh	r3, [r3, #0]
 8003812:	b29b      	uxth	r3, r3
 8003814:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800381c:	b29c      	uxth	r4, r3
 800381e:	f084 0310 	eor.w	r3, r4, #16
 8003822:	b29c      	uxth	r4, r3
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	441a      	add	r2, r3
 800382e:	4b11      	ldr	r3, [pc, #68]	; (8003874 <USB_EPSetStall+0x80>)
 8003830:	4323      	orrs	r3, r4
 8003832:	b29b      	uxth	r3, r3
 8003834:	8013      	strh	r3, [r2, #0]
 8003836:	e017      	b.n	8003868 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	4413      	add	r3, r2
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	b29b      	uxth	r3, r3
 8003846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800384a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800384e:	b29c      	uxth	r4, r3
 8003850:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003854:	b29c      	uxth	r4, r3
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	441a      	add	r2, r3
 8003860:	4b04      	ldr	r3, [pc, #16]	; (8003874 <USB_EPSetStall+0x80>)
 8003862:	4323      	orrs	r3, r4
 8003864:	b29b      	uxth	r3, r3
 8003866:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3708      	adds	r7, #8
 800386e:	46bd      	mov	sp, r7
 8003870:	bc90      	pop	{r4, r7}
 8003872:	4770      	bx	lr
 8003874:	ffff8080 	.word	0xffff8080

08003878 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003878:	b490      	push	{r4, r7}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
 8003880:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	7b1b      	ldrb	r3, [r3, #12]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d17d      	bne.n	8003986 <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	785b      	ldrb	r3, [r3, #1]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d03d      	beq.n	800390e <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	b29c      	uxth	r4, r3
 80038a0:	4623      	mov	r3, r4
 80038a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d014      	beq.n	80038d4 <USB_EPClearStall+0x5c>
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4413      	add	r3, r2
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c0:	b29c      	uxth	r4, r3
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	441a      	add	r2, r3
 80038cc:	4b31      	ldr	r3, [pc, #196]	; (8003994 <USB_EPClearStall+0x11c>)
 80038ce:	4323      	orrs	r3, r4
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	78db      	ldrb	r3, [r3, #3]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d054      	beq.n	8003986 <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	4413      	add	r3, r2
 80038e6:	881b      	ldrh	r3, [r3, #0]
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f2:	b29c      	uxth	r4, r3
 80038f4:	f084 0320 	eor.w	r3, r4, #32
 80038f8:	b29c      	uxth	r4, r3
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	781b      	ldrb	r3, [r3, #0]
 8003900:	009b      	lsls	r3, r3, #2
 8003902:	441a      	add	r2, r3
 8003904:	4b24      	ldr	r3, [pc, #144]	; (8003998 <USB_EPClearStall+0x120>)
 8003906:	4323      	orrs	r3, r4
 8003908:	b29b      	uxth	r3, r3
 800390a:	8013      	strh	r3, [r2, #0]
 800390c:	e03b      	b.n	8003986 <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	4413      	add	r3, r2
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29c      	uxth	r4, r3
 800391c:	4623      	mov	r3, r4
 800391e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003922:	2b00      	cmp	r3, #0
 8003924:	d014      	beq.n	8003950 <USB_EPClearStall+0xd8>
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	4413      	add	r3, r2
 8003930:	881b      	ldrh	r3, [r3, #0]
 8003932:	b29b      	uxth	r3, r3
 8003934:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800393c:	b29c      	uxth	r4, r3
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	441a      	add	r2, r3
 8003948:	4b14      	ldr	r3, [pc, #80]	; (800399c <USB_EPClearStall+0x124>)
 800394a:	4323      	orrs	r3, r4
 800394c:	b29b      	uxth	r3, r3
 800394e:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	881b      	ldrh	r3, [r3, #0]
 800395c:	b29b      	uxth	r3, r3
 800395e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003966:	b29c      	uxth	r4, r3
 8003968:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800396c:	b29c      	uxth	r4, r3
 800396e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003972:	b29c      	uxth	r4, r3
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	441a      	add	r2, r3
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <USB_EPClearStall+0x120>)
 8003980:	4323      	orrs	r3, r4
 8003982:	b29b      	uxth	r3, r3
 8003984:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003986:	2300      	movs	r3, #0
}
 8003988:	4618      	mov	r0, r3
 800398a:	3708      	adds	r7, #8
 800398c:	46bd      	mov	sp, r7
 800398e:	bc90      	pop	{r4, r7}
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	ffff80c0 	.word	0xffff80c0
 8003998:	ffff8080 	.word	0xffff8080
 800399c:	ffffc080 	.word	0xffffc080

080039a0 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2280      	movs	r2, #128	; 0x80
 80039b6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039e0:	b29a      	uxth	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr

080039f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80039f6:	b480      	push	{r7}
 80039f8:	b085      	sub	sp, #20
 80039fa:	af00      	add	r7, sp, #0
 80039fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003a08:	68fb      	ldr	r3, [r7, #12]
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	370c      	adds	r7, #12
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr

08003a2e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003a2e:	b480      	push	{r7}
 8003a30:	b08d      	sub	sp, #52	; 0x34
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	60f8      	str	r0, [r7, #12]
 8003a36:	60b9      	str	r1, [r7, #8]
 8003a38:	4611      	mov	r1, r2
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	80fb      	strh	r3, [r7, #6]
 8003a40:	4613      	mov	r3, r2
 8003a42:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003a44:	88bb      	ldrh	r3, [r7, #4]
 8003a46:	3301      	adds	r3, #1
 8003a48:	085b      	lsrs	r3, r3, #1
 8003a4a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a5e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a64:	e01b      	b.n	8003a9e <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8003a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6e:	3301      	adds	r3, #1
 8003a70:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	021b      	lsls	r3, r3, #8
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	3302      	adds	r3, #2
 8003a90:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	3301      	adds	r3, #1
 8003a96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d1e0      	bne.n	8003a66 <USB_WritePMA+0x38>
  }
}
 8003aa4:	bf00      	nop
 8003aa6:	3734      	adds	r7, #52	; 0x34
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b08b      	sub	sp, #44	; 0x2c
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	4611      	mov	r1, r2
 8003abc:	461a      	mov	r2, r3
 8003abe:	460b      	mov	r3, r1
 8003ac0:	80fb      	strh	r3, [r7, #6]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003ac6:	88bb      	ldrh	r3, [r7, #4]
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003ad6:	88fa      	ldrh	r2, [r7, #6]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	4413      	add	r3, r2
 8003adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003ae0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ae6:	e018      	b.n	8003b1a <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003ae8:	6a3b      	ldr	r3, [r7, #32]
 8003aea:	881b      	ldrh	r3, [r3, #0]
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	3302      	adds	r3, #2
 8003af4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	3301      	adds	r3, #1
 8003b02:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	0a1b      	lsrs	r3, r3, #8
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	3301      	adds	r3, #1
 8003b12:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	3b01      	subs	r3, #1
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e3      	bne.n	8003ae8 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003b20:	88bb      	ldrh	r3, [r7, #4]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d007      	beq.n	8003b3c <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	881b      	ldrh	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	701a      	strb	r2, [r3, #0]
  }
}
 8003b3c:	bf00      	nop
 8003b3e:	372c      	adds	r7, #44	; 0x2c
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	460b      	mov	r3, r1
 8003b52:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	7c1b      	ldrb	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d115      	bne.n	8003b8c <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b64:	2202      	movs	r2, #2
 8003b66:	2181      	movs	r1, #129	; 0x81
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f001 ff8c 	bl	8005a86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003b74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b78:	2202      	movs	r2, #2
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f001 ff82 	bl	8005a86 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8003b8a:	e012      	b.n	8003bb2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003b8c:	2340      	movs	r3, #64	; 0x40
 8003b8e:	2202      	movs	r2, #2
 8003b90:	2181      	movs	r1, #129	; 0x81
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f001 ff77 	bl	8005a86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003b9e:	2340      	movs	r3, #64	; 0x40
 8003ba0:	2202      	movs	r2, #2
 8003ba2:	2101      	movs	r1, #1
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f001 ff6e 	bl	8005a86 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8003bb2:	2308      	movs	r3, #8
 8003bb4:	2203      	movs	r2, #3
 8003bb6:	2182      	movs	r1, #130	; 0x82
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f001 ff64 	bl	8005a86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003bc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003bc8:	f002 f8b4 	bl	8005d34 <USBD_static_malloc>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d102      	bne.n	8003be4 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
 8003be2:	e026      	b.n	8003c32 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003bea:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	7c1b      	ldrb	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d109      	bne.n	8003c22 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c18:	2101      	movs	r1, #1
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f002 f81e 	bl	8005c5c <USBD_LL_PrepareReceive>
 8003c20:	e007      	b.n	8003c32 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c28:	2340      	movs	r3, #64	; 0x40
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f002 f815 	bl	8005c5c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3710      	adds	r7, #16
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	460b      	mov	r3, r1
 8003c46:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003c4c:	2181      	movs	r1, #129	; 0x81
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f001 ff3f 	bl	8005ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003c5a:	2101      	movs	r1, #1
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f001 ff38 	bl	8005ad2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8003c6a:	2182      	movs	r1, #130	; 0x82
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f001 ff30 	bl	8005ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2200      	movs	r2, #0
 8003c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d00e      	beq.n	8003ca0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c92:	4618      	mov	r0, r3
 8003c94:	f002 f85c 	bl	8005d50 <USBD_static_free>
    pdev->pClassData = NULL;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003cba:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d039      	beq.n	8003d48 <USBD_CDC_Setup+0x9e>
 8003cd4:	2b20      	cmp	r3, #32
 8003cd6:	d17c      	bne.n	8003dd2 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	88db      	ldrh	r3, [r3, #6]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d029      	beq.n	8003d34 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	b25b      	sxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da11      	bge.n	8003d0e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003cf6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	88d2      	ldrh	r2, [r2, #6]
 8003cfc:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003cfe:	6939      	ldr	r1, [r7, #16]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	88db      	ldrh	r3, [r3, #6]
 8003d04:	461a      	mov	r2, r3
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f001 fa2a 	bl	8005160 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003d0c:	e068      	b.n	8003de0 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	785a      	ldrb	r2, [r3, #1]
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	88db      	ldrh	r3, [r3, #6]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003d24:	6939      	ldr	r1, [r7, #16]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	88db      	ldrh	r3, [r3, #6]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f001 fa45 	bl	80051bc <USBD_CtlPrepareRx>
      break;
 8003d32:	e055      	b.n	8003de0 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	683a      	ldr	r2, [r7, #0]
 8003d3e:	7850      	ldrb	r0, [r2, #1]
 8003d40:	2200      	movs	r2, #0
 8003d42:	6839      	ldr	r1, [r7, #0]
 8003d44:	4798      	blx	r3
      break;
 8003d46:	e04b      	b.n	8003de0 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	785b      	ldrb	r3, [r3, #1]
 8003d4c:	2b0a      	cmp	r3, #10
 8003d4e:	d017      	beq.n	8003d80 <USBD_CDC_Setup+0xd6>
 8003d50:	2b0b      	cmp	r3, #11
 8003d52:	d029      	beq.n	8003da8 <USBD_CDC_Setup+0xfe>
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d133      	bne.n	8003dc0 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003d5e:	2b03      	cmp	r3, #3
 8003d60:	d107      	bne.n	8003d72 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003d62:	f107 030c 	add.w	r3, r7, #12
 8003d66:	2202      	movs	r2, #2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f001 f9f8 	bl	8005160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003d70:	e02e      	b.n	8003dd0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003d72:	6839      	ldr	r1, [r7, #0]
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f001 f988 	bl	800508a <USBD_CtlError>
            ret = USBD_FAIL;
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	75fb      	strb	r3, [r7, #23]
          break;
 8003d7e:	e027      	b.n	8003dd0 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003d86:	2b03      	cmp	r3, #3
 8003d88:	d107      	bne.n	8003d9a <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003d8a:	f107 030f 	add.w	r3, r7, #15
 8003d8e:	2201      	movs	r2, #1
 8003d90:	4619      	mov	r1, r3
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f001 f9e4 	bl	8005160 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003d98:	e01a      	b.n	8003dd0 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003d9a:	6839      	ldr	r1, [r7, #0]
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f001 f974 	bl	800508a <USBD_CtlError>
            ret = USBD_FAIL;
 8003da2:	2302      	movs	r3, #2
 8003da4:	75fb      	strb	r3, [r7, #23]
          break;
 8003da6:	e013      	b.n	8003dd0 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003dae:	2b03      	cmp	r3, #3
 8003db0:	d00d      	beq.n	8003dce <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003db2:	6839      	ldr	r1, [r7, #0]
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f001 f968 	bl	800508a <USBD_CtlError>
            ret = USBD_FAIL;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003dbe:	e006      	b.n	8003dce <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003dc0:	6839      	ldr	r1, [r7, #0]
 8003dc2:	6878      	ldr	r0, [r7, #4]
 8003dc4:	f001 f961 	bl	800508a <USBD_CtlError>
          ret = USBD_FAIL;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	75fb      	strb	r3, [r7, #23]
          break;
 8003dcc:	e000      	b.n	8003dd0 <USBD_CDC_Setup+0x126>
          break;
 8003dce:	bf00      	nop
      }
      break;
 8003dd0:	e006      	b.n	8003de0 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003dd2:	6839      	ldr	r1, [r7, #0]
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f001 f958 	bl	800508a <USBD_CtlError>
      ret = USBD_FAIL;
 8003dda:	2302      	movs	r3, #2
 8003ddc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dde:	bf00      	nop
  }

  return ret;
 8003de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
 8003df2:	460b      	mov	r3, r1
 8003df4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003dfc:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003e04:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d037      	beq.n	8003e80 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003e10:	78fa      	ldrb	r2, [r7, #3]
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	331c      	adds	r3, #28
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d026      	beq.n	8003e74 <USBD_CDC_DataIn+0x8a>
 8003e26:	78fa      	ldrb	r2, [r7, #3]
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4413      	add	r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	331c      	adds	r3, #28
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	0152      	lsls	r2, r2, #5
 8003e3e:	440a      	add	r2, r1
 8003e40:	3238      	adds	r2, #56	; 0x38
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	fbb3 f1f2 	udiv	r1, r3, r2
 8003e48:	fb02 f201 	mul.w	r2, r2, r1
 8003e4c:	1a9b      	subs	r3, r3, r2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d110      	bne.n	8003e74 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	331c      	adds	r3, #28
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003e66:	78f9      	ldrb	r1, [r7, #3]
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f001 fed2 	bl	8005c16 <USBD_LL_Transmit>
 8003e72:	e003      	b.n	8003e7c <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b084      	sub	sp, #16
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e9c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003e9e:	78fb      	ldrb	r3, [r7, #3]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f001 fefd 	bl	8005ca2 <USBD_LL_GetRxDataSize>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00d      	beq.n	8003ed6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003ece:	4611      	mov	r1, r2
 8003ed0:	4798      	blx	r3

    return USBD_OK;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	e000      	b.n	8003ed8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b084      	sub	sp, #16
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003eee:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d015      	beq.n	8003f26 <USBD_CDC_EP0_RxReady+0x46>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003f00:	2bff      	cmp	r3, #255	; 0xff
 8003f02:	d010      	beq.n	8003f26 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8003f12:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003f1a:	b292      	uxth	r2, r2
 8003f1c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	22ff      	movs	r2, #255	; 0xff
 8003f22:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}

08003f30 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b083      	sub	sp, #12
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2243      	movs	r2, #67	; 0x43
 8003f3c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003f3e:	4b03      	ldr	r3, [pc, #12]	; (8003f4c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr
 8003f4c:	20000090 	.word	0x20000090

08003f50 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2243      	movs	r2, #67	; 0x43
 8003f5c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8003f5e:	4b03      	ldr	r3, [pc, #12]	; (8003f6c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	2000004c 	.word	0x2000004c

08003f70 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2243      	movs	r2, #67	; 0x43
 8003f7c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8003f7e:	4b03      	ldr	r3, [pc, #12]	; (8003f8c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	200000d4 	.word	0x200000d4

08003f90 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	220a      	movs	r2, #10
 8003f9c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003f9e:	4b03      	ldr	r3, [pc, #12]	; (8003fac <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	20000008 	.word	0x20000008

08003fb0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8003fba:	2302      	movs	r3, #2
 8003fbc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	683a      	ldr	r2, [r7, #0]
 8003fc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003fd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3714      	adds	r7, #20
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b087      	sub	sp, #28
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ff2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	68ba      	ldr	r2, [r7, #8]
 8003ff8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004022:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800402c:	2300      	movs	r3, #0
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr

0800403a <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800403a:	b580      	push	{r7, lr}
 800403c:	b084      	sub	sp, #16
 800403e:	af00      	add	r7, sp, #0
 8004040:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004048:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01c      	beq.n	800408e <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800405a:	2b00      	cmp	r3, #0
 800405c:	d115      	bne.n	800408a <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2201      	movs	r2, #1
 8004062:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800407c:	b29b      	uxth	r3, r3
 800407e:	2181      	movs	r1, #129	; 0x81
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f001 fdc8 	bl	8005c16 <USBD_LL_Transmit>

      return USBD_OK;
 8004086:	2300      	movs	r3, #0
 8004088:	e002      	b.n	8004090 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800408e:	2302      	movs	r3, #2
  }
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d017      	beq.n	80040e2 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	7c1b      	ldrb	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d109      	bne.n	80040ce <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040c4:	2101      	movs	r1, #1
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f001 fdc8 	bl	8005c5c <USBD_LL_PrepareReceive>
 80040cc:	e007      	b.n	80040de <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80040d4:	2340      	movs	r3, #64	; 0x40
 80040d6:	2101      	movs	r1, #1
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f001 fdbf 	bl	8005c5c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80040de:	2300      	movs	r3, #0
 80040e0:	e000      	b.n	80040e4 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80040e2:	2302      	movs	r3, #2
  }
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	60f8      	str	r0, [r7, #12]
 80040f4:	60b9      	str	r1, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d101      	bne.n	8004104 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004100:	2302      	movs	r3, #2
 8004102:	e01a      	b.n	800413a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d003      	beq.n	8004124 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	68ba      	ldr	r2, [r7, #8]
 8004120:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	79fa      	ldrb	r2, [r7, #7]
 8004130:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004132:	68f8      	ldr	r0, [r7, #12]
 8004134:	f001 fc2c 	bl	8005990 <USBD_LL_Init>

  return USBD_OK;
 8004138:	2300      	movs	r3, #0
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004142:	b480      	push	{r7}
 8004144:	b085      	sub	sp, #20
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
 800414a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800414c:	2300      	movs	r3, #0
 800414e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d006      	beq.n	8004164 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	73fb      	strb	r3, [r7, #15]
 8004162:	e001      	b.n	8004168 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8004164:	2302      	movs	r3, #2
 8004166:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004168:	7bfb      	ldrb	r3, [r7, #15]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004176:	b580      	push	{r7, lr}
 8004178:	b082      	sub	sp, #8
 800417a:	af00      	add	r7, sp, #0
 800417c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f001 fc66 	bl	8005a50 <USBD_LL_Start>

  return USBD_OK;
 8004184:	2300      	movs	r3, #0
}
 8004186:	4618      	mov	r0, r3
 8004188:	3708      	adds	r7, #8
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800418e:	b480      	push	{r7}
 8004190:	b083      	sub	sp, #12
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80041b0:	2302      	movs	r3, #2
 80041b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00c      	beq.n	80041d8 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	78fa      	ldrb	r2, [r7, #3]
 80041c8:	4611      	mov	r1, r2
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80041d4:	2300      	movs	r3, #0
 80041d6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80041d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b082      	sub	sp, #8
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	460b      	mov	r3, r1
 80041ec:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	78fa      	ldrb	r2, [r7, #3]
 80041f8:	4611      	mov	r1, r2
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	4798      	blx	r3

  return USBD_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3708      	adds	r7, #8
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004218:	6839      	ldr	r1, [r7, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fef8 	bl	8005010 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800422e:	461a      	mov	r2, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800423c:	f003 031f 	and.w	r3, r3, #31
 8004240:	2b01      	cmp	r3, #1
 8004242:	d00c      	beq.n	800425e <USBD_LL_SetupStage+0x56>
 8004244:	2b01      	cmp	r3, #1
 8004246:	d302      	bcc.n	800424e <USBD_LL_SetupStage+0x46>
 8004248:	2b02      	cmp	r3, #2
 800424a:	d010      	beq.n	800426e <USBD_LL_SetupStage+0x66>
 800424c:	e017      	b.n	800427e <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004254:	4619      	mov	r1, r3
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9ce 	bl	80045f8 <USBD_StdDevReq>
      break;
 800425c:	e01a      	b.n	8004294 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004264:	4619      	mov	r1, r3
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fa30 	bl	80046cc <USBD_StdItfReq>
      break;
 800426c:	e012      	b.n	8004294 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8004274:	4619      	mov	r1, r3
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 fa6e 	bl	8004758 <USBD_StdEPReq>
      break;
 800427c:	e00a      	b.n	8004294 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004284:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004288:	b2db      	uxtb	r3, r3
 800428a:	4619      	mov	r1, r3
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f001 fc3f 	bl	8005b10 <USBD_LL_StallEP>
      break;
 8004292:	bf00      	nop
  }

  return USBD_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3708      	adds	r7, #8
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}

0800429e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800429e:	b580      	push	{r7, lr}
 80042a0:	b086      	sub	sp, #24
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	460b      	mov	r3, r1
 80042a8:	607a      	str	r2, [r7, #4]
 80042aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80042ac:	7afb      	ldrb	r3, [r7, #11]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d14b      	bne.n	800434a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80042b8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d134      	bne.n	800432e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d919      	bls.n	8004304 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	68da      	ldr	r2, [r3, #12]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	1ad2      	subs	r2, r2, r3
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	68da      	ldr	r2, [r3, #12]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d203      	bcs.n	80042f2 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	e002      	b.n	80042f8 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80042f6:	b29b      	uxth	r3, r3
 80042f8:	461a      	mov	r2, r3
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 ff7b 	bl	80051f8 <USBD_CtlContinueRx>
 8004302:	e038      	b.n	8004376 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00a      	beq.n	8004326 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004316:	2b03      	cmp	r3, #3
 8004318:	d105      	bne.n	8004326 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 ff78 	bl	800521c <USBD_CtlSendStatus>
 800432c:	e023      	b.n	8004376 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004334:	2b05      	cmp	r3, #5
 8004336:	d11e      	bne.n	8004376 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004340:	2100      	movs	r1, #0
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f001 fbe4 	bl	8005b10 <USBD_LL_StallEP>
 8004348:	e015      	b.n	8004376 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00d      	beq.n	8004372 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800435c:	2b03      	cmp	r3, #3
 800435e:	d108      	bne.n	8004372 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	7afa      	ldrb	r2, [r7, #11]
 800436a:	4611      	mov	r1, r2
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	4798      	blx	r3
 8004370:	e001      	b.n	8004376 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004372:	2302      	movs	r3, #2
 8004374:	e000      	b.n	8004378 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	460b      	mov	r3, r1
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800438e:	7afb      	ldrb	r3, [r7, #11]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d17f      	bne.n	8004494 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3314      	adds	r3, #20
 8004398:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d15c      	bne.n	800445e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	68da      	ldr	r2, [r3, #12]
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d915      	bls.n	80043dc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	68da      	ldr	r2, [r3, #12]
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	1ad2      	subs	r2, r2, r3
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	461a      	mov	r2, r3
 80043c6:	6879      	ldr	r1, [r7, #4]
 80043c8:	68f8      	ldr	r0, [r7, #12]
 80043ca:	f000 fee5 	bl	8005198 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80043ce:	2300      	movs	r3, #0
 80043d0:	2200      	movs	r2, #0
 80043d2:	2100      	movs	r1, #0
 80043d4:	68f8      	ldr	r0, [r7, #12]
 80043d6:	f001 fc41 	bl	8005c5c <USBD_LL_PrepareReceive>
 80043da:	e04e      	b.n	800447a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	697a      	ldr	r2, [r7, #20]
 80043e2:	6912      	ldr	r2, [r2, #16]
 80043e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80043e8:	fb02 f201 	mul.w	r2, r2, r1
 80043ec:	1a9b      	subs	r3, r3, r2
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d11c      	bne.n	800442c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d316      	bcc.n	800442c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004408:	429a      	cmp	r2, r3
 800440a:	d20f      	bcs.n	800442c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800440c:	2200      	movs	r2, #0
 800440e:	2100      	movs	r1, #0
 8004410:	68f8      	ldr	r0, [r7, #12]
 8004412:	f000 fec1 	bl	8005198 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800441e:	2300      	movs	r3, #0
 8004420:	2200      	movs	r2, #0
 8004422:	2100      	movs	r1, #0
 8004424:	68f8      	ldr	r0, [r7, #12]
 8004426:	f001 fc19 	bl	8005c5c <USBD_LL_PrepareReceive>
 800442a:	e026      	b.n	800447a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800443e:	2b03      	cmp	r3, #3
 8004440:	d105      	bne.n	800444e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800444e:	2180      	movs	r1, #128	; 0x80
 8004450:	68f8      	ldr	r0, [r7, #12]
 8004452:	f001 fb5d 	bl	8005b10 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fef3 	bl	8005242 <USBD_CtlReceiveStatus>
 800445c:	e00d      	b.n	800447a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004464:	2b04      	cmp	r3, #4
 8004466:	d004      	beq.n	8004472 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800446e:	2b00      	cmp	r3, #0
 8004470:	d103      	bne.n	800447a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004472:	2180      	movs	r1, #128	; 0x80
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f001 fb4b 	bl	8005b10 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004480:	2b01      	cmp	r3, #1
 8004482:	d11d      	bne.n	80044c0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f7ff fe82 	bl	800418e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004492:	e015      	b.n	80044c0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800449a:	695b      	ldr	r3, [r3, #20]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d00d      	beq.n	80044bc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80044a6:	2b03      	cmp	r3, #3
 80044a8:	d108      	bne.n	80044bc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	7afa      	ldrb	r2, [r7, #11]
 80044b4:	4611      	mov	r1, r2
 80044b6:	68f8      	ldr	r0, [r7, #12]
 80044b8:	4798      	blx	r3
 80044ba:	e001      	b.n	80044c0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80044bc:	2302      	movs	r3, #2
 80044be:	e000      	b.n	80044c2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b082      	sub	sp, #8
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80044d2:	2340      	movs	r3, #64	; 0x40
 80044d4:	2200      	movs	r2, #0
 80044d6:	2100      	movs	r1, #0
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f001 fad4 	bl	8005a86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2240      	movs	r2, #64	; 0x40
 80044ea:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80044ee:	2340      	movs	r3, #64	; 0x40
 80044f0:	2200      	movs	r2, #0
 80044f2:	2180      	movs	r1, #128	; 0x80
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f001 fac6 	bl	8005a86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2240      	movs	r2, #64	; 0x40
 8004504:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6852      	ldr	r2, [r2, #4]
 800453a:	b2d2      	uxtb	r2, r2
 800453c:	4611      	mov	r1, r2
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
  }

  return USBD_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800454c:	b480      	push	{r7}
 800454e:	b083      	sub	sp, #12
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	460b      	mov	r3, r1
 8004556:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2204      	movs	r2, #4
 8004584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	370c      	adds	r7, #12
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr

08004596 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d105      	bne.n	80045b4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr

080045c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b082      	sub	sp, #8
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045d0:	2b03      	cmp	r3, #3
 80045d2:	d10b      	bne.n	80045ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d005      	beq.n	80045ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3708      	adds	r7, #8
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800460e:	2b20      	cmp	r3, #32
 8004610:	d004      	beq.n	800461c <USBD_StdDevReq+0x24>
 8004612:	2b40      	cmp	r3, #64	; 0x40
 8004614:	d002      	beq.n	800461c <USBD_StdDevReq+0x24>
 8004616:	2b00      	cmp	r3, #0
 8004618:	d008      	beq.n	800462c <USBD_StdDevReq+0x34>
 800461a:	e04c      	b.n	80046b6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	6839      	ldr	r1, [r7, #0]
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	4798      	blx	r3
      break;
 800462a:	e049      	b.n	80046c0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	785b      	ldrb	r3, [r3, #1]
 8004630:	2b09      	cmp	r3, #9
 8004632:	d83a      	bhi.n	80046aa <USBD_StdDevReq+0xb2>
 8004634:	a201      	add	r2, pc, #4	; (adr r2, 800463c <USBD_StdDevReq+0x44>)
 8004636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800463a:	bf00      	nop
 800463c:	0800468d 	.word	0x0800468d
 8004640:	080046a1 	.word	0x080046a1
 8004644:	080046ab 	.word	0x080046ab
 8004648:	08004697 	.word	0x08004697
 800464c:	080046ab 	.word	0x080046ab
 8004650:	0800466f 	.word	0x0800466f
 8004654:	08004665 	.word	0x08004665
 8004658:	080046ab 	.word	0x080046ab
 800465c:	08004683 	.word	0x08004683
 8004660:	08004679 	.word	0x08004679
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004664:	6839      	ldr	r1, [r7, #0]
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f000 f9d4 	bl	8004a14 <USBD_GetDescriptor>
          break;
 800466c:	e022      	b.n	80046b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800466e:	6839      	ldr	r1, [r7, #0]
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 fb61 	bl	8004d38 <USBD_SetAddress>
          break;
 8004676:	e01d      	b.n	80046b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 fb9e 	bl	8004dbc <USBD_SetConfig>
          break;
 8004680:	e018      	b.n	80046b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004682:	6839      	ldr	r1, [r7, #0]
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 fc27 	bl	8004ed8 <USBD_GetConfig>
          break;
 800468a:	e013      	b.n	80046b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800468c:	6839      	ldr	r1, [r7, #0]
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fc56 	bl	8004f40 <USBD_GetStatus>
          break;
 8004694:	e00e      	b.n	80046b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004696:	6839      	ldr	r1, [r7, #0]
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 fc84 	bl	8004fa6 <USBD_SetFeature>
          break;
 800469e:	e009      	b.n	80046b4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80046a0:	6839      	ldr	r1, [r7, #0]
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 fc93 	bl	8004fce <USBD_ClrFeature>
          break;
 80046a8:	e004      	b.n	80046b4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80046aa:	6839      	ldr	r1, [r7, #0]
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fcec 	bl	800508a <USBD_CtlError>
          break;
 80046b2:	bf00      	nop
      }
      break;
 80046b4:	e004      	b.n	80046c0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 80046b6:	6839      	ldr	r1, [r7, #0]
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f000 fce6 	bl	800508a <USBD_CtlError>
      break;
 80046be:	bf00      	nop
  }

  return ret;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop

080046cc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046e2:	2b20      	cmp	r3, #32
 80046e4:	d003      	beq.n	80046ee <USBD_StdItfReq+0x22>
 80046e6:	2b40      	cmp	r3, #64	; 0x40
 80046e8:	d001      	beq.n	80046ee <USBD_StdItfReq+0x22>
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d12a      	bne.n	8004744 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80046f4:	3b01      	subs	r3, #1
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d81d      	bhi.n	8004736 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	889b      	ldrh	r3, [r3, #4]
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	d813      	bhi.n	800472c <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	6839      	ldr	r1, [r7, #0]
 800470e:	6878      	ldr	r0, [r7, #4]
 8004710:	4798      	blx	r3
 8004712:	4603      	mov	r3, r0
 8004714:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	88db      	ldrh	r3, [r3, #6]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d110      	bne.n	8004740 <USBD_StdItfReq+0x74>
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fd79 	bl	800521c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800472a:	e009      	b.n	8004740 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 800472c:	6839      	ldr	r1, [r7, #0]
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 fcab 	bl	800508a <USBD_CtlError>
          break;
 8004734:	e004      	b.n	8004740 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004736:	6839      	ldr	r1, [r7, #0]
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fca6 	bl	800508a <USBD_CtlError>
          break;
 800473e:	e000      	b.n	8004742 <USBD_StdItfReq+0x76>
          break;
 8004740:	bf00      	nop
      }
      break;
 8004742:	e004      	b.n	800474e <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004744:	6839      	ldr	r1, [r7, #0]
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fc9f 	bl	800508a <USBD_CtlError>
      break;
 800474c:	bf00      	nop
  }

  return USBD_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3710      	adds	r7, #16
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}

08004758 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004762:	2300      	movs	r3, #0
 8004764:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	889b      	ldrh	r3, [r3, #4]
 800476a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004774:	2b20      	cmp	r3, #32
 8004776:	d004      	beq.n	8004782 <USBD_StdEPReq+0x2a>
 8004778:	2b40      	cmp	r3, #64	; 0x40
 800477a:	d002      	beq.n	8004782 <USBD_StdEPReq+0x2a>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <USBD_StdEPReq+0x3a>
 8004780:	e13d      	b.n	80049fe <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	4798      	blx	r3
      break;
 8004790:	e13a      	b.n	8004a08 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800479a:	2b20      	cmp	r3, #32
 800479c:	d10a      	bne.n	80047b4 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	6839      	ldr	r1, [r7, #0]
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	4798      	blx	r3
 80047ac:	4603      	mov	r3, r0
 80047ae:	73fb      	strb	r3, [r7, #15]

        return ret;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
 80047b2:	e12a      	b.n	8004a0a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	785b      	ldrb	r3, [r3, #1]
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d03e      	beq.n	800483a <USBD_StdEPReq+0xe2>
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d002      	beq.n	80047c6 <USBD_StdEPReq+0x6e>
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d070      	beq.n	80048a6 <USBD_StdEPReq+0x14e>
 80047c4:	e115      	b.n	80049f2 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d002      	beq.n	80047d6 <USBD_StdEPReq+0x7e>
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d015      	beq.n	8004800 <USBD_StdEPReq+0xa8>
 80047d4:	e02b      	b.n	800482e <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80047d6:	7bbb      	ldrb	r3, [r7, #14]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <USBD_StdEPReq+0x9e>
 80047dc:	7bbb      	ldrb	r3, [r7, #14]
 80047de:	2b80      	cmp	r3, #128	; 0x80
 80047e0:	d009      	beq.n	80047f6 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80047e2:	7bbb      	ldrb	r3, [r7, #14]
 80047e4:	4619      	mov	r1, r3
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f001 f992 	bl	8005b10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80047ec:	2180      	movs	r1, #128	; 0x80
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f001 f98e 	bl	8005b10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80047f4:	e020      	b.n	8004838 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 80047f6:	6839      	ldr	r1, [r7, #0]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fc46 	bl	800508a <USBD_CtlError>
              break;
 80047fe:	e01b      	b.n	8004838 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	885b      	ldrh	r3, [r3, #2]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10e      	bne.n	8004826 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004808:	7bbb      	ldrb	r3, [r7, #14]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00b      	beq.n	8004826 <USBD_StdEPReq+0xce>
 800480e:	7bbb      	ldrb	r3, [r7, #14]
 8004810:	2b80      	cmp	r3, #128	; 0x80
 8004812:	d008      	beq.n	8004826 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	88db      	ldrh	r3, [r3, #6]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d104      	bne.n	8004826 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800481c:	7bbb      	ldrb	r3, [r7, #14]
 800481e:	4619      	mov	r1, r3
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f001 f975 	bl	8005b10 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fcf8 	bl	800521c <USBD_CtlSendStatus>

              break;
 800482c:	e004      	b.n	8004838 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 800482e:	6839      	ldr	r1, [r7, #0]
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 fc2a 	bl	800508a <USBD_CtlError>
              break;
 8004836:	bf00      	nop
          }
          break;
 8004838:	e0e0      	b.n	80049fc <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004840:	2b02      	cmp	r3, #2
 8004842:	d002      	beq.n	800484a <USBD_StdEPReq+0xf2>
 8004844:	2b03      	cmp	r3, #3
 8004846:	d015      	beq.n	8004874 <USBD_StdEPReq+0x11c>
 8004848:	e026      	b.n	8004898 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800484a:	7bbb      	ldrb	r3, [r7, #14]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00c      	beq.n	800486a <USBD_StdEPReq+0x112>
 8004850:	7bbb      	ldrb	r3, [r7, #14]
 8004852:	2b80      	cmp	r3, #128	; 0x80
 8004854:	d009      	beq.n	800486a <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004856:	7bbb      	ldrb	r3, [r7, #14]
 8004858:	4619      	mov	r1, r3
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f001 f958 	bl	8005b10 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004860:	2180      	movs	r1, #128	; 0x80
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f001 f954 	bl	8005b10 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004868:	e01c      	b.n	80048a4 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 fc0c 	bl	800508a <USBD_CtlError>
              break;
 8004872:	e017      	b.n	80048a4 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	885b      	ldrh	r3, [r3, #2]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d112      	bne.n	80048a2 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800487c:	7bbb      	ldrb	r3, [r7, #14]
 800487e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004886:	7bbb      	ldrb	r3, [r7, #14]
 8004888:	4619      	mov	r1, r3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f001 f95f 	bl	8005b4e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fcc3 	bl	800521c <USBD_CtlSendStatus>
              }
              break;
 8004896:	e004      	b.n	80048a2 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004898:	6839      	ldr	r1, [r7, #0]
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 fbf5 	bl	800508a <USBD_CtlError>
              break;
 80048a0:	e000      	b.n	80048a4 <USBD_StdEPReq+0x14c>
              break;
 80048a2:	bf00      	nop
          }
          break;
 80048a4:	e0aa      	b.n	80049fc <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d002      	beq.n	80048b6 <USBD_StdEPReq+0x15e>
 80048b0:	2b03      	cmp	r3, #3
 80048b2:	d032      	beq.n	800491a <USBD_StdEPReq+0x1c2>
 80048b4:	e097      	b.n	80049e6 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80048b6:	7bbb      	ldrb	r3, [r7, #14]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d007      	beq.n	80048cc <USBD_StdEPReq+0x174>
 80048bc:	7bbb      	ldrb	r3, [r7, #14]
 80048be:	2b80      	cmp	r3, #128	; 0x80
 80048c0:	d004      	beq.n	80048cc <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f000 fbe0 	bl	800508a <USBD_CtlError>
                break;
 80048ca:	e091      	b.n	80049f0 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80048cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	da0b      	bge.n	80048ec <USBD_StdEPReq+0x194>
 80048d4:	7bbb      	ldrb	r3, [r7, #14]
 80048d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	3310      	adds	r3, #16
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	4413      	add	r3, r2
 80048e8:	3304      	adds	r3, #4
 80048ea:	e00b      	b.n	8004904 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80048ec:	7bbb      	ldrb	r3, [r7, #14]
 80048ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80048fe:	687a      	ldr	r2, [r7, #4]
 8004900:	4413      	add	r3, r2
 8004902:	3304      	adds	r3, #4
 8004904:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2202      	movs	r2, #2
 8004910:	4619      	mov	r1, r3
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fc24 	bl	8005160 <USBD_CtlSendData>
              break;
 8004918:	e06a      	b.n	80049f0 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800491a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800491e:	2b00      	cmp	r3, #0
 8004920:	da11      	bge.n	8004946 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004922:	7bbb      	ldrb	r3, [r7, #14]
 8004924:	f003 020f 	and.w	r2, r3, #15
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3318      	adds	r3, #24
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d117      	bne.n	800496c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 800493c:	6839      	ldr	r1, [r7, #0]
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 fba3 	bl	800508a <USBD_CtlError>
                  break;
 8004944:	e054      	b.n	80049f0 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004946:	7bbb      	ldrb	r3, [r7, #14]
 8004948:	f003 020f 	and.w	r2, r3, #15
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4413      	add	r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d104      	bne.n	800496c <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004962:	6839      	ldr	r1, [r7, #0]
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fb90 	bl	800508a <USBD_CtlError>
                  break;
 800496a:	e041      	b.n	80049f0 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800496c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004970:	2b00      	cmp	r3, #0
 8004972:	da0b      	bge.n	800498c <USBD_StdEPReq+0x234>
 8004974:	7bbb      	ldrb	r3, [r7, #14]
 8004976:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	3310      	adds	r3, #16
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	4413      	add	r3, r2
 8004988:	3304      	adds	r3, #4
 800498a:	e00b      	b.n	80049a4 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800498c:	7bbb      	ldrb	r3, [r7, #14]
 800498e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004992:	4613      	mov	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	009b      	lsls	r3, r3, #2
 800499a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	4413      	add	r3, r2
 80049a2:	3304      	adds	r3, #4
 80049a4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80049a6:	7bbb      	ldrb	r3, [r7, #14]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d002      	beq.n	80049b2 <USBD_StdEPReq+0x25a>
 80049ac:	7bbb      	ldrb	r3, [r7, #14]
 80049ae:	2b80      	cmp	r3, #128	; 0x80
 80049b0:	d103      	bne.n	80049ba <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	2200      	movs	r2, #0
 80049b6:	601a      	str	r2, [r3, #0]
 80049b8:	e00e      	b.n	80049d8 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80049ba:	7bbb      	ldrb	r3, [r7, #14]
 80049bc:	4619      	mov	r1, r3
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f001 f8e4 	bl	8005b8c <USBD_LL_IsStallEP>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	2201      	movs	r2, #1
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	e002      	b.n	80049d8 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	2200      	movs	r2, #0
 80049d6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2202      	movs	r2, #2
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f000 fbbe 	bl	8005160 <USBD_CtlSendData>
              break;
 80049e4:	e004      	b.n	80049f0 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 80049e6:	6839      	ldr	r1, [r7, #0]
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f000 fb4e 	bl	800508a <USBD_CtlError>
              break;
 80049ee:	bf00      	nop
          }
          break;
 80049f0:	e004      	b.n	80049fc <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 80049f2:	6839      	ldr	r1, [r7, #0]
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 fb48 	bl	800508a <USBD_CtlError>
          break;
 80049fa:	bf00      	nop
      }
      break;
 80049fc:	e004      	b.n	8004a08 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 80049fe:	6839      	ldr	r1, [r7, #0]
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f000 fb42 	bl	800508a <USBD_CtlError>
      break;
 8004a06:	bf00      	nop
  }

  return ret;
 8004a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3710      	adds	r7, #16
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a1e:	2300      	movs	r3, #0
 8004a20:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	885b      	ldrh	r3, [r3, #2]
 8004a2e:	0a1b      	lsrs	r3, r3, #8
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	3b01      	subs	r3, #1
 8004a34:	2b0e      	cmp	r3, #14
 8004a36:	f200 8152 	bhi.w	8004cde <USBD_GetDescriptor+0x2ca>
 8004a3a:	a201      	add	r2, pc, #4	; (adr r2, 8004a40 <USBD_GetDescriptor+0x2c>)
 8004a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a40:	08004ab1 	.word	0x08004ab1
 8004a44:	08004ac9 	.word	0x08004ac9
 8004a48:	08004b09 	.word	0x08004b09
 8004a4c:	08004cdf 	.word	0x08004cdf
 8004a50:	08004cdf 	.word	0x08004cdf
 8004a54:	08004c7f 	.word	0x08004c7f
 8004a58:	08004cab 	.word	0x08004cab
 8004a5c:	08004cdf 	.word	0x08004cdf
 8004a60:	08004cdf 	.word	0x08004cdf
 8004a64:	08004cdf 	.word	0x08004cdf
 8004a68:	08004cdf 	.word	0x08004cdf
 8004a6c:	08004cdf 	.word	0x08004cdf
 8004a70:	08004cdf 	.word	0x08004cdf
 8004a74:	08004cdf 	.word	0x08004cdf
 8004a78:	08004a7d 	.word	0x08004a7d
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00b      	beq.n	8004aa0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	7c12      	ldrb	r2, [r2, #16]
 8004a94:	f107 0108 	add.w	r1, r7, #8
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4798      	blx	r3
 8004a9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004a9e:	e126      	b.n	8004cee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8004aa0:	6839      	ldr	r1, [r7, #0]
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 faf1 	bl	800508a <USBD_CtlError>
        err++;
 8004aa8:	7afb      	ldrb	r3, [r7, #11]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	72fb      	strb	r3, [r7, #11]
      break;
 8004aae:	e11e      	b.n	8004cee <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	7c12      	ldrb	r2, [r2, #16]
 8004abc:	f107 0108 	add.w	r1, r7, #8
 8004ac0:	4610      	mov	r0, r2
 8004ac2:	4798      	blx	r3
 8004ac4:	60f8      	str	r0, [r7, #12]
      break;
 8004ac6:	e112      	b.n	8004cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	7c1b      	ldrb	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d10d      	bne.n	8004aec <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad8:	f107 0208 	add.w	r2, r7, #8
 8004adc:	4610      	mov	r0, r2
 8004ade:	4798      	blx	r3
 8004ae0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004aea:	e100      	b.n	8004cee <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af4:	f107 0208 	add.w	r2, r7, #8
 8004af8:	4610      	mov	r0, r2
 8004afa:	4798      	blx	r3
 8004afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	3301      	adds	r3, #1
 8004b02:	2202      	movs	r2, #2
 8004b04:	701a      	strb	r2, [r3, #0]
      break;
 8004b06:	e0f2      	b.n	8004cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	885b      	ldrh	r3, [r3, #2]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2b05      	cmp	r3, #5
 8004b10:	f200 80ac 	bhi.w	8004c6c <USBD_GetDescriptor+0x258>
 8004b14:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <USBD_GetDescriptor+0x108>)
 8004b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1a:	bf00      	nop
 8004b1c:	08004b35 	.word	0x08004b35
 8004b20:	08004b69 	.word	0x08004b69
 8004b24:	08004b9d 	.word	0x08004b9d
 8004b28:	08004bd1 	.word	0x08004bd1
 8004b2c:	08004c05 	.word	0x08004c05
 8004b30:	08004c39 	.word	0x08004c39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00b      	beq.n	8004b58 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	7c12      	ldrb	r2, [r2, #16]
 8004b4c:	f107 0108 	add.w	r1, r7, #8
 8004b50:	4610      	mov	r0, r2
 8004b52:	4798      	blx	r3
 8004b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b56:	e091      	b.n	8004c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004b58:	6839      	ldr	r1, [r7, #0]
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 fa95 	bl	800508a <USBD_CtlError>
            err++;
 8004b60:	7afb      	ldrb	r3, [r7, #11]
 8004b62:	3301      	adds	r3, #1
 8004b64:	72fb      	strb	r3, [r7, #11]
          break;
 8004b66:	e089      	b.n	8004c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00b      	beq.n	8004b8c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	7c12      	ldrb	r2, [r2, #16]
 8004b80:	f107 0108 	add.w	r1, r7, #8
 8004b84:	4610      	mov	r0, r2
 8004b86:	4798      	blx	r3
 8004b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004b8a:	e077      	b.n	8004c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004b8c:	6839      	ldr	r1, [r7, #0]
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 fa7b 	bl	800508a <USBD_CtlError>
            err++;
 8004b94:	7afb      	ldrb	r3, [r7, #11]
 8004b96:	3301      	adds	r3, #1
 8004b98:	72fb      	strb	r3, [r7, #11]
          break;
 8004b9a:	e06f      	b.n	8004c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d00b      	beq.n	8004bc0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	7c12      	ldrb	r2, [r2, #16]
 8004bb4:	f107 0108 	add.w	r1, r7, #8
 8004bb8:	4610      	mov	r0, r2
 8004bba:	4798      	blx	r3
 8004bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bbe:	e05d      	b.n	8004c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa61 	bl	800508a <USBD_CtlError>
            err++;
 8004bc8:	7afb      	ldrb	r3, [r7, #11]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8004bce:	e055      	b.n	8004c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bd6:	691b      	ldr	r3, [r3, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00b      	beq.n	8004bf4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	7c12      	ldrb	r2, [r2, #16]
 8004be8:	f107 0108 	add.w	r1, r7, #8
 8004bec:	4610      	mov	r0, r2
 8004bee:	4798      	blx	r3
 8004bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bf2:	e043      	b.n	8004c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004bf4:	6839      	ldr	r1, [r7, #0]
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 fa47 	bl	800508a <USBD_CtlError>
            err++;
 8004bfc:	7afb      	ldrb	r3, [r7, #11]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	72fb      	strb	r3, [r7, #11]
          break;
 8004c02:	e03b      	b.n	8004c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c0a:	695b      	ldr	r3, [r3, #20]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00b      	beq.n	8004c28 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	7c12      	ldrb	r2, [r2, #16]
 8004c1c:	f107 0108 	add.w	r1, r7, #8
 8004c20:	4610      	mov	r0, r2
 8004c22:	4798      	blx	r3
 8004c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c26:	e029      	b.n	8004c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004c28:	6839      	ldr	r1, [r7, #0]
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fa2d 	bl	800508a <USBD_CtlError>
            err++;
 8004c30:	7afb      	ldrb	r3, [r7, #11]
 8004c32:	3301      	adds	r3, #1
 8004c34:	72fb      	strb	r3, [r7, #11]
          break;
 8004c36:	e021      	b.n	8004c7c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	7c12      	ldrb	r2, [r2, #16]
 8004c50:	f107 0108 	add.w	r1, r7, #8
 8004c54:	4610      	mov	r0, r2
 8004c56:	4798      	blx	r3
 8004c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c5a:	e00f      	b.n	8004c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004c5c:	6839      	ldr	r1, [r7, #0]
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa13 	bl	800508a <USBD_CtlError>
            err++;
 8004c64:	7afb      	ldrb	r3, [r7, #11]
 8004c66:	3301      	adds	r3, #1
 8004c68:	72fb      	strb	r3, [r7, #11]
          break;
 8004c6a:	e007      	b.n	8004c7c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004c6c:	6839      	ldr	r1, [r7, #0]
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fa0b 	bl	800508a <USBD_CtlError>
          err++;
 8004c74:	7afb      	ldrb	r3, [r7, #11]
 8004c76:	3301      	adds	r3, #1
 8004c78:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004c7a:	e038      	b.n	8004cee <USBD_GetDescriptor+0x2da>
 8004c7c:	e037      	b.n	8004cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	7c1b      	ldrb	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d109      	bne.n	8004c9a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8e:	f107 0208 	add.w	r2, r7, #8
 8004c92:	4610      	mov	r0, r2
 8004c94:	4798      	blx	r3
 8004c96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004c98:	e029      	b.n	8004cee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f9f4 	bl	800508a <USBD_CtlError>
        err++;
 8004ca2:	7afb      	ldrb	r3, [r7, #11]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8004ca8:	e021      	b.n	8004cee <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	7c1b      	ldrb	r3, [r3, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	f107 0208 	add.w	r2, r7, #8
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4798      	blx	r3
 8004cc2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	2207      	movs	r2, #7
 8004cca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004ccc:	e00f      	b.n	8004cee <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8004cce:	6839      	ldr	r1, [r7, #0]
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f000 f9da 	bl	800508a <USBD_CtlError>
        err++;
 8004cd6:	7afb      	ldrb	r3, [r7, #11]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	72fb      	strb	r3, [r7, #11]
      break;
 8004cdc:	e007      	b.n	8004cee <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8004cde:	6839      	ldr	r1, [r7, #0]
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f000 f9d2 	bl	800508a <USBD_CtlError>
      err++;
 8004ce6:	7afb      	ldrb	r3, [r7, #11]
 8004ce8:	3301      	adds	r3, #1
 8004cea:	72fb      	strb	r3, [r7, #11]
      break;
 8004cec:	bf00      	nop
  }

  if (err != 0U)
 8004cee:	7afb      	ldrb	r3, [r7, #11]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d11c      	bne.n	8004d2e <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004cf4:	893b      	ldrh	r3, [r7, #8]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d011      	beq.n	8004d1e <USBD_GetDescriptor+0x30a>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	88db      	ldrh	r3, [r3, #6]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00d      	beq.n	8004d1e <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	88da      	ldrh	r2, [r3, #6]
 8004d06:	893b      	ldrh	r3, [r7, #8]
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	bf28      	it	cs
 8004d0c:	4613      	movcs	r3, r2
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d12:	893b      	ldrh	r3, [r7, #8]
 8004d14:	461a      	mov	r2, r3
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fa21 	bl	8005160 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	88db      	ldrh	r3, [r3, #6]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d104      	bne.n	8004d30 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004d26:	6878      	ldr	r0, [r7, #4]
 8004d28:	f000 fa78 	bl	800521c <USBD_CtlSendStatus>
 8004d2c:	e000      	b.n	8004d30 <USBD_GetDescriptor+0x31c>
    return;
 8004d2e:	bf00      	nop
    }
  }
}
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop

08004d38 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	889b      	ldrh	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d130      	bne.n	8004dac <USBD_SetAddress+0x74>
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	88db      	ldrh	r3, [r3, #6]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d12c      	bne.n	8004dac <USBD_SetAddress+0x74>
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	885b      	ldrh	r3, [r3, #2]
 8004d56:	2b7f      	cmp	r3, #127	; 0x7f
 8004d58:	d828      	bhi.n	8004dac <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	885b      	ldrh	r3, [r3, #2]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d64:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d104      	bne.n	8004d7a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004d70:	6839      	ldr	r1, [r7, #0]
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 f989 	bl	800508a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004d78:	e01c      	b.n	8004db4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	7bfa      	ldrb	r2, [r7, #15]
 8004d7e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	4619      	mov	r1, r3
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 ff26 	bl	8005bd8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f000 fa45 	bl	800521c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004d92:	7bfb      	ldrb	r3, [r7, #15]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d004      	beq.n	8004da2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004da0:	e008      	b.n	8004db4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004daa:	e003      	b.n	8004db4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004dac:	6839      	ldr	r1, [r7, #0]
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 f96b 	bl	800508a <USBD_CtlError>
  }
}
 8004db4:	bf00      	nop
 8004db6:	3710      	adds	r7, #16
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	885b      	ldrh	r3, [r3, #2]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	4b41      	ldr	r3, [pc, #260]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004dce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004dd0:	4b40      	ldr	r3, [pc, #256]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d904      	bls.n	8004de2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004dd8:	6839      	ldr	r1, [r7, #0]
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f955 	bl	800508a <USBD_CtlError>
 8004de0:	e075      	b.n	8004ece <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d002      	beq.n	8004df2 <USBD_SetConfig+0x36>
 8004dec:	2b03      	cmp	r3, #3
 8004dee:	d023      	beq.n	8004e38 <USBD_SetConfig+0x7c>
 8004df0:	e062      	b.n	8004eb8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004df2:	4b38      	ldr	r3, [pc, #224]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d01a      	beq.n	8004e30 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004dfa:	4b36      	ldr	r3, [pc, #216]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2203      	movs	r2, #3
 8004e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e0c:	4b31      	ldr	r3, [pc, #196]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	4619      	mov	r1, r3
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7ff f9c6 	bl	80041a4 <USBD_SetClassConfig>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d104      	bne.n	8004e28 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004e1e:	6839      	ldr	r1, [r7, #0]
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 f932 	bl	800508a <USBD_CtlError>
            return;
 8004e26:	e052      	b.n	8004ece <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	f000 f9f7 	bl	800521c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e2e:	e04e      	b.n	8004ece <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f9f3 	bl	800521c <USBD_CtlSendStatus>
        break;
 8004e36:	e04a      	b.n	8004ece <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004e38:	4b26      	ldr	r3, [pc, #152]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d112      	bne.n	8004e66 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2202      	movs	r2, #2
 8004e44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004e48:	4b22      	ldr	r3, [pc, #136]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004e52:	4b20      	ldr	r3, [pc, #128]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004e54:	781b      	ldrb	r3, [r3, #0]
 8004e56:	4619      	mov	r1, r3
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f7ff f9c2 	bl	80041e2 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f9dc 	bl	800521c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e64:	e033      	b.n	8004ece <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004e66:	4b1b      	ldr	r3, [pc, #108]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d01d      	beq.n	8004eb0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f7ff f9b0 	bl	80041e2 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004e82:	4b14      	ldr	r3, [pc, #80]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	461a      	mov	r2, r3
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e8c:	4b11      	ldr	r3, [pc, #68]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff f986 	bl	80041a4 <USBD_SetClassConfig>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b02      	cmp	r3, #2
 8004e9c:	d104      	bne.n	8004ea8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004e9e:	6839      	ldr	r1, [r7, #0]
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f000 f8f2 	bl	800508a <USBD_CtlError>
            return;
 8004ea6:	e012      	b.n	8004ece <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f9b7 	bl	800521c <USBD_CtlSendStatus>
        break;
 8004eae:	e00e      	b.n	8004ece <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f000 f9b3 	bl	800521c <USBD_CtlSendStatus>
        break;
 8004eb6:	e00a      	b.n	8004ece <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004eb8:	6839      	ldr	r1, [r7, #0]
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	f000 f8e5 	bl	800508a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004ec0:	4b04      	ldr	r3, [pc, #16]	; (8004ed4 <USBD_SetConfig+0x118>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff f98b 	bl	80041e2 <USBD_ClrClassConfig>
        break;
 8004ecc:	bf00      	nop
    }
  }
}
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	2000019c 	.word	0x2000019c

08004ed8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	88db      	ldrh	r3, [r3, #6]
 8004ee6:	2b01      	cmp	r3, #1
 8004ee8:	d004      	beq.n	8004ef4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004eea:	6839      	ldr	r1, [r7, #0]
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f000 f8cc 	bl	800508a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004ef2:	e021      	b.n	8004f38 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	db17      	blt.n	8004f2e <USBD_GetConfig+0x56>
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	dd02      	ble.n	8004f08 <USBD_GetConfig+0x30>
 8004f02:	2b03      	cmp	r3, #3
 8004f04:	d00b      	beq.n	8004f1e <USBD_GetConfig+0x46>
 8004f06:	e012      	b.n	8004f2e <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	3308      	adds	r3, #8
 8004f12:	2201      	movs	r2, #1
 8004f14:	4619      	mov	r1, r3
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f922 	bl	8005160 <USBD_CtlSendData>
        break;
 8004f1c:	e00c      	b.n	8004f38 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2201      	movs	r2, #1
 8004f24:	4619      	mov	r1, r3
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f91a 	bl	8005160 <USBD_CtlSendData>
        break;
 8004f2c:	e004      	b.n	8004f38 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004f2e:	6839      	ldr	r1, [r7, #0]
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f8aa 	bl	800508a <USBD_CtlError>
        break;
 8004f36:	bf00      	nop
}
 8004f38:	bf00      	nop
 8004f3a:	3708      	adds	r7, #8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f50:	3b01      	subs	r3, #1
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d81e      	bhi.n	8004f94 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	88db      	ldrh	r3, [r3, #6]
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d004      	beq.n	8004f68 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004f5e:	6839      	ldr	r1, [r7, #0]
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f892 	bl	800508a <USBD_CtlError>
        break;
 8004f66:	e01a      	b.n	8004f9e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d005      	beq.n	8004f84 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	f043 0202 	orr.w	r2, r3, #2
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	330c      	adds	r3, #12
 8004f88:	2202      	movs	r2, #2
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f8e7 	bl	8005160 <USBD_CtlSendData>
      break;
 8004f92:	e004      	b.n	8004f9e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 f877 	bl	800508a <USBD_CtlError>
      break;
 8004f9c:	bf00      	nop
  }
}
 8004f9e:	bf00      	nop
 8004fa0:	3708      	adds	r7, #8
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b082      	sub	sp, #8
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	885b      	ldrh	r3, [r3, #2]
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d106      	bne.n	8004fc6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 f92b 	bl	800521c <USBD_CtlSendStatus>
  }
}
 8004fc6:	bf00      	nop
 8004fc8:	3708      	adds	r7, #8
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fde:	3b01      	subs	r3, #1
 8004fe0:	2b02      	cmp	r3, #2
 8004fe2:	d80b      	bhi.n	8004ffc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	885b      	ldrh	r3, [r3, #2]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d10c      	bne.n	8005006 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 f911 	bl	800521c <USBD_CtlSendStatus>
      }
      break;
 8004ffa:	e004      	b.n	8005006 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8004ffc:	6839      	ldr	r1, [r7, #0]
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 f843 	bl	800508a <USBD_CtlError>
      break;
 8005004:	e000      	b.n	8005008 <USBD_ClrFeature+0x3a>
      break;
 8005006:	bf00      	nop
  }
}
 8005008:	bf00      	nop
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	781a      	ldrb	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	785a      	ldrb	r2, [r3, #1]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	3302      	adds	r3, #2
 800502e:	781b      	ldrb	r3, [r3, #0]
 8005030:	b29a      	uxth	r2, r3
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	3303      	adds	r3, #3
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	b29b      	uxth	r3, r3
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	b29b      	uxth	r3, r3
 800503e:	4413      	add	r3, r2
 8005040:	b29a      	uxth	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	3304      	adds	r3, #4
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	b29a      	uxth	r2, r3
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	3305      	adds	r3, #5
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	b29b      	uxth	r3, r3
 800505a:	4413      	add	r3, r2
 800505c:	b29a      	uxth	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	3306      	adds	r3, #6
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	b29a      	uxth	r2, r3
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	3307      	adds	r3, #7
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	b29b      	uxth	r3, r3
 8005072:	021b      	lsls	r3, r3, #8
 8005074:	b29b      	uxth	r3, r3
 8005076:	4413      	add	r3, r2
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	80da      	strh	r2, [r3, #6]

}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b082      	sub	sp, #8
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
 8005092:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005094:	2180      	movs	r1, #128	; 0x80
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 fd3a 	bl	8005b10 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800509c:	2100      	movs	r1, #0
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 fd36 	bl	8005b10 <USBD_LL_StallEP>
}
 80050a4:	bf00      	nop
 80050a6:	3708      	adds	r7, #8
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b086      	sub	sp, #24
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	60b9      	str	r1, [r7, #8]
 80050b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80050b8:	2300      	movs	r3, #0
 80050ba:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d032      	beq.n	8005128 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80050c2:	68f8      	ldr	r0, [r7, #12]
 80050c4:	f000 f834 	bl	8005130 <USBD_GetLen>
 80050c8:	4603      	mov	r3, r0
 80050ca:	3301      	adds	r3, #1
 80050cc:	b29b      	uxth	r3, r3
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80050d6:	7dfb      	ldrb	r3, [r7, #23]
 80050d8:	1c5a      	adds	r2, r3, #1
 80050da:	75fa      	strb	r2, [r7, #23]
 80050dc:	461a      	mov	r2, r3
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	4413      	add	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	7812      	ldrb	r2, [r2, #0]
 80050e6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80050e8:	7dfb      	ldrb	r3, [r7, #23]
 80050ea:	1c5a      	adds	r2, r3, #1
 80050ec:	75fa      	strb	r2, [r7, #23]
 80050ee:	461a      	mov	r2, r3
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	4413      	add	r3, r2
 80050f4:	2203      	movs	r2, #3
 80050f6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80050f8:	e012      	b.n	8005120 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	1c5a      	adds	r2, r3, #1
 80050fe:	60fa      	str	r2, [r7, #12]
 8005100:	7dfa      	ldrb	r2, [r7, #23]
 8005102:	1c51      	adds	r1, r2, #1
 8005104:	75f9      	strb	r1, [r7, #23]
 8005106:	4611      	mov	r1, r2
 8005108:	68ba      	ldr	r2, [r7, #8]
 800510a:	440a      	add	r2, r1
 800510c:	781b      	ldrb	r3, [r3, #0]
 800510e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005110:	7dfb      	ldrb	r3, [r7, #23]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	75fa      	strb	r2, [r7, #23]
 8005116:	461a      	mov	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4413      	add	r3, r2
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	781b      	ldrb	r3, [r3, #0]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d1e8      	bne.n	80050fa <USBD_GetString+0x4e>
    }
  }
}
 8005128:	bf00      	nop
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005130:	b480      	push	{r7}
 8005132:	b085      	sub	sp, #20
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800513c:	e005      	b.n	800514a <USBD_GetLen+0x1a>
  {
    len++;
 800513e:	7bfb      	ldrb	r3, [r7, #15]
 8005140:	3301      	adds	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	3301      	adds	r3, #1
 8005148:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d1f5      	bne.n	800513e <USBD_GetLen+0xe>
  }

  return len;
 8005152:	7bfb      	ldrb	r3, [r7, #15]
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	4613      	mov	r3, r2
 800516c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2202      	movs	r2, #2
 8005172:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005176:	88fa      	ldrh	r2, [r7, #6]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800517c:	88fa      	ldrh	r2, [r7, #6]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005182:	88fb      	ldrh	r3, [r7, #6]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	2100      	movs	r1, #0
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 fd44 	bl	8005c16 <USBD_LL_Transmit>

  return USBD_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	4613      	mov	r3, r2
 80051a4:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	2100      	movs	r1, #0
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fd32 	bl	8005c16 <USBD_LL_Transmit>

  return USBD_OK;
 80051b2:	2300      	movs	r3, #0
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}

080051bc <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	b084      	sub	sp, #16
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	60f8      	str	r0, [r7, #12]
 80051c4:	60b9      	str	r1, [r7, #8]
 80051c6:	4613      	mov	r3, r2
 80051c8:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2203      	movs	r2, #3
 80051ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80051da:	88fa      	ldrh	r2, [r7, #6]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80051e2:	88fb      	ldrh	r3, [r7, #6]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	2100      	movs	r1, #0
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 fd37 	bl	8005c5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	4613      	mov	r3, r2
 8005204:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005206:	88fb      	ldrh	r3, [r7, #6]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	2100      	movs	r1, #0
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fd25 	bl	8005c5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b082      	sub	sp, #8
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2204      	movs	r2, #4
 8005228:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800522c:	2300      	movs	r3, #0
 800522e:	2200      	movs	r2, #0
 8005230:	2100      	movs	r1, #0
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fcef 	bl	8005c16 <USBD_LL_Transmit>

  return USBD_OK;
 8005238:	2300      	movs	r3, #0
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b082      	sub	sp, #8
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2205      	movs	r2, #5
 800524e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005252:	2300      	movs	r3, #0
 8005254:	2200      	movs	r2, #0
 8005256:	2100      	movs	r1, #0
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fcff 	bl	8005c5c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800525e:	2300      	movs	r3, #0
}
 8005260:	4618      	mov	r0, r3
 8005262:	3708      	adds	r7, #8
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800526c:	f7fa ffd4 	bl	8000218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005270:	f000 f807 	bl	8005282 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005274:	f000 f8b8 	bl	80053e8 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8005278:	f000 f9b4 	bl	80055e4 <MX_USB_Device_Init>
  MX_FDCAN1_Init();
 800527c:	f000 f86c 	bl	8005358 <MX_FDCAN1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005280:	e7fe      	b.n	8005280 <main+0x18>

08005282 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b0a4      	sub	sp, #144	; 0x90
 8005286:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005288:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800528c:	2238      	movs	r2, #56	; 0x38
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fef5 	bl	8006080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005296:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]
 800529e:	605a      	str	r2, [r3, #4]
 80052a0:	609a      	str	r2, [r3, #8]
 80052a2:	60da      	str	r2, [r3, #12]
 80052a4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80052a6:	463b      	mov	r3, r7
 80052a8:	2244      	movs	r2, #68	; 0x44
 80052aa:	2100      	movs	r1, #0
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 fee7 	bl	8006080 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80052b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80052b6:	f7fc fb77 	bl	80019a8 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80052ba:	2302      	movs	r3, #2
 80052bc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80052be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052c2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80052c4:	2340      	movs	r3, #64	; 0x40
 80052c6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80052c8:	2302      	movs	r3, #2
 80052ca:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80052cc:	2302      	movs	r3, #2
 80052ce:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80052d0:	2302      	movs	r3, #2
 80052d2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 12;
 80052d4:	230c      	movs	r3, #12
 80052d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80052da:	2302      	movs	r3, #2
 80052dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80052e0:	2302      	movs	r3, #2
 80052e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80052e6:	2302      	movs	r3, #2
 80052e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80052ec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7fc fbfd 	bl	8001af0 <HAL_RCC_OscConfig>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d001      	beq.n	8005300 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80052fc:	f000 f8a4 	bl	8005448 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005300:	230f      	movs	r3, #15
 8005302:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005304:	2301      	movs	r3, #1
 8005306:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005308:	2300      	movs	r3, #0
 800530a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800530c:	2300      	movs	r3, #0
 800530e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005310:	2300      	movs	r3, #0
 8005312:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005314:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005318:	2100      	movs	r1, #0
 800531a:	4618      	mov	r0, r3
 800531c:	f7fc ff00 	bl	8002120 <HAL_RCC_ClockConfig>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005326:	f000 f88f 	bl	8005448 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_FDCAN;
 800532a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800532e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8005330:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005334:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005336:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800533c:	463b      	mov	r3, r7
 800533e:	4618      	mov	r0, r3
 8005340:	f7fd f8d2 	bl	80024e8 <HAL_RCCEx_PeriphCLKConfig>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d001      	beq.n	800534e <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800534a:	f000 f87d 	bl	8005448 <Error_Handler>
  }
}
 800534e:	bf00      	nop
 8005350:	3790      	adds	r7, #144	; 0x90
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
	...

08005358 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800535c:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 800535e:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <MX_FDCAN1_Init+0x8c>)
 8005360:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8005362:	4b1f      	ldr	r3, [pc, #124]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 8005364:	2200      	movs	r2, #0
 8005366:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8005368:	4b1d      	ldr	r3, [pc, #116]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 800536a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800536e:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8005370:	4b1b      	ldr	r3, [pc, #108]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 8005372:	2200      	movs	r2, #0
 8005374:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8005376:	4b1a      	ldr	r3, [pc, #104]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 8005378:	2200      	movs	r2, #0
 800537a:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 800537c:	4b18      	ldr	r3, [pc, #96]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 800537e:	2200      	movs	r2, #0
 8005380:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8005382:	4b17      	ldr	r3, [pc, #92]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 8005384:	2200      	movs	r2, #0
 8005386:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8005388:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 800538a:	2201      	movs	r2, #1
 800538c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 800538e:	4b14      	ldr	r3, [pc, #80]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 8005390:	2201      	movs	r2, #1
 8005392:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8005394:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 8005396:	2202      	movs	r2, #2
 8005398:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 800539a:	4b11      	ldr	r3, [pc, #68]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 800539c:	2202      	movs	r2, #2
 800539e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80053a0:	4b0f      	ldr	r3, [pc, #60]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 80053a8:	2201      	movs	r2, #1
 80053aa:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80053ac:	4b0c      	ldr	r3, [pc, #48]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80053b2:	4b0b      	ldr	r3, [pc, #44]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 80053b4:	2201      	movs	r2, #1
 80053b6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 80053b8:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80053be:	4b08      	ldr	r3, [pc, #32]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80053ca:	4805      	ldr	r0, [pc, #20]	; (80053e0 <MX_FDCAN1_Init+0x88>)
 80053cc:	f7fb f8a4 	bl	8000518 <HAL_FDCAN_Init>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d001      	beq.n	80053da <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80053d6:	f000 f837 	bl	8005448 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80053da:	bf00      	nop
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	200003c4 	.word	0x200003c4
 80053e4:	40006400 	.word	0x40006400

080053e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80053ee:	4b15      	ldr	r3, [pc, #84]	; (8005444 <MX_GPIO_Init+0x5c>)
 80053f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f2:	4a14      	ldr	r2, [pc, #80]	; (8005444 <MX_GPIO_Init+0x5c>)
 80053f4:	f043 0320 	orr.w	r3, r3, #32
 80053f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80053fa:	4b12      	ldr	r3, [pc, #72]	; (8005444 <MX_GPIO_Init+0x5c>)
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	f003 0320 	and.w	r3, r3, #32
 8005402:	60fb      	str	r3, [r7, #12]
 8005404:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005406:	4b0f      	ldr	r3, [pc, #60]	; (8005444 <MX_GPIO_Init+0x5c>)
 8005408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540a:	4a0e      	ldr	r2, [pc, #56]	; (8005444 <MX_GPIO_Init+0x5c>)
 800540c:	f043 0301 	orr.w	r3, r3, #1
 8005410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005412:	4b0c      	ldr	r3, [pc, #48]	; (8005444 <MX_GPIO_Init+0x5c>)
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	60bb      	str	r3, [r7, #8]
 800541c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800541e:	4b09      	ldr	r3, [pc, #36]	; (8005444 <MX_GPIO_Init+0x5c>)
 8005420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005422:	4a08      	ldr	r2, [pc, #32]	; (8005444 <MX_GPIO_Init+0x5c>)
 8005424:	f043 0302 	orr.w	r3, r3, #2
 8005428:	64d3      	str	r3, [r2, #76]	; 0x4c
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <MX_GPIO_Init+0x5c>)
 800542c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542e:	f003 0302 	and.w	r3, r3, #2
 8005432:	607b      	str	r3, [r7, #4]
 8005434:	687b      	ldr	r3, [r7, #4]

}
 8005436:	bf00      	nop
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr
 8005442:	bf00      	nop
 8005444:	40021000 	.word	0x40021000

08005448 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
	...

08005458 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800545c:	4b05      	ldr	r3, [pc, #20]	; (8005474 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4a04      	ldr	r2, [pc, #16]	; (8005474 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8005462:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005466:	6093      	str	r3, [r2, #8]
}
 8005468:	bf00      	nop
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40007000 	.word	0x40007000

08005478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800547e:	4b0f      	ldr	r3, [pc, #60]	; (80054bc <HAL_MspInit+0x44>)
 8005480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005482:	4a0e      	ldr	r2, [pc, #56]	; (80054bc <HAL_MspInit+0x44>)
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	6613      	str	r3, [r2, #96]	; 0x60
 800548a:	4b0c      	ldr	r3, [pc, #48]	; (80054bc <HAL_MspInit+0x44>)
 800548c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	607b      	str	r3, [r7, #4]
 8005494:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005496:	4b09      	ldr	r3, [pc, #36]	; (80054bc <HAL_MspInit+0x44>)
 8005498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800549a:	4a08      	ldr	r2, [pc, #32]	; (80054bc <HAL_MspInit+0x44>)
 800549c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054a0:	6593      	str	r3, [r2, #88]	; 0x58
 80054a2:	4b06      	ldr	r3, [pc, #24]	; (80054bc <HAL_MspInit+0x44>)
 80054a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054aa:	603b      	str	r3, [r7, #0]
 80054ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80054ae:	f7ff ffd3 	bl	8005458 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054b2:	bf00      	nop
 80054b4:	3708      	adds	r7, #8
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40021000 	.word	0x40021000

080054c0 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b08a      	sub	sp, #40	; 0x28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054c8:	f107 0314 	add.w	r3, r7, #20
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
 80054d0:	605a      	str	r2, [r3, #4]
 80054d2:	609a      	str	r2, [r3, #8]
 80054d4:	60da      	str	r2, [r3, #12]
 80054d6:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a17      	ldr	r2, [pc, #92]	; (800553c <HAL_FDCAN_MspInit+0x7c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d128      	bne.n	8005534 <HAL_FDCAN_MspInit+0x74>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80054e2:	4b17      	ldr	r3, [pc, #92]	; (8005540 <HAL_FDCAN_MspInit+0x80>)
 80054e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e6:	4a16      	ldr	r2, [pc, #88]	; (8005540 <HAL_FDCAN_MspInit+0x80>)
 80054e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80054ec:	6593      	str	r3, [r2, #88]	; 0x58
 80054ee:	4b14      	ldr	r3, [pc, #80]	; (8005540 <HAL_FDCAN_MspInit+0x80>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054f6:	613b      	str	r3, [r7, #16]
 80054f8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054fa:	4b11      	ldr	r3, [pc, #68]	; (8005540 <HAL_FDCAN_MspInit+0x80>)
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	4a10      	ldr	r2, [pc, #64]	; (8005540 <HAL_FDCAN_MspInit+0x80>)
 8005500:	f043 0302 	orr.w	r3, r3, #2
 8005504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005506:	4b0e      	ldr	r3, [pc, #56]	; (8005540 <HAL_FDCAN_MspInit+0x80>)
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	60fb      	str	r3, [r7, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005512:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005518:	2302      	movs	r3, #2
 800551a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800551c:	2300      	movs	r3, #0
 800551e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005520:	2300      	movs	r3, #0
 8005522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005524:	2309      	movs	r3, #9
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005528:	f107 0314 	add.w	r3, r7, #20
 800552c:	4619      	mov	r1, r3
 800552e:	4805      	ldr	r0, [pc, #20]	; (8005544 <HAL_FDCAN_MspInit+0x84>)
 8005530:	f7fb f9a2 	bl	8000878 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8005534:	bf00      	nop
 8005536:	3728      	adds	r7, #40	; 0x28
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40006400 	.word	0x40006400
 8005540:	40021000 	.word	0x40021000
 8005544:	48000400 	.word	0x48000400

08005548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005548:	b480      	push	{r7}
 800554a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800554c:	bf00      	nop
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005556:	b480      	push	{r7}
 8005558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800555a:	e7fe      	b.n	800555a <HardFault_Handler+0x4>

0800555c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800555c:	b480      	push	{r7}
 800555e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005560:	e7fe      	b.n	8005560 <MemManage_Handler+0x4>

08005562 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005562:	b480      	push	{r7}
 8005564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005566:	e7fe      	b.n	8005566 <BusFault_Handler+0x4>

08005568 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800556c:	e7fe      	b.n	800556c <UsageFault_Handler+0x4>

0800556e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800556e:	b480      	push	{r7}
 8005570:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005572:	bf00      	nop
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800557c:	b480      	push	{r7}
 800557e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005580:	bf00      	nop
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800558a:	b480      	push	{r7}
 800558c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800558e:	bf00      	nop
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800559c:	f7fa fe8e 	bl	80002bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80055a0:	bf00      	nop
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80055a8:	4802      	ldr	r0, [pc, #8]	; (80055b4 <USB_LP_IRQHandler+0x10>)
 80055aa:	f7fb fbc4 	bl	8000d36 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80055ae:	bf00      	nop
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20000ebc 	.word	0x20000ebc

080055b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80055b8:	b480      	push	{r7}
 80055ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80055bc:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <SystemInit+0x28>)
 80055be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c2:	4a07      	ldr	r2, [pc, #28]	; (80055e0 <SystemInit+0x28>)
 80055c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80055cc:	4b04      	ldr	r3, [pc, #16]	; (80055e0 <SystemInit+0x28>)
 80055ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055d2:	609a      	str	r2, [r3, #8]
#endif
}
 80055d4:	bf00      	nop
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr
 80055de:	bf00      	nop
 80055e0:	e000ed00 	.word	0xe000ed00

080055e4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80055e8:	2200      	movs	r2, #0
 80055ea:	4912      	ldr	r1, [pc, #72]	; (8005634 <MX_USB_Device_Init+0x50>)
 80055ec:	4812      	ldr	r0, [pc, #72]	; (8005638 <MX_USB_Device_Init+0x54>)
 80055ee:	f7fe fd7d 	bl	80040ec <USBD_Init>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d001      	beq.n	80055fc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80055f8:	f7ff ff26 	bl	8005448 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80055fc:	490f      	ldr	r1, [pc, #60]	; (800563c <MX_USB_Device_Init+0x58>)
 80055fe:	480e      	ldr	r0, [pc, #56]	; (8005638 <MX_USB_Device_Init+0x54>)
 8005600:	f7fe fd9f 	bl	8004142 <USBD_RegisterClass>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d001      	beq.n	800560e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800560a:	f7ff ff1d 	bl	8005448 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800560e:	490c      	ldr	r1, [pc, #48]	; (8005640 <MX_USB_Device_Init+0x5c>)
 8005610:	4809      	ldr	r0, [pc, #36]	; (8005638 <MX_USB_Device_Init+0x54>)
 8005612:	f7fe fccd 	bl	8003fb0 <USBD_CDC_RegisterInterface>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d001      	beq.n	8005620 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800561c:	f7ff ff14 	bl	8005448 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8005620:	4805      	ldr	r0, [pc, #20]	; (8005638 <MX_USB_Device_Init+0x54>)
 8005622:	f7fe fda8 	bl	8004176 <USBD_Start>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800562c:	f7ff ff0c 	bl	8005448 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8005630:	bf00      	nop
 8005632:	bd80      	pop	{r7, pc}
 8005634:	2000012c 	.word	0x2000012c
 8005638:	20000428 	.word	0x20000428
 800563c:	20000014 	.word	0x20000014
 8005640:	2000011c 	.word	0x2000011c

08005644 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005648:	2200      	movs	r2, #0
 800564a:	4905      	ldr	r1, [pc, #20]	; (8005660 <CDC_Init_FS+0x1c>)
 800564c:	4805      	ldr	r0, [pc, #20]	; (8005664 <CDC_Init_FS+0x20>)
 800564e:	f7fe fcc6 	bl	8003fde <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005652:	4905      	ldr	r1, [pc, #20]	; (8005668 <CDC_Init_FS+0x24>)
 8005654:	4803      	ldr	r0, [pc, #12]	; (8005664 <CDC_Init_FS+0x20>)
 8005656:	f7fe fcdc 	bl	8004012 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800565a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800565c:	4618      	mov	r0, r3
 800565e:	bd80      	pop	{r7, pc}
 8005660:	20000ad4 	.word	0x20000ad4
 8005664:	20000428 	.word	0x20000428
 8005668:	200006ec 	.word	0x200006ec

0800566c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005670:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005672:	4618      	mov	r0, r3
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	6039      	str	r1, [r7, #0]
 8005686:	71fb      	strb	r3, [r7, #7]
 8005688:	4613      	mov	r3, r2
 800568a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800568c:	79fb      	ldrb	r3, [r7, #7]
 800568e:	2b23      	cmp	r3, #35	; 0x23
 8005690:	d84a      	bhi.n	8005728 <CDC_Control_FS+0xac>
 8005692:	a201      	add	r2, pc, #4	; (adr r2, 8005698 <CDC_Control_FS+0x1c>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	08005729 	.word	0x08005729
 800569c:	08005729 	.word	0x08005729
 80056a0:	08005729 	.word	0x08005729
 80056a4:	08005729 	.word	0x08005729
 80056a8:	08005729 	.word	0x08005729
 80056ac:	08005729 	.word	0x08005729
 80056b0:	08005729 	.word	0x08005729
 80056b4:	08005729 	.word	0x08005729
 80056b8:	08005729 	.word	0x08005729
 80056bc:	08005729 	.word	0x08005729
 80056c0:	08005729 	.word	0x08005729
 80056c4:	08005729 	.word	0x08005729
 80056c8:	08005729 	.word	0x08005729
 80056cc:	08005729 	.word	0x08005729
 80056d0:	08005729 	.word	0x08005729
 80056d4:	08005729 	.word	0x08005729
 80056d8:	08005729 	.word	0x08005729
 80056dc:	08005729 	.word	0x08005729
 80056e0:	08005729 	.word	0x08005729
 80056e4:	08005729 	.word	0x08005729
 80056e8:	08005729 	.word	0x08005729
 80056ec:	08005729 	.word	0x08005729
 80056f0:	08005729 	.word	0x08005729
 80056f4:	08005729 	.word	0x08005729
 80056f8:	08005729 	.word	0x08005729
 80056fc:	08005729 	.word	0x08005729
 8005700:	08005729 	.word	0x08005729
 8005704:	08005729 	.word	0x08005729
 8005708:	08005729 	.word	0x08005729
 800570c:	08005729 	.word	0x08005729
 8005710:	08005729 	.word	0x08005729
 8005714:	08005729 	.word	0x08005729
 8005718:	08005729 	.word	0x08005729
 800571c:	08005729 	.word	0x08005729
 8005720:	08005729 	.word	0x08005729
 8005724:	08005729 	.word	0x08005729
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005728:	bf00      	nop
  }

  return (USBD_OK);
 800572a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800572c:	4618      	mov	r0, r3
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4808      	ldr	r0, [pc, #32]	; (8005768 <CDC_Receive_FS+0x30>)
 8005746:	f7fe fc64 	bl	8004012 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800574a:	4807      	ldr	r0, [pc, #28]	; (8005768 <CDC_Receive_FS+0x30>)
 800574c:	f7fe fca4 	bl	8004098 <USBD_CDC_ReceivePacket>
  CDC_Transmit_FS(Buf, *Len);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	b29b      	uxth	r3, r3
 8005756:	4619      	mov	r1, r3
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 f807 	bl	800576c <CDC_Transmit_FS>
  return (USBD_OK);
 800575e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005760:	4618      	mov	r0, r3
 8005762:	3708      	adds	r7, #8
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000428 	.word	0x20000428

0800576c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <CDC_Transmit_FS+0x48>)
 800577e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005782:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800578a:	2b00      	cmp	r3, #0
 800578c:	d001      	beq.n	8005792 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800578e:	2301      	movs	r3, #1
 8005790:	e00b      	b.n	80057aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005792:	887b      	ldrh	r3, [r7, #2]
 8005794:	461a      	mov	r2, r3
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4806      	ldr	r0, [pc, #24]	; (80057b4 <CDC_Transmit_FS+0x48>)
 800579a:	f7fe fc20 	bl	8003fde <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800579e:	4805      	ldr	r0, [pc, #20]	; (80057b4 <CDC_Transmit_FS+0x48>)
 80057a0:	f7fe fc4b 	bl	800403a <USBD_CDC_TransmitPacket>
 80057a4:	4603      	mov	r3, r0
 80057a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80057a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	20000428 	.word	0x20000428

080057b8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c0:	f107 0314 	add.w	r3, r7, #20
 80057c4:	2200      	movs	r2, #0
 80057c6:	601a      	str	r2, [r3, #0]
 80057c8:	605a      	str	r2, [r3, #4]
 80057ca:	609a      	str	r2, [r3, #8]
 80057cc:	60da      	str	r2, [r3, #12]
 80057ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a1a      	ldr	r2, [pc, #104]	; (8005840 <HAL_PCD_MspInit+0x88>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d12d      	bne.n	8005836 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057da:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <HAL_PCD_MspInit+0x8c>)
 80057dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057de:	4a19      	ldr	r2, [pc, #100]	; (8005844 <HAL_PCD_MspInit+0x8c>)
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057e6:	4b17      	ldr	r3, [pc, #92]	; (8005844 <HAL_PCD_MspInit+0x8c>)
 80057e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	613b      	str	r3, [r7, #16]
 80057f0:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80057f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80057f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80057f8:	2303      	movs	r3, #3
 80057fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fc:	2300      	movs	r3, #0
 80057fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005800:	f107 0314 	add.w	r3, r7, #20
 8005804:	4619      	mov	r1, r3
 8005806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800580a:	f7fb f835 	bl	8000878 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800580e:	4b0d      	ldr	r3, [pc, #52]	; (8005844 <HAL_PCD_MspInit+0x8c>)
 8005810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005812:	4a0c      	ldr	r2, [pc, #48]	; (8005844 <HAL_PCD_MspInit+0x8c>)
 8005814:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005818:	6593      	str	r3, [r2, #88]	; 0x58
 800581a:	4b0a      	ldr	r3, [pc, #40]	; (8005844 <HAL_PCD_MspInit+0x8c>)
 800581c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800581e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005826:	2200      	movs	r2, #0
 8005828:	2100      	movs	r1, #0
 800582a:	2014      	movs	r0, #20
 800582c:	f7fa fe3f 	bl	80004ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8005830:	2014      	movs	r0, #20
 8005832:	f7fa fe56 	bl	80004e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005836:	bf00      	nop
 8005838:	3728      	adds	r7, #40	; 0x28
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40005c00 	.word	0x40005c00
 8005844:	40021000 	.word	0x40021000

08005848 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800585c:	4619      	mov	r1, r3
 800585e:	4610      	mov	r0, r2
 8005860:	f7fe fcd2 	bl	8004208 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	460b      	mov	r3, r1
 8005876:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 800587e:	78fb      	ldrb	r3, [r7, #3]
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	015b      	lsls	r3, r3, #5
 8005884:	4413      	add	r3, r2
 8005886:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	4619      	mov	r1, r3
 8005890:	f7fe fd05 	bl	800429e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	460b      	mov	r3, r1
 80058a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	687a      	ldr	r2, [r7, #4]
 80058b2:	015b      	lsls	r3, r3, #5
 80058b4:	4413      	add	r3, r2
 80058b6:	333c      	adds	r3, #60	; 0x3c
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	78fb      	ldrb	r3, [r7, #3]
 80058bc:	4619      	mov	r1, r3
 80058be:	f7fe fd5f 	bl	8004380 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b082      	sub	sp, #8
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80058d8:	4618      	mov	r0, r3
 80058da:	f7fe fe72 	bl	80045c2 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80058ee:	2301      	movs	r3, #1
 80058f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	2b02      	cmp	r3, #2
 80058f8:	d001      	beq.n	80058fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80058fa:	f7ff fda5 	bl	8005448 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005904:	7bfa      	ldrb	r2, [r7, #15]
 8005906:	4611      	mov	r1, r2
 8005908:	4618      	mov	r0, r3
 800590a:	f7fe fe1f 	bl	800454c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe fdd8 	bl	80044ca <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800591a:	bf00      	nop
 800591c:	3710      	adds	r7, #16
 800591e:	46bd      	mov	sp, r7
 8005920:	bd80      	pop	{r7, pc}
	...

08005924 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005932:	4618      	mov	r0, r3
 8005934:	f7fe fe1a 	bl	800456c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d005      	beq.n	800594c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005940:	4b04      	ldr	r3, [pc, #16]	; (8005954 <HAL_PCD_SuspendCallback+0x30>)
 8005942:	691b      	ldr	r3, [r3, #16]
 8005944:	4a03      	ldr	r2, [pc, #12]	; (8005954 <HAL_PCD_SuspendCallback+0x30>)
 8005946:	f043 0306 	orr.w	r3, r3, #6
 800594a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	e000ed00 	.word	0xe000ed00

08005958 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005968:	4b08      	ldr	r3, [pc, #32]	; (800598c <HAL_PCD_ResumeCallback+0x34>)
 800596a:	691b      	ldr	r3, [r3, #16]
 800596c:	4a07      	ldr	r2, [pc, #28]	; (800598c <HAL_PCD_ResumeCallback+0x34>)
 800596e:	f023 0306 	bic.w	r3, r3, #6
 8005972:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8005974:	f000 f9f6 	bl	8005d64 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fe09 	bl	8004596 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	e000ed00 	.word	0xe000ed00

08005990 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8005998:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <USBD_LL_Init+0xb8>)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80059a8:	4b27      	ldr	r3, [pc, #156]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059aa:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <USBD_LL_Init+0xbc>)
 80059ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80059ae:	4b26      	ldr	r3, [pc, #152]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059b0:	2208      	movs	r2, #8
 80059b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80059b4:	4b24      	ldr	r3, [pc, #144]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059b6:	2202      	movs	r2, #2
 80059b8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80059ba:	4b23      	ldr	r3, [pc, #140]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059bc:	2202      	movs	r2, #2
 80059be:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80059c0:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80059c6:	4b20      	ldr	r3, [pc, #128]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059c8:	2200      	movs	r2, #0
 80059ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80059cc:	4b1e      	ldr	r3, [pc, #120]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80059d2:	4b1d      	ldr	r3, [pc, #116]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059d4:	2200      	movs	r2, #0
 80059d6:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80059d8:	481b      	ldr	r0, [pc, #108]	; (8005a48 <USBD_LL_Init+0xb8>)
 80059da:	f7fb f8cf 	bl	8000b7c <HAL_PCD_Init>
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 80059e4:	f7ff fd30 	bl	8005448 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059ee:	2318      	movs	r3, #24
 80059f0:	2200      	movs	r2, #0
 80059f2:	2100      	movs	r1, #0
 80059f4:	f7fb ff70 	bl	80018d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80059fe:	2358      	movs	r3, #88	; 0x58
 8005a00:	2200      	movs	r2, #0
 8005a02:	2180      	movs	r1, #128	; 0x80
 8005a04:	f7fb ff68 	bl	80018d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a0e:	23c0      	movs	r3, #192	; 0xc0
 8005a10:	2200      	movs	r2, #0
 8005a12:	2181      	movs	r1, #129	; 0x81
 8005a14:	f7fb ff60 	bl	80018d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a1e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005a22:	2200      	movs	r2, #0
 8005a24:	2101      	movs	r1, #1
 8005a26:	f7fb ff57 	bl	80018d8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a34:	2200      	movs	r2, #0
 8005a36:	2182      	movs	r1, #130	; 0x82
 8005a38:	f7fb ff4e 	bl	80018d8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8005a3c:	2300      	movs	r3, #0
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3708      	adds	r7, #8
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	bf00      	nop
 8005a48:	20000ebc 	.word	0x20000ebc
 8005a4c:	40005c00 	.word	0x40005c00

08005a50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fb f943 	bl	8000cf2 <HAL_PCD_Start>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005a70:	7bfb      	ldrb	r3, [r7, #15]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f000 f97c 	bl	8005d70 <USBD_Get_USB_Status>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	4608      	mov	r0, r1
 8005a90:	4611      	mov	r1, r2
 8005a92:	461a      	mov	r2, r3
 8005a94:	4603      	mov	r3, r0
 8005a96:	70fb      	strb	r3, [r7, #3]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	70bb      	strb	r3, [r7, #2]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005aae:	78bb      	ldrb	r3, [r7, #2]
 8005ab0:	883a      	ldrh	r2, [r7, #0]
 8005ab2:	78f9      	ldrb	r1, [r7, #3]
 8005ab4:	f7fb fab2 	bl	800101c <HAL_PCD_EP_Open>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005abc:	7bfb      	ldrb	r3, [r7, #15]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f000 f956 	bl	8005d70 <USBD_Get_USB_Status>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3710      	adds	r7, #16
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}

08005ad2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b084      	sub	sp, #16
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
 8005ada:	460b      	mov	r3, r1
 8005adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005aec:	78fa      	ldrb	r2, [r7, #3]
 8005aee:	4611      	mov	r1, r2
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7fb faf3 	bl	80010dc <HAL_PCD_EP_Close>
 8005af6:	4603      	mov	r3, r0
 8005af8:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 f937 	bl	8005d70 <USBD_Get_USB_Status>
 8005b02:	4603      	mov	r3, r0
 8005b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3710      	adds	r7, #16
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b084      	sub	sp, #16
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b20:	2300      	movs	r3, #0
 8005b22:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b2a:	78fa      	ldrb	r2, [r7, #3]
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fb fb9e 	bl	8001270 <HAL_PCD_EP_SetStall>
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 f918 	bl	8005d70 <USBD_Get_USB_Status>
 8005b40:	4603      	mov	r3, r0
 8005b42:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b4e:	b580      	push	{r7, lr}
 8005b50:	b084      	sub	sp, #16
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
 8005b56:	460b      	mov	r3, r1
 8005b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	4611      	mov	r1, r2
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7fb fbd9 	bl	8001324 <HAL_PCD_EP_ClrStall>
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005b76:	7bfb      	ldrb	r3, [r7, #15]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f8f9 	bl	8005d70 <USBD_Get_USB_Status>
 8005b7e:	4603      	mov	r3, r0
 8005b80:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3710      	adds	r7, #16
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b085      	sub	sp, #20
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	460b      	mov	r3, r1
 8005b96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005b9e:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	da08      	bge.n	8005bba <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005ba8:	78fb      	ldrb	r3, [r7, #3]
 8005baa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	015b      	lsls	r3, r3, #5
 8005bb2:	4413      	add	r3, r2
 8005bb4:	332a      	adds	r3, #42	; 0x2a
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	e008      	b.n	8005bcc <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	015b      	lsls	r3, r3, #5
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005bca:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005be4:	2300      	movs	r3, #0
 8005be6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005bf2:	78fa      	ldrb	r2, [r7, #3]
 8005bf4:	4611      	mov	r1, r2
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f7fb f9eb 	bl	8000fd2 <HAL_PCD_SetAddress>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c00:	7bfb      	ldrb	r3, [r7, #15]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 f8b4 	bl	8005d70 <USBD_Get_USB_Status>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005c0c:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c16:	b580      	push	{r7, lr}
 8005c18:	b086      	sub	sp, #24
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	60f8      	str	r0, [r7, #12]
 8005c1e:	607a      	str	r2, [r7, #4]
 8005c20:	461a      	mov	r2, r3
 8005c22:	460b      	mov	r3, r1
 8005c24:	72fb      	strb	r3, [r7, #11]
 8005c26:	4613      	mov	r3, r2
 8005c28:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c38:	893b      	ldrh	r3, [r7, #8]
 8005c3a:	7af9      	ldrb	r1, [r7, #11]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	f7fb fade 	bl	80011fe <HAL_PCD_EP_Transmit>
 8005c42:	4603      	mov	r3, r0
 8005c44:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c46:	7dfb      	ldrb	r3, [r7, #23]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f891 	bl	8005d70 <USBD_Get_USB_Status>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005c52:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3718      	adds	r7, #24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}

08005c5c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b086      	sub	sp, #24
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	607a      	str	r2, [r7, #4]
 8005c66:	461a      	mov	r2, r3
 8005c68:	460b      	mov	r3, r1
 8005c6a:	72fb      	strb	r3, [r7, #11]
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c70:	2300      	movs	r3, #0
 8005c72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c7e:	893b      	ldrh	r3, [r7, #8]
 8005c80:	7af9      	ldrb	r1, [r7, #11]
 8005c82:	687a      	ldr	r2, [r7, #4]
 8005c84:	f7fb fa6c 	bl	8001160 <HAL_PCD_EP_Receive>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c8c:	7dfb      	ldrb	r3, [r7, #23]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f86e 	bl	8005d70 <USBD_Get_USB_Status>
 8005c94:	4603      	mov	r3, r0
 8005c96:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005c98:	7dbb      	ldrb	r3, [r7, #22]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}

08005ca2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005ca2:	b580      	push	{r7, lr}
 8005ca4:	b082      	sub	sp, #8
 8005ca6:	af00      	add	r7, sp, #0
 8005ca8:	6078      	str	r0, [r7, #4]
 8005caa:	460b      	mov	r3, r1
 8005cac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005cb4:	78fa      	ldrb	r2, [r7, #3]
 8005cb6:	4611      	mov	r1, r2
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fb fa8b 	bl	80011d4 <HAL_PCD_EP_GetRxCount>
 8005cbe:	4603      	mov	r3, r0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3708      	adds	r7, #8
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}

08005cc8 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	460b      	mov	r3, r1
 8005cd2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8005cd4:	78fb      	ldrb	r3, [r7, #3]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d002      	beq.n	8005ce0 <HAL_PCDEx_LPM_Callback+0x18>
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d013      	beq.n	8005d06 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8005cde:	e023      	b.n	8005d28 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	699b      	ldr	r3, [r3, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d007      	beq.n	8005cf8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8005ce8:	f000 f83c 	bl	8005d64 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005cec:	4b10      	ldr	r3, [pc, #64]	; (8005d30 <HAL_PCDEx_LPM_Callback+0x68>)
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	4a0f      	ldr	r2, [pc, #60]	; (8005d30 <HAL_PCDEx_LPM_Callback+0x68>)
 8005cf2:	f023 0306 	bic.w	r3, r3, #6
 8005cf6:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7fe fc49 	bl	8004596 <USBD_LL_Resume>
    break;
 8005d04:	e010      	b.n	8005d28 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	f7fe fc2d 	bl	800456c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005d1a:	4b05      	ldr	r3, [pc, #20]	; (8005d30 <HAL_PCDEx_LPM_Callback+0x68>)
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	4a04      	ldr	r2, [pc, #16]	; (8005d30 <HAL_PCDEx_LPM_Callback+0x68>)
 8005d20:	f043 0306 	orr.w	r3, r3, #6
 8005d24:	6113      	str	r3, [r2, #16]
    break;   
 8005d26:	bf00      	nop
}
 8005d28:	bf00      	nop
 8005d2a:	3708      	adds	r7, #8
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}
 8005d30:	e000ed00 	.word	0xe000ed00

08005d34 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b083      	sub	sp, #12
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005d3c:	4b03      	ldr	r3, [pc, #12]	; (8005d4c <USBD_static_malloc+0x18>)
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	370c      	adds	r7, #12
 8005d42:	46bd      	mov	sp, r7
 8005d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	200001a0 	.word	0x200001a0

08005d50 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]

}
 8005d58:	bf00      	nop
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8005d68:	f7ff fa8b 	bl	8005282 <SystemClock_Config>
}
 8005d6c:	bf00      	nop
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	4603      	mov	r3, r0
 8005d78:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005d7e:	79fb      	ldrb	r3, [r7, #7]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d817      	bhi.n	8005db4 <USBD_Get_USB_Status+0x44>
 8005d84:	a201      	add	r2, pc, #4	; (adr r2, 8005d8c <USBD_Get_USB_Status+0x1c>)
 8005d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8a:	bf00      	nop
 8005d8c:	08005d9d 	.word	0x08005d9d
 8005d90:	08005da3 	.word	0x08005da3
 8005d94:	08005da9 	.word	0x08005da9
 8005d98:	08005daf 	.word	0x08005daf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8005da0:	e00b      	b.n	8005dba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005da2:	2302      	movs	r3, #2
 8005da4:	73fb      	strb	r3, [r7, #15]
    break;
 8005da6:	e008      	b.n	8005dba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
    break;
 8005dac:	e005      	b.n	8005dba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005dae:	2302      	movs	r3, #2
 8005db0:	73fb      	strb	r3, [r7, #15]
    break;
 8005db2:	e002      	b.n	8005dba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005db4:	2302      	movs	r3, #2
 8005db6:	73fb      	strb	r3, [r7, #15]
    break;
 8005db8:	bf00      	nop
  }
  return usb_status;
 8005dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3714      	adds	r7, #20
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	4603      	mov	r3, r0
 8005dd0:	6039      	str	r1, [r7, #0]
 8005dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	2212      	movs	r2, #18
 8005dd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8005dda:	4b03      	ldr	r3, [pc, #12]	; (8005de8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	2000014c 	.word	0x2000014c

08005dec <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	6039      	str	r1, [r7, #0]
 8005df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	2204      	movs	r2, #4
 8005dfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005dfe:	4b03      	ldr	r3, [pc, #12]	; (8005e0c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	20000160 	.word	0x20000160

08005e10 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	6039      	str	r1, [r7, #0]
 8005e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005e1c:	79fb      	ldrb	r3, [r7, #7]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d105      	bne.n	8005e2e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005e22:	683a      	ldr	r2, [r7, #0]
 8005e24:	4907      	ldr	r1, [pc, #28]	; (8005e44 <USBD_CDC_ProductStrDescriptor+0x34>)
 8005e26:	4808      	ldr	r0, [pc, #32]	; (8005e48 <USBD_CDC_ProductStrDescriptor+0x38>)
 8005e28:	f7ff f940 	bl	80050ac <USBD_GetString>
 8005e2c:	e004      	b.n	8005e38 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	4904      	ldr	r1, [pc, #16]	; (8005e44 <USBD_CDC_ProductStrDescriptor+0x34>)
 8005e32:	4805      	ldr	r0, [pc, #20]	; (8005e48 <USBD_CDC_ProductStrDescriptor+0x38>)
 8005e34:	f7ff f93a 	bl	80050ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8005e38:	4b02      	ldr	r3, [pc, #8]	; (8005e44 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3708      	adds	r7, #8
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	20001130 	.word	0x20001130
 8005e48:	080060a8 	.word	0x080060a8

08005e4c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	4603      	mov	r3, r0
 8005e54:	6039      	str	r1, [r7, #0]
 8005e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e58:	683a      	ldr	r2, [r7, #0]
 8005e5a:	4904      	ldr	r1, [pc, #16]	; (8005e6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8005e5c:	4804      	ldr	r0, [pc, #16]	; (8005e70 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8005e5e:	f7ff f925 	bl	80050ac <USBD_GetString>
  return USBD_StrDesc;
 8005e62:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20001130 	.word	0x20001130
 8005e70:	080060b4 	.word	0x080060b4

08005e74 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b082      	sub	sp, #8
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	6039      	str	r1, [r7, #0]
 8005e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	221a      	movs	r2, #26
 8005e84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005e86:	f000 f843 	bl	8005f10 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8005e8a:	4b02      	ldr	r3, [pc, #8]	; (8005e94 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3708      	adds	r7, #8
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	20000164 	.word	0x20000164

08005e98 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	6039      	str	r1, [r7, #0]
 8005ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d105      	bne.n	8005eb6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	4907      	ldr	r1, [pc, #28]	; (8005ecc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8005eae:	4808      	ldr	r0, [pc, #32]	; (8005ed0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8005eb0:	f7ff f8fc 	bl	80050ac <USBD_GetString>
 8005eb4:	e004      	b.n	8005ec0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8005eb6:	683a      	ldr	r2, [r7, #0]
 8005eb8:	4904      	ldr	r1, [pc, #16]	; (8005ecc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8005eba:	4805      	ldr	r0, [pc, #20]	; (8005ed0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8005ebc:	f7ff f8f6 	bl	80050ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8005ec0:	4b02      	ldr	r3, [pc, #8]	; (8005ecc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop
 8005ecc:	20001130 	.word	0x20001130
 8005ed0:	080060c8 	.word	0x080060c8

08005ed4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b082      	sub	sp, #8
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	4603      	mov	r3, r0
 8005edc:	6039      	str	r1, [r7, #0]
 8005ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005ee0:	79fb      	ldrb	r3, [r7, #7]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d105      	bne.n	8005ef2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005ee6:	683a      	ldr	r2, [r7, #0]
 8005ee8:	4907      	ldr	r1, [pc, #28]	; (8005f08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8005eea:	4808      	ldr	r0, [pc, #32]	; (8005f0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8005eec:	f7ff f8de 	bl	80050ac <USBD_GetString>
 8005ef0:	e004      	b.n	8005efc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8005ef2:	683a      	ldr	r2, [r7, #0]
 8005ef4:	4904      	ldr	r1, [pc, #16]	; (8005f08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8005ef6:	4805      	ldr	r0, [pc, #20]	; (8005f0c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8005ef8:	f7ff f8d8 	bl	80050ac <USBD_GetString>
  }
  return USBD_StrDesc;
 8005efc:	4b02      	ldr	r3, [pc, #8]	; (8005f08 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	20001130 	.word	0x20001130
 8005f0c:	080060d4 	.word	0x080060d4

08005f10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005f16:	4b0f      	ldr	r3, [pc, #60]	; (8005f54 <Get_SerialNum+0x44>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005f1c:	4b0e      	ldr	r3, [pc, #56]	; (8005f58 <Get_SerialNum+0x48>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005f22:	4b0e      	ldr	r3, [pc, #56]	; (8005f5c <Get_SerialNum+0x4c>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005f36:	2208      	movs	r2, #8
 8005f38:	4909      	ldr	r1, [pc, #36]	; (8005f60 <Get_SerialNum+0x50>)
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 f814 	bl	8005f68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005f40:	2204      	movs	r2, #4
 8005f42:	4908      	ldr	r1, [pc, #32]	; (8005f64 <Get_SerialNum+0x54>)
 8005f44:	68b8      	ldr	r0, [r7, #8]
 8005f46:	f000 f80f 	bl	8005f68 <IntToUnicode>
  }
}
 8005f4a:	bf00      	nop
 8005f4c:	3710      	adds	r7, #16
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop
 8005f54:	1fff7590 	.word	0x1fff7590
 8005f58:	1fff7594 	.word	0x1fff7594
 8005f5c:	1fff7598 	.word	0x1fff7598
 8005f60:	20000166 	.word	0x20000166
 8005f64:	20000176 	.word	0x20000176

08005f68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b087      	sub	sp, #28
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	4613      	mov	r3, r2
 8005f74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005f76:	2300      	movs	r3, #0
 8005f78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]
 8005f7e:	e027      	b.n	8005fd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	0f1b      	lsrs	r3, r3, #28
 8005f84:	2b09      	cmp	r3, #9
 8005f86:	d80b      	bhi.n	8005fa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	0f1b      	lsrs	r3, r3, #28
 8005f8c:	b2da      	uxtb	r2, r3
 8005f8e:	7dfb      	ldrb	r3, [r7, #23]
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4619      	mov	r1, r3
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	440b      	add	r3, r1
 8005f98:	3230      	adds	r2, #48	; 0x30
 8005f9a:	b2d2      	uxtb	r2, r2
 8005f9c:	701a      	strb	r2, [r3, #0]
 8005f9e:	e00a      	b.n	8005fb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	0f1b      	lsrs	r3, r3, #28
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	4619      	mov	r1, r3
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	440b      	add	r3, r1
 8005fb0:	3237      	adds	r2, #55	; 0x37
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
 8005fbe:	005b      	lsls	r3, r3, #1
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005fca:	7dfb      	ldrb	r3, [r7, #23]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
 8005fd0:	7dfa      	ldrb	r2, [r7, #23]
 8005fd2:	79fb      	ldrb	r3, [r7, #7]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d3d3      	bcc.n	8005f80 <IntToUnicode+0x18>
  }
}
 8005fd8:	bf00      	nop
 8005fda:	371c      	adds	r7, #28
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005fe4:	480d      	ldr	r0, [pc, #52]	; (800601c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005fe6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005fe8:	480d      	ldr	r0, [pc, #52]	; (8006020 <LoopForever+0x6>)
  ldr r1, =_edata
 8005fea:	490e      	ldr	r1, [pc, #56]	; (8006024 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005fec:	4a0e      	ldr	r2, [pc, #56]	; (8006028 <LoopForever+0xe>)
  movs r3, #0
 8005fee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005ff0:	e002      	b.n	8005ff8 <LoopCopyDataInit>

08005ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ff6:	3304      	adds	r3, #4

08005ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ffc:	d3f9      	bcc.n	8005ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005ffe:	4a0b      	ldr	r2, [pc, #44]	; (800602c <LoopForever+0x12>)
  ldr r4, =_ebss
 8006000:	4c0b      	ldr	r4, [pc, #44]	; (8006030 <LoopForever+0x16>)
  movs r3, #0
 8006002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006004:	e001      	b.n	800600a <LoopFillZerobss>

08006006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006008:	3204      	adds	r2, #4

0800600a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800600a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800600c:	d3fb      	bcc.n	8006006 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800600e:	f7ff fad3 	bl	80055b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006012:	f000 f811 	bl	8006038 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006016:	f7ff f927 	bl	8005268 <main>

0800601a <LoopForever>:

LoopForever:
    b LoopForever
 800601a:	e7fe      	b.n	800601a <LoopForever>
  ldr   r0, =_estack
 800601c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006020:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006024:	20000180 	.word	0x20000180
  ldr r2, =_sidata
 8006028:	080060fc 	.word	0x080060fc
  ldr r2, =_sbss
 800602c:	20000180 	.word	0x20000180
  ldr r4, =_ebss
 8006030:	20001330 	.word	0x20001330

08006034 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006034:	e7fe      	b.n	8006034 <ADC1_2_IRQHandler>
	...

08006038 <__libc_init_array>:
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	4e0d      	ldr	r6, [pc, #52]	; (8006070 <__libc_init_array+0x38>)
 800603c:	4c0d      	ldr	r4, [pc, #52]	; (8006074 <__libc_init_array+0x3c>)
 800603e:	1ba4      	subs	r4, r4, r6
 8006040:	10a4      	asrs	r4, r4, #2
 8006042:	2500      	movs	r5, #0
 8006044:	42a5      	cmp	r5, r4
 8006046:	d109      	bne.n	800605c <__libc_init_array+0x24>
 8006048:	4e0b      	ldr	r6, [pc, #44]	; (8006078 <__libc_init_array+0x40>)
 800604a:	4c0c      	ldr	r4, [pc, #48]	; (800607c <__libc_init_array+0x44>)
 800604c:	f000 f820 	bl	8006090 <_init>
 8006050:	1ba4      	subs	r4, r4, r6
 8006052:	10a4      	asrs	r4, r4, #2
 8006054:	2500      	movs	r5, #0
 8006056:	42a5      	cmp	r5, r4
 8006058:	d105      	bne.n	8006066 <__libc_init_array+0x2e>
 800605a:	bd70      	pop	{r4, r5, r6, pc}
 800605c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006060:	4798      	blx	r3
 8006062:	3501      	adds	r5, #1
 8006064:	e7ee      	b.n	8006044 <__libc_init_array+0xc>
 8006066:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800606a:	4798      	blx	r3
 800606c:	3501      	adds	r5, #1
 800606e:	e7f2      	b.n	8006056 <__libc_init_array+0x1e>
 8006070:	080060f4 	.word	0x080060f4
 8006074:	080060f4 	.word	0x080060f4
 8006078:	080060f4 	.word	0x080060f4
 800607c:	080060f8 	.word	0x080060f8

08006080 <memset>:
 8006080:	4402      	add	r2, r0
 8006082:	4603      	mov	r3, r0
 8006084:	4293      	cmp	r3, r2
 8006086:	d100      	bne.n	800608a <memset+0xa>
 8006088:	4770      	bx	lr
 800608a:	f803 1b01 	strb.w	r1, [r3], #1
 800608e:	e7f9      	b.n	8006084 <memset+0x4>

08006090 <_init>:
 8006090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006092:	bf00      	nop
 8006094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006096:	bc08      	pop	{r3}
 8006098:	469e      	mov	lr, r3
 800609a:	4770      	bx	lr

0800609c <_fini>:
 800609c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800609e:	bf00      	nop
 80060a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060a2:	bc08      	pop	{r3}
 80060a4:	469e      	mov	lr, r3
 80060a6:	4770      	bx	lr
