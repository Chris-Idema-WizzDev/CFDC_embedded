
CDC_libUSB_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060e4  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080062bc  080062bc  000162bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006308  08006308  000200d4  2**0
                  CONTENTS
  4 .ARM          00000000  08006308  08006308  000200d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006308  08006308  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006308  08006308  00016308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800630c  0800630c  0001630c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  08006310  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021b8  200000d4  080063e4  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000228c  080063e4  0002228c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000169be  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003289  00000000  00000000  00036ac2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f38  00000000  00000000  00039d50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  0003ac88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020549  00000000  00000000  0003ba38  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f008  00000000  00000000  0005bf81  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba8d5  00000000  00000000  0006af89  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012585e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003cd4  00000000  00000000  001258dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000d4 	.word	0x200000d4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080062a4 	.word	0x080062a4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000d8 	.word	0x200000d8
 8000214:	080062a4 	.word	0x080062a4

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f95a 	bl	80004dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f005 fa0b 	bl	8005654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f966 	bl	8000542 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f000 f932 	bl	80004f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	2000006c 	.word	0x2000006c
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000314 	.word	0x20000314
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000314 	.word	0x20000314

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000358:	4013      	ands	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <__NVIC_GetPriorityGrouping+0x18>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	f003 0307 	and.w	r3, r3, #7
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db0b      	blt.n	80003ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 021f 	and.w	r2, r3, #31
 80003b8:	4907      	ldr	r1, [pc, #28]	; (80003d8 <__NVIC_EnableIRQ+0x38>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	095b      	lsrs	r3, r3, #5
 80003c0:	2001      	movs	r0, #1
 80003c2:	fa00 f202 	lsl.w	r2, r0, r2
 80003c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000e100 	.word	0xe000e100

080003dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	6039      	str	r1, [r7, #0]
 80003e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db0a      	blt.n	8000406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	490c      	ldr	r1, [pc, #48]	; (8000428 <__NVIC_SetPriority+0x4c>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	0112      	lsls	r2, r2, #4
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	440b      	add	r3, r1
 8000400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000404:	e00a      	b.n	800041c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4908      	ldr	r1, [pc, #32]	; (800042c <__NVIC_SetPriority+0x50>)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	3b04      	subs	r3, #4
 8000414:	0112      	lsls	r2, r2, #4
 8000416:	b2d2      	uxtb	r2, r2
 8000418:	440b      	add	r3, r1
 800041a:	761a      	strb	r2, [r3, #24]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	e000e100 	.word	0xe000e100
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000430:	b480      	push	{r7}
 8000432:	b089      	sub	sp, #36	; 0x24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	f1c3 0307 	rsb	r3, r3, #7
 800044a:	2b04      	cmp	r3, #4
 800044c:	bf28      	it	cs
 800044e:	2304      	movcs	r3, #4
 8000450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	3304      	adds	r3, #4
 8000456:	2b06      	cmp	r3, #6
 8000458:	d902      	bls.n	8000460 <NVIC_EncodePriority+0x30>
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	3b03      	subs	r3, #3
 800045e:	e000      	b.n	8000462 <NVIC_EncodePriority+0x32>
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	f04f 32ff 	mov.w	r2, #4294967295
 8000468:	69bb      	ldr	r3, [r7, #24]
 800046a:	fa02 f303 	lsl.w	r3, r2, r3
 800046e:	43da      	mvns	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	401a      	ands	r2, r3
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000478:	f04f 31ff 	mov.w	r1, #4294967295
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43d9      	mvns	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	4313      	orrs	r3, r2
         );
}
 800048a:	4618      	mov	r0, r3
 800048c:	3724      	adds	r7, #36	; 0x24
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004a8:	d301      	bcc.n	80004ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004aa:	2301      	movs	r3, #1
 80004ac:	e00f      	b.n	80004ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <SysTick_Config+0x40>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004b6:	210f      	movs	r1, #15
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295
 80004bc:	f7ff ff8e 	bl	80003dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <SysTick_Config+0x40>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <SysTick_Config+0x40>)
 80004c8:	2207      	movs	r2, #7
 80004ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	e000e010 	.word	0xe000e010

080004dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ff29 	bl	800033c <__NVIC_SetPriorityGrouping>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b086      	sub	sp, #24
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	4603      	mov	r3, r0
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000500:	f7ff ff40 	bl	8000384 <__NVIC_GetPriorityGrouping>
 8000504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	68b9      	ldr	r1, [r7, #8]
 800050a:	6978      	ldr	r0, [r7, #20]
 800050c:	f7ff ff90 	bl	8000430 <NVIC_EncodePriority>
 8000510:	4602      	mov	r2, r0
 8000512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff5f 	bl	80003dc <__NVIC_SetPriority>
}
 800051e:	bf00      	nop
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff33 	bl	80003a0 <__NVIC_EnableIRQ>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffa4 	bl	8000498 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e147      	b.n	80007fe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d106      	bne.n	8000588 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2200      	movs	r2, #0
 800057e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f005 f88a 	bl	800569c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f022 0210 	bic.w	r2, r2, #16
 8000596:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000598:	f7ff fea2 	bl	80002e0 <HAL_GetTick>
 800059c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800059e:	e012      	b.n	80005c6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80005a0:	f7ff fe9e 	bl	80002e0 <HAL_GetTick>
 80005a4:	4602      	mov	r2, r0
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	2b0a      	cmp	r3, #10
 80005ac:	d90b      	bls.n	80005c6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	f043 0201 	orr.w	r2, r3, #1
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2203      	movs	r2, #3
 80005be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e11b      	b.n	80007fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0308 	and.w	r3, r3, #8
 80005d0:	2b08      	cmp	r3, #8
 80005d2:	d0e5      	beq.n	80005a0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	699a      	ldr	r2, [r3, #24]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f042 0201 	orr.w	r2, r2, #1
 80005e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005e4:	f7ff fe7c 	bl	80002e0 <HAL_GetTick>
 80005e8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80005ea:	e012      	b.n	8000612 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80005ec:	f7ff fe78 	bl	80002e0 <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b0a      	cmp	r3, #10
 80005f8:	d90b      	bls.n	8000612 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fe:	f043 0201 	orr.w	r2, r3, #1
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2203      	movs	r2, #3
 800060a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e0f5      	b.n	80007fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0e5      	beq.n	80005ec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	699a      	ldr	r2, [r3, #24]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f042 0202 	orr.w	r2, r2, #2
 800062e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a74      	ldr	r2, [pc, #464]	; (8000808 <HAL_FDCAN_Init+0x2ac>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d103      	bne.n	8000642 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800063a:	4a74      	ldr	r2, [pc, #464]	; (800080c <HAL_FDCAN_Init+0x2b0>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7c1b      	ldrb	r3, [r3, #16]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d108      	bne.n	800065c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	699a      	ldr	r2, [r3, #24]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000658:	619a      	str	r2, [r3, #24]
 800065a:	e007      	b.n	800066c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	699a      	ldr	r2, [r3, #24]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800066a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7c5b      	ldrb	r3, [r3, #17]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d108      	bne.n	8000686 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	699a      	ldr	r2, [r3, #24]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000682:	619a      	str	r2, [r3, #24]
 8000684:	e007      	b.n	8000696 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	699a      	ldr	r2, [r3, #24]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000694:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7c9b      	ldrb	r3, [r3, #18]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d108      	bne.n	80006b0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	699a      	ldr	r2, [r3, #24]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80006ac:	619a      	str	r2, [r3, #24]
 80006ae:	e007      	b.n	80006c0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	699a      	ldr	r2, [r3, #24]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006be:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80006e4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	691a      	ldr	r2, [r3, #16]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f022 0210 	bic.w	r2, r2, #16
 80006f4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d108      	bne.n	8000710 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f042 0204 	orr.w	r2, r2, #4
 800070c:	619a      	str	r2, [r3, #24]
 800070e:	e02c      	b.n	800076a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d028      	beq.n	800076a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d01c      	beq.n	800075a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800072e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	691a      	ldr	r2, [r3, #16]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f042 0210 	orr.w	r2, r2, #16
 800073e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d110      	bne.n	800076a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f042 0220 	orr.w	r2, r2, #32
 8000756:	619a      	str	r2, [r3, #24]
 8000758:	e007      	b.n	800076a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f042 0220 	orr.w	r2, r2, #32
 8000768:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	3b01      	subs	r3, #1
 8000770:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	3b01      	subs	r3, #1
 8000778:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800077a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000782:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	3b01      	subs	r3, #1
 800078c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000792:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000794:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800079e:	d115      	bne.n	80007cc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	3b01      	subs	r3, #1
 80007ac:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007ae:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	3b01      	subs	r3, #1
 80007b6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80007b8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c0:	3b01      	subs	r3, #1
 80007c2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80007c8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007ca:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 f814 	bl	8000810 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40006400 	.word	0x40006400
 800080c:	40006500 	.word	0x40006500

08000810 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000818:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800081a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800082a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000832:	041a      	lsls	r2, r3, #16
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	430a      	orrs	r2, r1
 800083a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000850:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000858:	061a      	lsls	r2, r3, #24
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	430a      	orrs	r2, r1
 8000860:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	e005      	b.n	800089e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	3304      	adds	r3, #4
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	68bb      	ldr	r3, [r7, #8]
 80008a0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80008a4:	68fa      	ldr	r2, [r7, #12]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d3f3      	bcc.n	8000892 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80008aa:	bf00      	nop
 80008ac:	3714      	adds	r7, #20
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	4000a400 	.word	0x4000a400

080008bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008bc:	b480      	push	{r7}
 80008be:	b087      	sub	sp, #28
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80008ca:	e15a      	b.n	8000b82 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	2101      	movs	r1, #1
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	fa01 f303 	lsl.w	r3, r1, r3
 80008d8:	4013      	ands	r3, r2
 80008da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 814c 	beq.w	8000b7c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	685b      	ldr	r3, [r3, #4]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	d00b      	beq.n	8000904 <HAL_GPIO_Init+0x48>
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	2b02      	cmp	r3, #2
 80008f2:	d007      	beq.n	8000904 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008f8:	2b11      	cmp	r3, #17
 80008fa:	d003      	beq.n	8000904 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	685b      	ldr	r3, [r3, #4]
 8000900:	2b12      	cmp	r3, #18
 8000902:	d130      	bne.n	8000966 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	689b      	ldr	r3, [r3, #8]
 8000908:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800090a:	697b      	ldr	r3, [r7, #20]
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	2203      	movs	r2, #3
 8000910:	fa02 f303 	lsl.w	r3, r2, r3
 8000914:	43db      	mvns	r3, r3
 8000916:	693a      	ldr	r2, [r7, #16]
 8000918:	4013      	ands	r3, r2
 800091a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800091c:	683b      	ldr	r3, [r7, #0]
 800091e:	68da      	ldr	r2, [r3, #12]
 8000920:	697b      	ldr	r3, [r7, #20]
 8000922:	005b      	lsls	r3, r3, #1
 8000924:	fa02 f303 	lsl.w	r3, r2, r3
 8000928:	693a      	ldr	r2, [r7, #16]
 800092a:	4313      	orrs	r3, r2
 800092c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800093a:	2201      	movs	r2, #1
 800093c:	697b      	ldr	r3, [r7, #20]
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	693a      	ldr	r2, [r7, #16]
 8000946:	4013      	ands	r3, r2
 8000948:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	091b      	lsrs	r3, r3, #4
 8000950:	f003 0201 	and.w	r2, r3, #1
 8000954:	697b      	ldr	r3, [r7, #20]
 8000956:	fa02 f303 	lsl.w	r3, r2, r3
 800095a:	693a      	ldr	r2, [r7, #16]
 800095c:	4313      	orrs	r3, r2
 800095e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	693a      	ldr	r2, [r7, #16]
 8000964:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	68db      	ldr	r3, [r3, #12]
 800096a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	2203      	movs	r2, #3
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	fa02 f303 	lsl.w	r3, r2, r3
 800098a:	693a      	ldr	r2, [r7, #16]
 800098c:	4313      	orrs	r3, r2
 800098e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	685b      	ldr	r3, [r3, #4]
 800099a:	2b02      	cmp	r3, #2
 800099c:	d003      	beq.n	80009a6 <HAL_GPIO_Init+0xea>
 800099e:	683b      	ldr	r3, [r7, #0]
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	2b12      	cmp	r3, #18
 80009a4:	d123      	bne.n	80009ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	08da      	lsrs	r2, r3, #3
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	3208      	adds	r2, #8
 80009ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80009b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	f003 0307 	and.w	r3, r3, #7
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	220f      	movs	r2, #15
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43db      	mvns	r3, r3
 80009c4:	693a      	ldr	r2, [r7, #16]
 80009c6:	4013      	ands	r3, r2
 80009c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	691a      	ldr	r2, [r3, #16]
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f003 0307 	and.w	r3, r3, #7
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	693a      	ldr	r2, [r7, #16]
 80009dc:	4313      	orrs	r3, r2
 80009de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	08da      	lsrs	r2, r3, #3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3208      	adds	r2, #8
 80009e8:	6939      	ldr	r1, [r7, #16]
 80009ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	2203      	movs	r2, #3
 80009fa:	fa02 f303 	lsl.w	r3, r2, r3
 80009fe:	43db      	mvns	r3, r3
 8000a00:	693a      	ldr	r2, [r7, #16]
 8000a02:	4013      	ands	r3, r2
 8000a04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 0203 	and.w	r2, r3, #3
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	005b      	lsls	r3, r3, #1
 8000a12:	fa02 f303 	lsl.w	r3, r2, r3
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 80a6 	beq.w	8000b7c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a30:	4b5b      	ldr	r3, [pc, #364]	; (8000ba0 <HAL_GPIO_Init+0x2e4>)
 8000a32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a34:	4a5a      	ldr	r2, [pc, #360]	; (8000ba0 <HAL_GPIO_Init+0x2e4>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6613      	str	r3, [r2, #96]	; 0x60
 8000a3c:	4b58      	ldr	r3, [pc, #352]	; (8000ba0 <HAL_GPIO_Init+0x2e4>)
 8000a3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a48:	4a56      	ldr	r2, [pc, #344]	; (8000ba4 <HAL_GPIO_Init+0x2e8>)
 8000a4a:	697b      	ldr	r3, [r7, #20]
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000a56:	697b      	ldr	r3, [r7, #20]
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	220f      	movs	r2, #15
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a72:	d01f      	beq.n	8000ab4 <HAL_GPIO_Init+0x1f8>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a4c      	ldr	r2, [pc, #304]	; (8000ba8 <HAL_GPIO_Init+0x2ec>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d019      	beq.n	8000ab0 <HAL_GPIO_Init+0x1f4>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a4b      	ldr	r2, [pc, #300]	; (8000bac <HAL_GPIO_Init+0x2f0>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d013      	beq.n	8000aac <HAL_GPIO_Init+0x1f0>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a4a      	ldr	r2, [pc, #296]	; (8000bb0 <HAL_GPIO_Init+0x2f4>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d00d      	beq.n	8000aa8 <HAL_GPIO_Init+0x1ec>
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4a49      	ldr	r2, [pc, #292]	; (8000bb4 <HAL_GPIO_Init+0x2f8>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d007      	beq.n	8000aa4 <HAL_GPIO_Init+0x1e8>
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4a48      	ldr	r2, [pc, #288]	; (8000bb8 <HAL_GPIO_Init+0x2fc>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d101      	bne.n	8000aa0 <HAL_GPIO_Init+0x1e4>
 8000a9c:	2305      	movs	r3, #5
 8000a9e:	e00a      	b.n	8000ab6 <HAL_GPIO_Init+0x1fa>
 8000aa0:	2306      	movs	r3, #6
 8000aa2:	e008      	b.n	8000ab6 <HAL_GPIO_Init+0x1fa>
 8000aa4:	2304      	movs	r3, #4
 8000aa6:	e006      	b.n	8000ab6 <HAL_GPIO_Init+0x1fa>
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	e004      	b.n	8000ab6 <HAL_GPIO_Init+0x1fa>
 8000aac:	2302      	movs	r3, #2
 8000aae:	e002      	b.n	8000ab6 <HAL_GPIO_Init+0x1fa>
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	e000      	b.n	8000ab6 <HAL_GPIO_Init+0x1fa>
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	697a      	ldr	r2, [r7, #20]
 8000ab8:	f002 0203 	and.w	r2, r2, #3
 8000abc:	0092      	lsls	r2, r2, #2
 8000abe:	4093      	lsls	r3, r2
 8000ac0:	693a      	ldr	r2, [r7, #16]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ac6:	4937      	ldr	r1, [pc, #220]	; (8000ba4 <HAL_GPIO_Init+0x2e8>)
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	089b      	lsrs	r3, r3, #2
 8000acc:	3302      	adds	r3, #2
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ad4:	4b39      	ldr	r3, [pc, #228]	; (8000bbc <HAL_GPIO_Init+0x300>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d003      	beq.n	8000af8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000af8:	4a30      	ldr	r2, [pc, #192]	; (8000bbc <HAL_GPIO_Init+0x300>)
 8000afa:	693b      	ldr	r3, [r7, #16]
 8000afc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000afe:	4b2f      	ldr	r3, [pc, #188]	; (8000bbc <HAL_GPIO_Init+0x300>)
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	43db      	mvns	r3, r3
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	4013      	ands	r3, r2
 8000b0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b0e:	683b      	ldr	r3, [r7, #0]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000b1a:	693a      	ldr	r2, [r7, #16]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000b22:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <HAL_GPIO_Init+0x300>)
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <HAL_GPIO_Init+0x300>)
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	43db      	mvns	r3, r3
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	4013      	ands	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	685b      	ldr	r3, [r3, #4]
 8000b3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d003      	beq.n	8000b4c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000b44:	693a      	ldr	r2, [r7, #16]
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000b4c:	4a1b      	ldr	r2, [pc, #108]	; (8000bbc <HAL_GPIO_Init+0x300>)
 8000b4e:	693b      	ldr	r3, [r7, #16]
 8000b50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_GPIO_Init+0x300>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	43db      	mvns	r3, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4013      	ands	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	685b      	ldr	r3, [r3, #4]
 8000b66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d003      	beq.n	8000b76 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b6e:	693a      	ldr	r2, [r7, #16]
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000b76:	4a11      	ldr	r2, [pc, #68]	; (8000bbc <HAL_GPIO_Init+0x300>)
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	681a      	ldr	r2, [r3, #0]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	fa22 f303 	lsr.w	r3, r2, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	f47f ae9d 	bne.w	80008cc <HAL_GPIO_Init+0x10>
  }
}
 8000b92:	bf00      	nop
 8000b94:	371c      	adds	r7, #28
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	40010000 	.word	0x40010000
 8000ba8:	48000400 	.word	0x48000400
 8000bac:	48000800 	.word	0x48000800
 8000bb0:	48000c00 	.word	0x48000c00
 8000bb4:	48001000 	.word	0x48001000
 8000bb8:	48001400 	.word	0x48001400
 8000bbc:	40010400 	.word	0x40010400

08000bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	460b      	mov	r3, r1
 8000bca:	807b      	strh	r3, [r7, #2]
 8000bcc:	4613      	mov	r3, r2
 8000bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bd0:	787b      	ldrb	r3, [r7, #1]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d003      	beq.n	8000bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000bd6:	887a      	ldrh	r2, [r7, #2]
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000bdc:	e002      	b.n	8000be4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000bde:	887a      	ldrh	r2, [r7, #2]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	460b      	mov	r3, r1
 8000bfa:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	695a      	ldr	r2, [r3, #20]
 8000c00:	887b      	ldrh	r3, [r7, #2]
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d003      	beq.n	8000c10 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c08:	887a      	ldrh	r2, [r7, #2]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000c0e:	e002      	b.n	8000c16 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c10:	887a      	ldrh	r2, [r7, #2]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	619a      	str	r2, [r3, #24]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000c22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c24:	b08b      	sub	sp, #44	; 0x2c
 8000c26:	af06      	add	r7, sp, #24
 8000c28:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e0ad      	b.n	8000d90 <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d106      	bne.n	8000c4e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000c48:	6878      	ldr	r0, [r7, #4]
 8000c4a:	f004 feb3 	bl	80059b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2203      	movs	r2, #3
 8000c52:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fea1 	bl	80029a2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
 8000c64:	e035      	b.n	8000cd2 <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000c66:	7bfb      	ldrb	r3, [r7, #15]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	015b      	lsls	r3, r3, #5
 8000c6c:	4413      	add	r3, r2
 8000c6e:	3329      	adds	r3, #41	; 0x29
 8000c70:	2201      	movs	r2, #1
 8000c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000c74:	7bfb      	ldrb	r3, [r7, #15]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	015b      	lsls	r3, r3, #5
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3328      	adds	r3, #40	; 0x28
 8000c7e:	7bfa      	ldrb	r2, [r7, #15]
 8000c80:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000c82:	7bfb      	ldrb	r3, [r7, #15]
 8000c84:	7bfa      	ldrb	r2, [r7, #15]
 8000c86:	b291      	uxth	r1, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	015b      	lsls	r3, r3, #5
 8000c8c:	4413      	add	r3, r2
 8000c8e:	3336      	adds	r3, #54	; 0x36
 8000c90:	460a      	mov	r2, r1
 8000c92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000c94:	7bfb      	ldrb	r3, [r7, #15]
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	015b      	lsls	r3, r3, #5
 8000c9a:	4413      	add	r3, r2
 8000c9c:	332b      	adds	r3, #43	; 0x2b
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	687a      	ldr	r2, [r7, #4]
 8000ca6:	015b      	lsls	r3, r3, #5
 8000ca8:	4413      	add	r3, r2
 8000caa:	3338      	adds	r3, #56	; 0x38
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	015b      	lsls	r3, r3, #5
 8000cb6:	4413      	add	r3, r2
 8000cb8:	333c      	adds	r3, #60	; 0x3c
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	3302      	adds	r3, #2
 8000cc4:	015b      	lsls	r3, r3, #5
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000ccc:	7bfb      	ldrb	r3, [r7, #15]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	73fb      	strb	r3, [r7, #15]
 8000cd2:	7bfa      	ldrb	r2, [r7, #15]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	429a      	cmp	r2, r3
 8000cda:	d3c4      	bcc.n	8000c66 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	73fb      	strb	r3, [r7, #15]
 8000ce0:	e031      	b.n	8000d46 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8000ce2:	7bfb      	ldrb	r3, [r7, #15]
 8000ce4:	687a      	ldr	r2, [r7, #4]
 8000ce6:	015b      	lsls	r3, r3, #5
 8000ce8:	4413      	add	r3, r2
 8000cea:	f203 1329 	addw	r3, r3, #297	; 0x129
 8000cee:	2200      	movs	r2, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8000cf2:	7bfb      	ldrb	r3, [r7, #15]
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	015b      	lsls	r3, r3, #5
 8000cf8:	4413      	add	r3, r2
 8000cfa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000cfe:	7bfa      	ldrb	r2, [r7, #15]
 8000d00:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8000d02:	7bfb      	ldrb	r3, [r7, #15]
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	015b      	lsls	r3, r3, #5
 8000d08:	4413      	add	r3, r2
 8000d0a:	f203 132b 	addw	r3, r3, #299	; 0x12b
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	015b      	lsls	r3, r3, #5
 8000d18:	4413      	add	r3, r2
 8000d1a:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8000d22:	7bfb      	ldrb	r3, [r7, #15]
 8000d24:	687a      	ldr	r2, [r7, #4]
 8000d26:	015b      	lsls	r3, r3, #5
 8000d28:	4413      	add	r3, r2
 8000d2a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8000d32:	7bfb      	ldrb	r3, [r7, #15]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	330a      	adds	r3, #10
 8000d38:	015b      	lsls	r3, r3, #5
 8000d3a:	4413      	add	r3, r2
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000d40:	7bfb      	ldrb	r3, [r7, #15]
 8000d42:	3301      	adds	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	7bfa      	ldrb	r2, [r7, #15]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	d3c8      	bcc.n	8000ce2 <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	603b      	str	r3, [r7, #0]
 8000d56:	687e      	ldr	r6, [r7, #4]
 8000d58:	466d      	mov	r5, sp
 8000d5a:	f106 0410 	add.w	r4, r6, #16
 8000d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	602b      	str	r3, [r5, #0]
 8000d66:	1d33      	adds	r3, r6, #4
 8000d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000d6a:	6838      	ldr	r0, [r7, #0]
 8000d6c:	f001 fe34 	bl	80029d8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2200      	movs	r2, #0
 8000d74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69db      	ldr	r3, [r3, #28]
 8000d84:	2b01      	cmp	r3, #1
 8000d86:	d102      	bne.n	8000d8e <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	f000 fe36 	bl	80019fa <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000d98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d101      	bne.n	8000dae <HAL_PCD_Start+0x16>
 8000daa:	2302      	movs	r3, #2
 8000dac:	e012      	b.n	8000dd4 <HAL_PCD_Start+0x3c>
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f002 fe58 	bl	8003a70 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f001 fdd3 	bl	8002970 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	4618      	mov	r0, r3
 8000dea:	f002 fe58 	bl	8003a9e <USB_ReadInterrupts>
 8000dee:	4603      	mov	r3, r0
 8000df0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000df4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000df8:	d102      	bne.n	8000e00 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f000 fb34 	bl	8001468 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f002 fe4a 	bl	8003a9e <USB_ReadInterrupts>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e14:	d112      	bne.n	8000e3c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e1e:	b29a      	uxth	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000e28:	b292      	uxth	r2, r2
 8000e2a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8000e2e:	6878      	ldr	r0, [r7, #4]
 8000e30:	f004 fe57 	bl	8005ae2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8000e34:	2100      	movs	r1, #0
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f000 f91e 	bl	8001078 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4618      	mov	r0, r3
 8000e42:	f002 fe2c 	bl	8003a9e <USB_ReadInterrupts>
 8000e46:	4603      	mov	r3, r0
 8000e48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000e50:	d10b      	bne.n	8000e6a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e5a:	b29a      	uxth	r2, r3
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000e64:	b292      	uxth	r2, r2
 8000e66:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f002 fe15 	bl	8003a9e <USB_ReadInterrupts>
 8000e74:	4603      	mov	r3, r0
 8000e76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e7e:	d10b      	bne.n	8000e98 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e92:	b292      	uxth	r2, r2
 8000e94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f002 fdfe 	bl	8003a9e <USB_ReadInterrupts>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eac:	d133      	bne.n	8000f16 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f022 0204 	bic.w	r2, r2, #4
 8000ec0:	b292      	uxth	r2, r2
 8000ec2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 0208 	bic.w	r2, r2, #8
 8000ed8:	b292      	uxth	r2, r2
 8000eda:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d107      	bne.n	8000ef8 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f004 ffe6 	bl	8005ec4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f004 fe2b 	bl	8005b54 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000f10:	b292      	uxth	r2, r2
 8000f12:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f002 fdbf 	bl	8003a9e <USB_ReadInterrupts>
 8000f20:	4603      	mov	r3, r0
 8000f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f2a:	d126      	bne.n	8000f7a <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f34:	b29a      	uxth	r2, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f042 0208 	orr.w	r2, r2, #8
 8000f3e:	b292      	uxth	r2, r2
 8000f40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f56:	b292      	uxth	r2, r2
 8000f58:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f042 0204 	orr.w	r2, r2, #4
 8000f6e:	b292      	uxth	r2, r2
 8000f70:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f004 fdd3 	bl	8005b20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f002 fd8d 	bl	8003a9e <USB_ReadInterrupts>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f8a:	2b80      	cmp	r3, #128	; 0x80
 8000f8c:	d13f      	bne.n	800100e <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000fa0:	b292      	uxth	r2, r2
 8000fa2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d12b      	bne.n	8001008 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0204 	orr.w	r2, r2, #4
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8000fd0:	b29a      	uxth	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f042 0208 	orr.w	r2, r2, #8
 8000fda:	b292      	uxth	r2, r2
 8000fdc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000ff0:	b29b      	uxth	r3, r3
 8000ff2:	089b      	lsrs	r3, r3, #2
 8000ff4:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000ffe:	2101      	movs	r1, #1
 8001000:	6878      	ldr	r0, [r7, #4]
 8001002:	f004 ff5f 	bl	8005ec4 <HAL_PCDEx_LPM_Callback>
 8001006:	e002      	b.n	800100e <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f004 fd89 	bl	8005b20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f002 fd43 	bl	8003a9e <USB_ReadInterrupts>
 8001018:	4603      	mov	r3, r0
 800101a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800101e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001022:	d10e      	bne.n	8001042 <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800102c:	b29a      	uxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001036:	b292      	uxth	r2, r2
 8001038:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f004 fd42 	bl	8005ac6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fd29 	bl	8003a9e <USB_ReadInterrupts>
 800104c:	4603      	mov	r3, r0
 800104e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001056:	d10b      	bne.n	8001070 <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001060:	b29a      	uxth	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800106a:	b292      	uxth	r2, r2
 800106c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}

08001078 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 800108a:	2b01      	cmp	r3, #1
 800108c:	d101      	bne.n	8001092 <HAL_PCD_SetAddress+0x1a>
 800108e:	2302      	movs	r3, #2
 8001090:	e013      	b.n	80010ba <HAL_PCD_SetAddress+0x42>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2201      	movs	r2, #1
 8001096:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	78fa      	ldrb	r2, [r7, #3]
 800109e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	78fa      	ldrb	r2, [r7, #3]
 80010a8:	4611      	mov	r1, r2
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fccc 	bl	8003a48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	4608      	mov	r0, r1
 80010cc:	4611      	mov	r1, r2
 80010ce:	461a      	mov	r2, r3
 80010d0:	4603      	mov	r3, r0
 80010d2:	70fb      	strb	r3, [r7, #3]
 80010d4:	460b      	mov	r3, r1
 80010d6:	803b      	strh	r3, [r7, #0]
 80010d8:	4613      	mov	r3, r2
 80010da:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80010e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da0b      	bge.n	8001100 <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	015b      	lsls	r3, r3, #5
 80010f0:	3328      	adds	r3, #40	; 0x28
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	2201      	movs	r2, #1
 80010fc:	705a      	strb	r2, [r3, #1]
 80010fe:	e00b      	b.n	8001118 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001100:	78fb      	ldrb	r3, [r7, #3]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	015b      	lsls	r3, r3, #5
 8001108:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800110c:	687a      	ldr	r2, [r7, #4]
 800110e:	4413      	add	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2200      	movs	r2, #0
 8001116:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001118:	78fb      	ldrb	r3, [r7, #3]
 800111a:	f003 0307 	and.w	r3, r3, #7
 800111e:	b2da      	uxtb	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001124:	883a      	ldrh	r2, [r7, #0]
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	78ba      	ldrb	r2, [r7, #2]
 800112e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	785b      	ldrb	r3, [r3, #1]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	b29a      	uxth	r2, r3
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001142:	78bb      	ldrb	r3, [r7, #2]
 8001144:	2b02      	cmp	r3, #2
 8001146:	d102      	bne.n	800114e <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001154:	2b01      	cmp	r3, #1
 8001156:	d101      	bne.n	800115c <HAL_PCD_EP_Open+0x9a>
 8001158:	2302      	movs	r3, #2
 800115a:	e00e      	b.n	800117a <HAL_PCD_EP_Open+0xb8>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2201      	movs	r2, #1
 8001160:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	68f9      	ldr	r1, [r7, #12]
 800116a:	4618      	mov	r0, r3
 800116c:	f001 fc58 	bl	8002a20 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 8001178:	7afb      	ldrb	r3, [r7, #11]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	460b      	mov	r3, r1
 800118c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800118e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001192:	2b00      	cmp	r3, #0
 8001194:	da0b      	bge.n	80011ae <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001196:	78fb      	ldrb	r3, [r7, #3]
 8001198:	f003 0307 	and.w	r3, r3, #7
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	3328      	adds	r3, #40	; 0x28
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2201      	movs	r2, #1
 80011aa:	705a      	strb	r2, [r3, #1]
 80011ac:	e00b      	b.n	80011c6 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80011ae:	78fb      	ldrb	r3, [r7, #3]
 80011b0:	f003 0307 	and.w	r3, r3, #7
 80011b4:	015b      	lsls	r3, r3, #5
 80011b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2200      	movs	r2, #0
 80011c4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d101      	bne.n	80011e0 <HAL_PCD_EP_Close+0x5e>
 80011dc:	2302      	movs	r3, #2
 80011de:	e00e      	b.n	80011fe <HAL_PCD_EP_Close+0x7c>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	68f9      	ldr	r1, [r7, #12]
 80011ee:	4618      	mov	r0, r3
 80011f0:	f001 ff06 	bl	8003000 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3710      	adds	r7, #16
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}

08001206 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001206:	b580      	push	{r7, lr}
 8001208:	b086      	sub	sp, #24
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	607a      	str	r2, [r7, #4]
 8001210:	603b      	str	r3, [r7, #0]
 8001212:	460b      	mov	r3, r1
 8001214:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001216:	7afb      	ldrb	r3, [r7, #11]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	015b      	lsls	r3, r3, #5
 800121e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001222:	68fa      	ldr	r2, [r7, #12]
 8001224:	4413      	add	r3, r2
 8001226:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	683a      	ldr	r2, [r7, #0]
 8001232:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2200      	movs	r2, #0
 800123e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001240:	7afb      	ldrb	r3, [r7, #11]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	b2da      	uxtb	r2, r3
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800124c:	7afb      	ldrb	r3, [r7, #11]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	2b00      	cmp	r3, #0
 8001254:	d106      	bne.n	8001264 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6979      	ldr	r1, [r7, #20]
 800125c:	4618      	mov	r0, r3
 800125e:	f002 f865 	bl	800332c <USB_EPStartXfer>
 8001262:	e005      	b.n	8001270 <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6979      	ldr	r1, [r7, #20]
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f85e 	bl	800332c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001270:	2300      	movs	r3, #0
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
 8001282:	460b      	mov	r3, r1
 8001284:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	f003 0307 	and.w	r3, r3, #7
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	330a      	adds	r3, #10
 8001290:	015b      	lsls	r3, r3, #5
 8001292:	4413      	add	r3, r2
 8001294:	3304      	adds	r3, #4
 8001296:	681b      	ldr	r3, [r3, #0]
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	603b      	str	r3, [r7, #0]
 80012b0:	460b      	mov	r3, r1
 80012b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80012b4:	7afb      	ldrb	r3, [r7, #11]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	015b      	lsls	r3, r3, #5
 80012bc:	3328      	adds	r3, #40	; 0x28
 80012be:	68fa      	ldr	r2, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	2201      	movs	r2, #1
 80012da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80012dc:	7afb      	ldrb	r3, [r7, #11]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80012e8:	7afb      	ldrb	r3, [r7, #11]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d106      	bne.n	8001300 <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	6979      	ldr	r1, [r7, #20]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 f817 	bl	800332c <USB_EPStartXfer>
 80012fe:	e005      	b.n	800130c <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6979      	ldr	r1, [r7, #20]
 8001306:	4618      	mov	r0, r3
 8001308:	f002 f810 	bl	800332c <USB_EPStartXfer>
  }

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001322:	78fb      	ldrb	r3, [r7, #3]
 8001324:	f003 0207 	and.w	r2, r3, #7
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	d901      	bls.n	8001334 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e046      	b.n	80013c2 <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001338:	2b00      	cmp	r3, #0
 800133a:	da0b      	bge.n	8001354 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800133c:	78fb      	ldrb	r3, [r7, #3]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	015b      	lsls	r3, r3, #5
 8001344:	3328      	adds	r3, #40	; 0x28
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	2201      	movs	r2, #1
 8001350:	705a      	strb	r2, [r3, #1]
 8001352:	e009      	b.n	8001368 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	015b      	lsls	r3, r3, #5
 8001358:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800135c:	687a      	ldr	r2, [r7, #4]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	2200      	movs	r2, #0
 8001366:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	2201      	movs	r2, #1
 800136c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800136e:	78fb      	ldrb	r3, [r7, #3]
 8001370:	f003 0307 	and.w	r3, r3, #7
 8001374:	b2da      	uxtb	r2, r3
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001380:	2b01      	cmp	r3, #1
 8001382:	d101      	bne.n	8001388 <HAL_PCD_EP_SetStall+0x72>
 8001384:	2302      	movs	r3, #2
 8001386:	e01c      	b.n	80013c2 <HAL_PCD_EP_SetStall+0xac>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2201      	movs	r2, #1
 800138c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	68f9      	ldr	r1, [r7, #12]
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fa80 	bl	800389c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	f003 0307 	and.w	r3, r3, #7
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d108      	bne.n	80013b8 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80013b0:	4619      	mov	r1, r3
 80013b2:	4610      	mov	r0, r2
 80013b4:	f002 fb83 	bl	8003abe <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2200      	movs	r2, #0
 80013bc:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3710      	adds	r7, #16
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b084      	sub	sp, #16
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80013d6:	78fb      	ldrb	r3, [r7, #3]
 80013d8:	f003 020f 	and.w	r2, r3, #15
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d901      	bls.n	80013e8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e03a      	b.n	800145e <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80013e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	da0b      	bge.n	8001408 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	f003 0307 	and.w	r3, r3, #7
 80013f6:	015b      	lsls	r3, r3, #5
 80013f8:	3328      	adds	r3, #40	; 0x28
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	4413      	add	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2201      	movs	r2, #1
 8001404:	705a      	strb	r2, [r3, #1]
 8001406:	e00b      	b.n	8001420 <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001408:	78fb      	ldrb	r3, [r7, #3]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	015b      	lsls	r3, r3, #5
 8001410:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	4413      	add	r3, r2
 8001418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	2200      	movs	r2, #0
 800141e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	2200      	movs	r2, #0
 8001424:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	b2da      	uxtb	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_PCD_EP_ClrStall+0x76>
 800143c:	2302      	movs	r3, #2
 800143e:	e00e      	b.n	800145e <HAL_PCD_EP_ClrStall+0x94>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68f9      	ldr	r1, [r7, #12]
 800144e:	4618      	mov	r0, r3
 8001450:	f002 fa66 	bl	8003920 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
	...

08001468 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b089      	sub	sp, #36	; 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001470:	e274      	b.n	800195c <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800147a:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800147c:	8afb      	ldrh	r3, [r7, #22]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f003 030f 	and.w	r3, r3, #15
 8001484:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 8001486:	7d7b      	ldrb	r3, [r7, #21]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f040 813c 	bne.w	8001706 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800148e:	8afb      	ldrh	r3, [r7, #22]
 8001490:	f003 0310 	and.w	r3, r3, #16
 8001494:	2b00      	cmp	r3, #0
 8001496:	d14f      	bne.n	8001538 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	b29b      	uxth	r3, r3
 80014a0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80014a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80014a8:	b29c      	uxth	r4, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80014b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	3328      	adds	r3, #40	; 0x28
 80014be:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80014c8:	b29b      	uxth	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	4413      	add	r3, r2
 80014d4:	687a      	ldr	r2, [r7, #4]
 80014d6:	6812      	ldr	r2, [r2, #0]
 80014d8:	4413      	add	r3, r2
 80014da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	695a      	ldr	r2, [r3, #20]
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	441a      	add	r2, r3
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80014f6:	2100      	movs	r1, #0
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f004 facd 	bl	8005a98 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001504:	b2db      	uxtb	r3, r3
 8001506:	2b00      	cmp	r3, #0
 8001508:	f000 8228 	beq.w	800195c <PCD_EP_ISR_Handler+0x4f4>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f040 8223 	bne.w	800195c <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800151c:	b2db      	uxtb	r3, r3
 800151e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001522:	b2da      	uxtb	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	b292      	uxth	r2, r2
 800152a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001536:	e211      	b.n	800195c <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800153e:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	881b      	ldrh	r3, [r3, #0]
 8001546:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001548:	8a7b      	ldrh	r3, [r7, #18]
 800154a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800154e:	2b00      	cmp	r3, #0
 8001550:	d031      	beq.n	80015b6 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800155a:	b29b      	uxth	r3, r3
 800155c:	461a      	mov	r2, r3
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	00db      	lsls	r3, r3, #3
 8001564:	4413      	add	r3, r2
 8001566:	687a      	ldr	r2, [r7, #4]
 8001568:	6812      	ldr	r2, [r2, #0]
 800156a:	4413      	add	r3, r2
 800156c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6818      	ldr	r0, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800158c:	b29b      	uxth	r3, r3
 800158e:	f002 fae3 	bl	8003b58 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	b29a      	uxth	r2, r3
 800159a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800159e:	4013      	ands	r3, r2
 80015a0:	b29c      	uxth	r4, r3
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80015aa:	b292      	uxth	r2, r2
 80015ac:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	f004 fa48 	bl	8005a44 <HAL_PCD_SetupStageCallback>
 80015b4:	e1d2      	b.n	800195c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80015b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f280 81ce 	bge.w	800195c <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	881b      	ldrh	r3, [r3, #0]
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80015cc:	4013      	ands	r3, r2
 80015ce:	b29c      	uxth	r4, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 80015d8:	b292      	uxth	r2, r2
 80015da:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80015e4:	b29b      	uxth	r3, r3
 80015e6:	461a      	mov	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	4413      	add	r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	6812      	ldr	r2, [r2, #0]
 80015f4:	4413      	add	r3, r2
 80015f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80015fa:	881b      	ldrh	r3, [r3, #0]
 80015fc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	69db      	ldr	r3, [r3, #28]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d019      	beq.n	8001640 <PCD_EP_ISR_Handler+0x1d8>
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d015      	beq.n	8001640 <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6818      	ldr	r0, [r3, #0]
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	6959      	ldr	r1, [r3, #20]
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001624:	b29b      	uxth	r3, r3
 8001626:	f002 fa97 	bl	8003b58 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	441a      	add	r2, r3
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001638:	2100      	movs	r1, #0
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f004 fa14 	bl	8005a68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	461c      	mov	r4, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800164e:	b29b      	uxth	r3, r3
 8001650:	441c      	add	r4, r3
 8001652:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8001656:	461c      	mov	r4, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	691b      	ldr	r3, [r3, #16]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10e      	bne.n	800167e <PCD_EP_ISR_Handler+0x216>
 8001660:	8823      	ldrh	r3, [r4, #0]
 8001662:	b29b      	uxth	r3, r3
 8001664:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001668:	b29b      	uxth	r3, r3
 800166a:	8023      	strh	r3, [r4, #0]
 800166c:	8823      	ldrh	r3, [r4, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001674:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001678:	b29b      	uxth	r3, r3
 800167a:	8023      	strh	r3, [r4, #0]
 800167c:	e02d      	b.n	80016da <PCD_EP_ISR_Handler+0x272>
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	2b3e      	cmp	r3, #62	; 0x3e
 8001684:	d812      	bhi.n	80016ac <PCD_EP_ISR_Handler+0x244>
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	085b      	lsrs	r3, r3, #1
 800168c:	61bb      	str	r3, [r7, #24]
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	f003 0301 	and.w	r3, r3, #1
 8001696:	2b00      	cmp	r3, #0
 8001698:	d002      	beq.n	80016a0 <PCD_EP_ISR_Handler+0x238>
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	3301      	adds	r3, #1
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	029b      	lsls	r3, r3, #10
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	8023      	strh	r3, [r4, #0]
 80016aa:	e016      	b.n	80016da <PCD_EP_ISR_Handler+0x272>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	095b      	lsrs	r3, r3, #5
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	691b      	ldr	r3, [r3, #16]
 80016b8:	f003 031f 	and.w	r3, r3, #31
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d102      	bne.n	80016c6 <PCD_EP_ISR_Handler+0x25e>
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	029b      	lsls	r3, r3, #10
 80016cc:	b29b      	uxth	r3, r3
 80016ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80016d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	881b      	ldrh	r3, [r3, #0]
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80016ea:	b29c      	uxth	r4, r3
 80016ec:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80016f0:	b29c      	uxth	r4, r3
 80016f2:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 80016f6:	b29c      	uxth	r4, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b9e      	ldr	r3, [pc, #632]	; (8001978 <PCD_EP_ISR_Handler+0x510>)
 80016fe:	4323      	orrs	r3, r4
 8001700:	b29b      	uxth	r3, r3
 8001702:	8013      	strh	r3, [r2, #0]
 8001704:	e12a      	b.n	800195c <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	7d7b      	ldrb	r3, [r7, #21]
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	4413      	add	r3, r2
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001716:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800171a:	2b00      	cmp	r3, #0
 800171c:	f280 80cb 	bge.w	80018b6 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	461a      	mov	r2, r3
 8001726:	7d7b      	ldrb	r3, [r7, #21]
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	4413      	add	r3, r2
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	b29a      	uxth	r2, r3
 8001730:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001734:	4013      	ands	r3, r2
 8001736:	b29c      	uxth	r4, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	7d7b      	ldrb	r3, [r7, #21]
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001748:	b292      	uxth	r2, r2
 800174a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800174c:	7d7b      	ldrb	r3, [r7, #21]
 800174e:	015b      	lsls	r3, r3, #5
 8001750:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	4413      	add	r3, r2
 8001758:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	7b1b      	ldrb	r3, [r3, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d11f      	bne.n	80017a2 <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800176a:	b29b      	uxth	r3, r3
 800176c:	461a      	mov	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4413      	add	r3, r2
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	4413      	add	r3, r2
 800177c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001780:	881b      	ldrh	r3, [r3, #0]
 8001782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001786:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001788:	8bfb      	ldrh	r3, [r7, #30]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d06e      	beq.n	800186c <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6818      	ldr	r0, [r3, #0]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6959      	ldr	r1, [r3, #20]
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	88da      	ldrh	r2, [r3, #6]
 800179a:	8bfb      	ldrh	r3, [r7, #30]
 800179c:	f002 f9dc 	bl	8003b58 <USB_ReadPMA>
 80017a0:	e064      	b.n	800186c <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	461a      	mov	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4413      	add	r3, r2
 80017b0:	881b      	ldrh	r3, [r3, #0]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80017b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017bc:	b29c      	uxth	r4, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	441a      	add	r2, r3
 80017cc:	4b6b      	ldr	r3, [pc, #428]	; (800197c <PCD_EP_ISR_Handler+0x514>)
 80017ce:	4323      	orrs	r3, r4
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	461a      	mov	r2, r3
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	881b      	ldrh	r3, [r3, #0]
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d01f      	beq.n	800182e <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	461a      	mov	r2, r3
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	00db      	lsls	r3, r3, #3
 8001800:	4413      	add	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	4413      	add	r3, r2
 8001808:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800180c:	881b      	ldrh	r3, [r3, #0]
 800180e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001812:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001814:	8bfb      	ldrh	r3, [r7, #30]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d028      	beq.n	800186c <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6818      	ldr	r0, [r3, #0]
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6959      	ldr	r1, [r3, #20]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	891a      	ldrh	r2, [r3, #8]
 8001826:	8bfb      	ldrh	r3, [r7, #30]
 8001828:	f002 f996 	bl	8003b58 <USB_ReadPMA>
 800182c:	e01e      	b.n	800186c <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001836:	b29b      	uxth	r3, r3
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	4413      	add	r3, r2
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	4413      	add	r3, r2
 8001848:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800184c:	881b      	ldrh	r3, [r3, #0]
 800184e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001852:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001854:	8bfb      	ldrh	r3, [r7, #30]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d008      	beq.n	800186c <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6818      	ldr	r0, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	6959      	ldr	r1, [r3, #20]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	895a      	ldrh	r2, [r3, #10]
 8001866:	8bfb      	ldrh	r3, [r7, #30]
 8001868:	f002 f976 	bl	8003b58 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	69da      	ldr	r2, [r3, #28]
 8001870:	8bfb      	ldrh	r3, [r7, #30]
 8001872:	441a      	add	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	695a      	ldr	r2, [r3, #20]
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	441a      	add	r2, r3
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <PCD_EP_ISR_Handler+0x42e>
 800188c:	8bfa      	ldrh	r2, [r7, #30]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	429a      	cmp	r2, r3
 8001894:	d206      	bcs.n	80018a4 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	4619      	mov	r1, r3
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f004 f8e3 	bl	8005a68 <HAL_PCD_DataOutStageCallback>
 80018a2:	e008      	b.n	80018b6 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	7819      	ldrb	r1, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	699b      	ldr	r3, [r3, #24]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fca8 	bl	8001206 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80018b6:	8a7b      	ldrh	r3, [r7, #18]
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d04d      	beq.n	800195c <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 80018c0:	7d7b      	ldrb	r3, [r7, #21]
 80018c2:	015b      	lsls	r3, r3, #5
 80018c4:	3328      	adds	r3, #40	; 0x28
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	461a      	mov	r2, r3
 80018d2:	7d7b      	ldrb	r3, [r7, #21]
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	4413      	add	r3, r2
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	b29b      	uxth	r3, r3
 80018dc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80018e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e4:	b29c      	uxth	r4, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	461a      	mov	r2, r3
 80018ec:	7d7b      	ldrb	r3, [r7, #21]
 80018ee:	009b      	lsls	r3, r3, #2
 80018f0:	441a      	add	r2, r3
 80018f2:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80018f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001906:	b29b      	uxth	r3, r3
 8001908:	461a      	mov	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	4413      	add	r3, r2
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	4413      	add	r3, r2
 8001918:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	441a      	add	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	699b      	ldr	r3, [r3, #24]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d106      	bne.n	800194a <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	4619      	mov	r1, r3
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f004 f8a8 	bl	8005a98 <HAL_PCD_DataInStageCallback>
 8001948:	e008      	b.n	800195c <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	7819      	ldrb	r1, [r3, #0]
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	695a      	ldr	r2, [r3, #20]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f7ff fca4 	bl	80012a4 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001964:	b29b      	uxth	r3, r3
 8001966:	b21b      	sxth	r3, r3
 8001968:	2b00      	cmp	r3, #0
 800196a:	f6ff ad82 	blt.w	8001472 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3724      	adds	r7, #36	; 0x24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd90      	pop	{r4, r7, pc}
 8001978:	ffff8080 	.word	0xffff8080
 800197c:	ffff80c0 	.word	0xffff80c0

08001980 <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001980:	b480      	push	{r7}
 8001982:	b087      	sub	sp, #28
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	460b      	mov	r3, r1
 800198c:	817b      	strh	r3, [r7, #10]
 800198e:	4613      	mov	r3, r2
 8001990:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001992:	897b      	ldrh	r3, [r7, #10]
 8001994:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001998:	b29b      	uxth	r3, r3
 800199a:	2b00      	cmp	r3, #0
 800199c:	d008      	beq.n	80019b0 <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800199e:	897b      	ldrh	r3, [r7, #10]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	015b      	lsls	r3, r3, #5
 80019a6:	3328      	adds	r3, #40	; 0x28
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4413      	add	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	e006      	b.n	80019be <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019b0:	897b      	ldrh	r3, [r7, #10]
 80019b2:	015b      	lsls	r3, r3, #5
 80019b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80019be:	893b      	ldrh	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d107      	bne.n	80019d4 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	2200      	movs	r2, #0
 80019c8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	80da      	strh	r2, [r3, #6]
 80019d2:	e00b      	b.n	80019ec <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	2201      	movs	r2, #1
 80019d8:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	b29a      	uxth	r2, r3
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	0c1b      	lsrs	r3, r3, #16
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	371c      	adds	r7, #28
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr

080019fa <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b085      	sub	sp, #20
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a1e:	b29b      	uxth	r3, r3
 8001a20:	f043 0301 	orr.w	r3, r3, #1
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f043 0302 	orr.w	r3, r3, #2
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001a40:	2300      	movs	r3, #0
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3714      	adds	r7, #20
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d141      	bne.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a5e:	4b4b      	ldr	r3, [pc, #300]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6a:	d131      	bne.n	8001ad0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a6c:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a72:	4a46      	ldr	r2, [pc, #280]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a7c:	4b43      	ldr	r3, [pc, #268]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a84:	4a41      	ldr	r2, [pc, #260]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a8c:	4b40      	ldr	r3, [pc, #256]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2232      	movs	r2, #50	; 0x32
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	4a3f      	ldr	r2, [pc, #252]	; (8001b94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	0c9b      	lsrs	r3, r3, #18
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aa2:	e002      	b.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aac:	695b      	ldr	r3, [r3, #20]
 8001aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ab6:	d102      	bne.n	8001abe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f2      	bne.n	8001aa4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001abe:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac0:	695b      	ldr	r3, [r3, #20]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aca:	d158      	bne.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e057      	b.n	8001b80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad0:	4b2e      	ldr	r3, [pc, #184]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ad6:	4a2d      	ldr	r2, [pc, #180]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ae0:	e04d      	b.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ae8:	d141      	bne.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001aea:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001af6:	d131      	bne.n	8001b5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001afe:	4a23      	ldr	r2, [pc, #140]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b08:	4b20      	ldr	r3, [pc, #128]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b10:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b18:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2232      	movs	r2, #50	; 0x32
 8001b1e:	fb02 f303 	mul.w	r3, r2, r3
 8001b22:	4a1c      	ldr	r2, [pc, #112]	; (8001b94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b24:	fba2 2303 	umull	r2, r3, r2, r3
 8001b28:	0c9b      	lsrs	r3, r3, #18
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b2e:	e002      	b.n	8001b36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b42:	d102      	bne.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d1f2      	bne.n	8001b30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4c:	695b      	ldr	r3, [r3, #20]
 8001b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b56:	d112      	bne.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e011      	b.n	8001b80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b5c:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b62:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b6c:	e007      	b.n	8001b7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b76:	4a05      	ldr	r2, [pc, #20]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b7c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40007000 	.word	0x40007000
 8001b90:	2000006c 	.word	0x2000006c
 8001b94:	431bde83 	.word	0x431bde83

08001b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e308      	b.n	80021bc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d075      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bb6:	4ba3      	ldr	r3, [pc, #652]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bc0:	4ba0      	ldr	r3, [pc, #640]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	f003 0303 	and.w	r3, r3, #3
 8001bc8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b0c      	cmp	r3, #12
 8001bce:	d102      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x3e>
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_OscConfig+0x44>
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b08      	cmp	r3, #8
 8001bda:	d10b      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bdc:	4b99      	ldr	r3, [pc, #612]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d05b      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x108>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d157      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e2e3      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bfc:	d106      	bne.n	8001c0c <HAL_RCC_OscConfig+0x74>
 8001bfe:	4b91      	ldr	r3, [pc, #580]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a90      	ldr	r2, [pc, #576]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e01d      	b.n	8001c48 <HAL_RCC_OscConfig+0xb0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c14:	d10c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x98>
 8001c16:	4b8b      	ldr	r3, [pc, #556]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a8a      	ldr	r2, [pc, #552]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c20:	6013      	str	r3, [r2, #0]
 8001c22:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a87      	ldr	r2, [pc, #540]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2c:	6013      	str	r3, [r2, #0]
 8001c2e:	e00b      	b.n	8001c48 <HAL_RCC_OscConfig+0xb0>
 8001c30:	4b84      	ldr	r3, [pc, #528]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a83      	ldr	r2, [pc, #524]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	4b81      	ldr	r3, [pc, #516]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a80      	ldr	r2, [pc, #512]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d013      	beq.n	8001c78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c50:	f7fe fb46 	bl	80002e0 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c56:	e008      	b.n	8001c6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c58:	f7fe fb42 	bl	80002e0 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	2b64      	cmp	r3, #100	; 0x64
 8001c64:	d901      	bls.n	8001c6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e2a8      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c6a:	4b76      	ldr	r3, [pc, #472]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f0      	beq.n	8001c58 <HAL_RCC_OscConfig+0xc0>
 8001c76:	e014      	b.n	8001ca2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7fe fb32 	bl	80002e0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c80:	f7fe fb2e 	bl	80002e0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b64      	cmp	r3, #100	; 0x64
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e294      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c92:	4b6c      	ldr	r3, [pc, #432]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0xe8>
 8001c9e:	e000      	b.n	8001ca2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d075      	beq.n	8001d9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cae:	4b65      	ldr	r3, [pc, #404]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	f003 030c 	and.w	r3, r3, #12
 8001cb6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cb8:	4b62      	ldr	r3, [pc, #392]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	2b0c      	cmp	r3, #12
 8001cc6:	d102      	bne.n	8001cce <HAL_RCC_OscConfig+0x136>
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d002      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x13c>
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d11f      	bne.n	8001d14 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cd4:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d005      	beq.n	8001cec <HAL_RCC_OscConfig+0x154>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d101      	bne.n	8001cec <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e267      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cec:	4b55      	ldr	r3, [pc, #340]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	4952      	ldr	r1, [pc, #328]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d00:	4b51      	ldr	r3, [pc, #324]	; (8001e48 <HAL_RCC_OscConfig+0x2b0>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fa9f 	bl	8000248 <HAL_InitTick>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d043      	beq.n	8001d98 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e253      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d023      	beq.n	8001d64 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d1c:	4b49      	ldr	r3, [pc, #292]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a48      	ldr	r2, [pc, #288]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7fe fada 	bl	80002e0 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d30:	f7fe fad6 	bl	80002e0 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e23c      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d42:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0f0      	beq.n	8001d30 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4e:	4b3d      	ldr	r3, [pc, #244]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	061b      	lsls	r3, r3, #24
 8001d5c:	4939      	ldr	r1, [pc, #228]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	604b      	str	r3, [r1, #4]
 8001d62:	e01a      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d64:	4b37      	ldr	r3, [pc, #220]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a36      	ldr	r2, [pc, #216]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d6a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d70:	f7fe fab6 	bl	80002e0 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d78:	f7fe fab2 	bl	80002e0 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e218      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d8a:	4b2e      	ldr	r3, [pc, #184]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x1e0>
 8001d96:	e000      	b.n	8001d9a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d98:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d03c      	beq.n	8001e20 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d01c      	beq.n	8001de8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dae:	4b25      	ldr	r3, [pc, #148]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db4:	4a23      	ldr	r2, [pc, #140]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbe:	f7fe fa8f 	bl	80002e0 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc6:	f7fe fa8b 	bl	80002e0 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1f1      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dd8:	4b1a      	ldr	r3, [pc, #104]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dde:	f003 0302 	and.w	r3, r3, #2
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0ef      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x22e>
 8001de6:	e01b      	b.n	8001e20 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de8:	4b16      	ldr	r3, [pc, #88]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dee:	4a15      	ldr	r2, [pc, #84]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	f023 0301 	bic.w	r3, r3, #1
 8001df4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7fe fa72 	bl	80002e0 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dfe:	e008      	b.n	8001e12 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e00:	f7fe fa6e 	bl	80002e0 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e1d4      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e18:	f003 0302 	and.w	r3, r3, #2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1ef      	bne.n	8001e00 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 80ab 	beq.w	8001f84 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2b4>
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e005      	b.n	8001e4e <HAL_RCC_OscConfig+0x2b6>
 8001e42:	bf00      	nop
 8001e44:	40021000 	.word	0x40021000
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d00d      	beq.n	8001e6e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e52:	4baf      	ldr	r3, [pc, #700]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e56:	4aae      	ldr	r2, [pc, #696]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e5c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e5e:	4bac      	ldr	r3, [pc, #688]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e6e:	4ba9      	ldr	r3, [pc, #676]	; (8002114 <HAL_RCC_OscConfig+0x57c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d118      	bne.n	8001eac <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e7a:	4ba6      	ldr	r3, [pc, #664]	; (8002114 <HAL_RCC_OscConfig+0x57c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4aa5      	ldr	r2, [pc, #660]	; (8002114 <HAL_RCC_OscConfig+0x57c>)
 8001e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e86:	f7fe fa2b 	bl	80002e0 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8e:	f7fe fa27 	bl	80002e0 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e18d      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea0:	4b9c      	ldr	r3, [pc, #624]	; (8002114 <HAL_RCC_OscConfig+0x57c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d108      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x32e>
 8001eb4:	4b96      	ldr	r3, [pc, #600]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eba:	4a95      	ldr	r2, [pc, #596]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ec4:	e024      	b.n	8001f10 <HAL_RCC_OscConfig+0x378>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	2b05      	cmp	r3, #5
 8001ecc:	d110      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x358>
 8001ece:	4b90      	ldr	r3, [pc, #576]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed4:	4a8e      	ldr	r2, [pc, #568]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ede:	4b8c      	ldr	r3, [pc, #560]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	4a8a      	ldr	r2, [pc, #552]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001eee:	e00f      	b.n	8001f10 <HAL_RCC_OscConfig+0x378>
 8001ef0:	4b87      	ldr	r3, [pc, #540]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	4a86      	ldr	r2, [pc, #536]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f023 0301 	bic.w	r3, r3, #1
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f00:	4b83      	ldr	r3, [pc, #524]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	4a82      	ldr	r2, [pc, #520]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001f08:	f023 0304 	bic.w	r3, r3, #4
 8001f0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d016      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f18:	f7fe f9e2 	bl	80002e0 <HAL_GetTick>
 8001f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f1e:	e00a      	b.n	8001f36 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f20:	f7fe f9de 	bl	80002e0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e142      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f36:	4b76      	ldr	r3, [pc, #472]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0ed      	beq.n	8001f20 <HAL_RCC_OscConfig+0x388>
 8001f44:	e015      	b.n	8001f72 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f46:	f7fe f9cb 	bl	80002e0 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f4e:	f7fe f9c7 	bl	80002e0 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e12b      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f64:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d1ed      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f72:	7ffb      	ldrb	r3, [r7, #31]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d105      	bne.n	8001f84 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f78:	4b65      	ldr	r3, [pc, #404]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7c:	4a64      	ldr	r2, [pc, #400]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001f7e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f82:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0320 	and.w	r3, r3, #32
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d03c      	beq.n	800200a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01c      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f98:	4b5d      	ldr	r3, [pc, #372]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f9e:	4a5c      	ldr	r2, [pc, #368]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa8:	f7fe f99a 	bl	80002e0 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fae:	e008      	b.n	8001fc2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fb0:	f7fe f996 	bl	80002e0 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	2b02      	cmp	r3, #2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e0fc      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001fc2:	4b53      	ldr	r3, [pc, #332]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ef      	beq.n	8001fb0 <HAL_RCC_OscConfig+0x418>
 8001fd0:	e01b      	b.n	800200a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001fd2:	4b4f      	ldr	r3, [pc, #316]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001fd4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fd8:	4a4d      	ldr	r2, [pc, #308]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001fda:	f023 0301 	bic.w	r3, r3, #1
 8001fde:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe2:	f7fe f97d 	bl	80002e0 <HAL_GetTick>
 8001fe6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fe8:	e008      	b.n	8001ffc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fea:	f7fe f979 	bl	80002e0 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	2b02      	cmp	r3, #2
 8001ff6:	d901      	bls.n	8001ffc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e0df      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ffc:	4b44      	ldr	r3, [pc, #272]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8001ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1ef      	bne.n	8001fea <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	2b00      	cmp	r3, #0
 8002010:	f000 80d3 	beq.w	80021ba <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002014:	4b3e      	ldr	r3, [pc, #248]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 030c 	and.w	r3, r3, #12
 800201c:	2b0c      	cmp	r3, #12
 800201e:	f000 808d 	beq.w	800213c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d15a      	bne.n	80020e0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b39      	ldr	r3, [pc, #228]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a38      	ldr	r2, [pc, #224]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8002030:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002034:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002036:	f7fe f953 	bl	80002e0 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800203e:	f7fe f94f 	bl	80002e0 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e0b5      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002050:	4b2f      	ldr	r3, [pc, #188]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d1f0      	bne.n	800203e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205c:	4b2c      	ldr	r3, [pc, #176]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4b2d      	ldr	r3, [pc, #180]	; (8002118 <HAL_RCC_OscConfig+0x580>)
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6a11      	ldr	r1, [r2, #32]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800206c:	3a01      	subs	r2, #1
 800206e:	0112      	lsls	r2, r2, #4
 8002070:	4311      	orrs	r1, r2
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002076:	0212      	lsls	r2, r2, #8
 8002078:	4311      	orrs	r1, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800207e:	0852      	lsrs	r2, r2, #1
 8002080:	3a01      	subs	r2, #1
 8002082:	0552      	lsls	r2, r2, #21
 8002084:	4311      	orrs	r1, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800208a:	0852      	lsrs	r2, r2, #1
 800208c:	3a01      	subs	r2, #1
 800208e:	0652      	lsls	r2, r2, #25
 8002090:	4311      	orrs	r1, r2
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002096:	06d2      	lsls	r2, r2, #27
 8002098:	430a      	orrs	r2, r1
 800209a:	491d      	ldr	r1, [pc, #116]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 800209c:	4313      	orrs	r3, r2
 800209e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a0:	4b1b      	ldr	r3, [pc, #108]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a1a      	ldr	r2, [pc, #104]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020aa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ac:	4b18      	ldr	r3, [pc, #96]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7fe f912 	bl	80002e0 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c0:	f7fe f90e 	bl	80002e0 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e074      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d2:	4b0f      	ldr	r3, [pc, #60]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x528>
 80020de:	e06c      	b.n	80021ba <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b0b      	ldr	r3, [pc, #44]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020ea:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	4a07      	ldr	r2, [pc, #28]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020f2:	f023 0303 	bic.w	r3, r3, #3
 80020f6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <HAL_RCC_OscConfig+0x578>)
 80020fe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002106:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002108:	f7fe f8ea 	bl	80002e0 <HAL_GetTick>
 800210c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210e:	e00e      	b.n	800212e <HAL_RCC_OscConfig+0x596>
 8002110:	40021000 	.word	0x40021000
 8002114:	40007000 	.word	0x40007000
 8002118:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800211c:	f7fe f8e0 	bl	80002e0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e046      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800212e:	4b25      	ldr	r3, [pc, #148]	; (80021c4 <HAL_RCC_OscConfig+0x62c>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x584>
 800213a:	e03e      	b.n	80021ba <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	69db      	ldr	r3, [r3, #28]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d101      	bne.n	8002148 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e039      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002148:	4b1e      	ldr	r3, [pc, #120]	; (80021c4 <HAL_RCC_OscConfig+0x62c>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f003 0203 	and.w	r2, r3, #3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	429a      	cmp	r2, r3
 800215a:	d12c      	bne.n	80021b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002166:	3b01      	subs	r3, #1
 8002168:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800216a:	429a      	cmp	r2, r3
 800216c:	d123      	bne.n	80021b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d11b      	bne.n	80021b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d113      	bne.n	80021b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002198:	085b      	lsrs	r3, r3, #1
 800219a:	3b01      	subs	r3, #1
 800219c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d109      	bne.n	80021b6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	3b01      	subs	r3, #1
 80021b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d001      	beq.n	80021ba <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000

080021c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b086      	sub	sp, #24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e11e      	b.n	800241e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b91      	ldr	r3, [pc, #580]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d910      	bls.n	8002210 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b8e      	ldr	r3, [pc, #568]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 020f 	bic.w	r2, r3, #15
 80021f6:	498c      	ldr	r1, [pc, #560]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b8a      	ldr	r3, [pc, #552]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e106      	b.n	800241e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d073      	beq.n	8002304 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d129      	bne.n	8002278 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002224:	4b81      	ldr	r3, [pc, #516]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0f4      	b.n	800241e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002234:	f000 f966 	bl	8002504 <RCC_GetSysClockFreqFromPLLSource>
 8002238:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	4a7c      	ldr	r2, [pc, #496]	; (8002430 <HAL_RCC_ClockConfig+0x268>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d93f      	bls.n	80022c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002242:	4b7a      	ldr	r3, [pc, #488]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002244:	689b      	ldr	r3, [r3, #8]
 8002246:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002256:	2b00      	cmp	r3, #0
 8002258:	d033      	beq.n	80022c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d12f      	bne.n	80022c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002262:	4b72      	ldr	r3, [pc, #456]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800226a:	4a70      	ldr	r2, [pc, #448]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 800226c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002270:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002272:	2380      	movs	r3, #128	; 0x80
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e024      	b.n	80022c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	2b02      	cmp	r3, #2
 800227e:	d107      	bne.n	8002290 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002280:	4b6a      	ldr	r3, [pc, #424]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e0c6      	b.n	800241e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002290:	4b66      	ldr	r3, [pc, #408]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002298:	2b00      	cmp	r3, #0
 800229a:	d101      	bne.n	80022a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800229c:	2301      	movs	r3, #1
 800229e:	e0be      	b.n	800241e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022a0:	f000 f8ce 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80022a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4a61      	ldr	r2, [pc, #388]	; (8002430 <HAL_RCC_ClockConfig+0x268>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d909      	bls.n	80022c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ae:	4b5f      	ldr	r3, [pc, #380]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022b6:	4a5d      	ldr	r2, [pc, #372]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80022b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022be:	2380      	movs	r3, #128	; 0x80
 80022c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022c2:	4b5a      	ldr	r3, [pc, #360]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 0203 	bic.w	r2, r3, #3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	4957      	ldr	r1, [pc, #348]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022d4:	f7fe f804 	bl	80002e0 <HAL_GetTick>
 80022d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	e00a      	b.n	80022f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022dc:	f7fe f800 	bl	80002e0 <HAL_GetTick>
 80022e0:	4602      	mov	r2, r0
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e095      	b.n	800241e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f2:	4b4e      	ldr	r3, [pc, #312]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 020c 	and.w	r2, r3, #12
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	429a      	cmp	r2, r3
 8002302:	d1eb      	bne.n	80022dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d023      	beq.n	8002358 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b43      	ldr	r3, [pc, #268]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	4a42      	ldr	r2, [pc, #264]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002322:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002326:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d007      	beq.n	8002344 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002334:	4b3d      	ldr	r3, [pc, #244]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800233c:	4a3b      	ldr	r2, [pc, #236]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 800233e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002342:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4936      	ldr	r1, [pc, #216]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
 8002356:	e008      	b.n	800236a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b80      	cmp	r3, #128	; 0x80
 800235c:	d105      	bne.n	800236a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800235e:	4b33      	ldr	r3, [pc, #204]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4a32      	ldr	r2, [pc, #200]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 8002364:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002368:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800236a:	4b2f      	ldr	r3, [pc, #188]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	683a      	ldr	r2, [r7, #0]
 8002374:	429a      	cmp	r2, r3
 8002376:	d21d      	bcs.n	80023b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002378:	4b2b      	ldr	r3, [pc, #172]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f023 020f 	bic.w	r2, r3, #15
 8002380:	4929      	ldr	r1, [pc, #164]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002388:	f7fd ffaa 	bl	80002e0 <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800238e:	e00a      	b.n	80023a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002390:	f7fd ffa6 	bl	80002e0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f241 3288 	movw	r2, #5000	; 0x1388
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e03b      	b.n	800241e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023a6:	4b20      	ldr	r3, [pc, #128]	; (8002428 <HAL_RCC_ClockConfig+0x260>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d1ed      	bne.n	8002390 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0304 	and.w	r3, r3, #4
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d008      	beq.n	80023d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	4917      	ldr	r1, [pc, #92]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80023ce:	4313      	orrs	r3, r2
 80023d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d009      	beq.n	80023f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023de:	4b13      	ldr	r3, [pc, #76]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	00db      	lsls	r3, r3, #3
 80023ec:	490f      	ldr	r1, [pc, #60]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023f2:	f000 f825 	bl	8002440 <HAL_RCC_GetSysClockFreq>
 80023f6:	4601      	mov	r1, r0
 80023f8:	4b0c      	ldr	r3, [pc, #48]	; (800242c <HAL_RCC_ClockConfig+0x264>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	091b      	lsrs	r3, r3, #4
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <HAL_RCC_ClockConfig+0x26c>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	fa21 f303 	lsr.w	r3, r1, r3
 800240e:	4a0a      	ldr	r2, [pc, #40]	; (8002438 <HAL_RCC_ClockConfig+0x270>)
 8002410:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002412:	4b0a      	ldr	r3, [pc, #40]	; (800243c <HAL_RCC_ClockConfig+0x274>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f7fd ff16 	bl	8000248 <HAL_InitTick>
 800241c:	4603      	mov	r3, r0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40022000 	.word	0x40022000
 800242c:	40021000 	.word	0x40021000
 8002430:	04c4b400 	.word	0x04c4b400
 8002434:	080062f8 	.word	0x080062f8
 8002438:	2000006c 	.word	0x2000006c
 800243c:	20000000 	.word	0x20000000

08002440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002446:	4b2c      	ldr	r3, [pc, #176]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
 800244e:	2b04      	cmp	r3, #4
 8002450:	d102      	bne.n	8002458 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002452:	4b2a      	ldr	r3, [pc, #168]	; (80024fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	e047      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002458:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	2b08      	cmp	r3, #8
 8002462:	d102      	bne.n	800246a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002464:	4b26      	ldr	r3, [pc, #152]	; (8002500 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	e03e      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800246a:	4b23      	ldr	r3, [pc, #140]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b0c      	cmp	r3, #12
 8002474:	d136      	bne.n	80024e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002476:	4b20      	ldr	r3, [pc, #128]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	f003 0303 	and.w	r3, r3, #3
 800247e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002480:	4b1d      	ldr	r3, [pc, #116]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3301      	adds	r3, #1
 800248c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b03      	cmp	r3, #3
 8002492:	d10c      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002494:	4a1a      	ldr	r2, [pc, #104]	; (8002500 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	fbb2 f3f3 	udiv	r3, r2, r3
 800249c:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800249e:	68d2      	ldr	r2, [r2, #12]
 80024a0:	0a12      	lsrs	r2, r2, #8
 80024a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024a6:	fb02 f303 	mul.w	r3, r2, r3
 80024aa:	617b      	str	r3, [r7, #20]
      break;
 80024ac:	e00c      	b.n	80024c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ae:	4a13      	ldr	r2, [pc, #76]	; (80024fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b6:	4a10      	ldr	r2, [pc, #64]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b8:	68d2      	ldr	r2, [r2, #12]
 80024ba:	0a12      	lsrs	r2, r2, #8
 80024bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	617b      	str	r3, [r7, #20]
      break;
 80024c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024c8:	4b0b      	ldr	r3, [pc, #44]	; (80024f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	0e5b      	lsrs	r3, r3, #25
 80024ce:	f003 0303 	and.w	r3, r3, #3
 80024d2:	3301      	adds	r3, #1
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80024d8:	697a      	ldr	r2, [r7, #20]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e0:	613b      	str	r3, [r7, #16]
 80024e2:	e001      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80024e8:	693b      	ldr	r3, [r7, #16]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	40021000 	.word	0x40021000
 80024fc:	00f42400 	.word	0x00f42400
 8002500:	007a1200 	.word	0x007a1200

08002504 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800250a:	4b1e      	ldr	r3, [pc, #120]	; (8002584 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	f003 0303 	and.w	r3, r3, #3
 8002512:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002514:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	3301      	adds	r3, #1
 8002520:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d10c      	bne.n	8002542 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002528:	4a17      	ldr	r2, [pc, #92]	; (8002588 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	4a14      	ldr	r2, [pc, #80]	; (8002584 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002532:	68d2      	ldr	r2, [r2, #12]
 8002534:	0a12      	lsrs	r2, r2, #8
 8002536:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800253a:	fb02 f303 	mul.w	r3, r2, r3
 800253e:	617b      	str	r3, [r7, #20]
    break;
 8002540:	e00c      	b.n	800255c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002542:	4a12      	ldr	r2, [pc, #72]	; (800258c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	4a0e      	ldr	r2, [pc, #56]	; (8002584 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800254c:	68d2      	ldr	r2, [r2, #12]
 800254e:	0a12      	lsrs	r2, r2, #8
 8002550:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002554:	fb02 f303 	mul.w	r3, r2, r3
 8002558:	617b      	str	r3, [r7, #20]
    break;
 800255a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800255c:	4b09      	ldr	r3, [pc, #36]	; (8002584 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	0e5b      	lsrs	r3, r3, #25
 8002562:	f003 0303 	and.w	r3, r3, #3
 8002566:	3301      	adds	r3, #1
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800256c:	697a      	ldr	r2, [r7, #20]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	fbb2 f3f3 	udiv	r3, r2, r3
 8002574:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002576:	687b      	ldr	r3, [r7, #4]
}
 8002578:	4618      	mov	r0, r3
 800257a:	371c      	adds	r7, #28
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40021000 	.word	0x40021000
 8002588:	007a1200 	.word	0x007a1200
 800258c:	00f42400 	.word	0x00f42400

08002590 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b086      	sub	sp, #24
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002598:	2300      	movs	r3, #0
 800259a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800259c:	2300      	movs	r3, #0
 800259e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8098 	beq.w	80026de <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b2:	4b43      	ldr	r3, [pc, #268]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10d      	bne.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025be:	4b40      	ldr	r3, [pc, #256]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	4a3f      	ldr	r2, [pc, #252]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6593      	str	r3, [r2, #88]	; 0x58
 80025ca:	4b3d      	ldr	r3, [pc, #244]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d6:	2301      	movs	r3, #1
 80025d8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025da:	4b3a      	ldr	r3, [pc, #232]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a39      	ldr	r2, [pc, #228]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025e6:	f7fd fe7b 	bl	80002e0 <HAL_GetTick>
 80025ea:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025ec:	e009      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025ee:	f7fd fe77 	bl	80002e0 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d902      	bls.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	74fb      	strb	r3, [r7, #19]
        break;
 8002600:	e005      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002602:	4b30      	ldr	r3, [pc, #192]	; (80026c4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260a:	2b00      	cmp	r3, #0
 800260c:	d0ef      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800260e:	7cfb      	ldrb	r3, [r7, #19]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d159      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002614:	4b2a      	ldr	r3, [pc, #168]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002616:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800261e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01e      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	429a      	cmp	r2, r3
 800262e:	d019      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002636:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800263a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800263c:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800264c:	4b1c      	ldr	r3, [pc, #112]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002652:	4a1b      	ldr	r2, [pc, #108]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002658:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800265c:	4a18      	ldr	r2, [pc, #96]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d016      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266e:	f7fd fe37 	bl	80002e0 <HAL_GetTick>
 8002672:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002674:	e00b      	b.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f7fd fe33 	bl	80002e0 <HAL_GetTick>
 800267a:	4602      	mov	r2, r0
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	1ad3      	subs	r3, r2, r3
 8002680:	f241 3288 	movw	r2, #5000	; 0x1388
 8002684:	4293      	cmp	r3, r2
 8002686:	d902      	bls.n	800268e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002688:	2303      	movs	r3, #3
 800268a:	74fb      	strb	r3, [r7, #19]
            break;
 800268c:	e006      	b.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800268e:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0ec      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10b      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026a2:	4b07      	ldr	r3, [pc, #28]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b0:	4903      	ldr	r1, [pc, #12]	; (80026c0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026b8:	e008      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	74bb      	strb	r3, [r7, #18]
 80026be:	e005      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026c0:	40021000 	.word	0x40021000
 80026c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c8:	7cfb      	ldrb	r3, [r7, #19]
 80026ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026cc:	7c7b      	ldrb	r3, [r7, #17]
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d105      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d2:	4ba6      	ldr	r3, [pc, #664]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026d6:	4aa5      	ldr	r2, [pc, #660]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026ea:	4ba0      	ldr	r3, [pc, #640]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	f023 0203 	bic.w	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	499c      	ldr	r1, [pc, #624]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 0302 	and.w	r3, r3, #2
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800270c:	4b97      	ldr	r3, [pc, #604]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800270e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002712:	f023 020c 	bic.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4994      	ldr	r1, [pc, #592]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800272e:	4b8f      	ldr	r3, [pc, #572]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002730:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002734:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	498b      	ldr	r1, [pc, #556]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0308 	and.w	r3, r3, #8
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002750:	4b86      	ldr	r3, [pc, #536]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002752:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002756:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	4983      	ldr	r1, [pc, #524]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002772:	4b7e      	ldr	r3, [pc, #504]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002778:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	497a      	ldr	r1, [pc, #488]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00a      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002794:	4b75      	ldr	r3, [pc, #468]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	4972      	ldr	r1, [pc, #456]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d00a      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027b6:	4b6d      	ldr	r3, [pc, #436]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69db      	ldr	r3, [r3, #28]
 80027c4:	4969      	ldr	r1, [pc, #420]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d00a      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027d8:	4b64      	ldr	r3, [pc, #400]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6a1b      	ldr	r3, [r3, #32]
 80027e6:	4961      	ldr	r1, [pc, #388]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d00a      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027fa:	4b5c      	ldr	r3, [pc, #368]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002800:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	4958      	ldr	r1, [pc, #352]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002818:	2b00      	cmp	r3, #0
 800281a:	d015      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800281c:	4b53      	ldr	r3, [pc, #332]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800282a:	4950      	ldr	r1, [pc, #320]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800283a:	d105      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800283c:	4b4b      	ldr	r3, [pc, #300]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	4a4a      	ldr	r2, [pc, #296]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002846:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002850:	2b00      	cmp	r3, #0
 8002852:	d015      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002854:	4b45      	ldr	r3, [pc, #276]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002862:	4942      	ldr	r1, [pc, #264]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002864:	4313      	orrs	r3, r2
 8002866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002872:	d105      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002874:	4b3d      	ldr	r3, [pc, #244]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	4a3c      	ldr	r2, [pc, #240]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800287e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d015      	beq.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800288c:	4b37      	ldr	r3, [pc, #220]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289a:	4934      	ldr	r1, [pc, #208]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028aa:	d105      	bne.n	80028b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028ac:	4b2f      	ldr	r3, [pc, #188]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	4a2e      	ldr	r2, [pc, #184]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80028c4:	4b29      	ldr	r3, [pc, #164]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d2:	4926      	ldr	r1, [pc, #152]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028e2:	d105      	bne.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a20      	ldr	r2, [pc, #128]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d015      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028fc:	4b1b      	ldr	r3, [pc, #108]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290a:	4918      	ldr	r1, [pc, #96]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800291a:	d105      	bne.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800291c:	4b13      	ldr	r3, [pc, #76]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	4a12      	ldr	r2, [pc, #72]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002922:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002926:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d015      	beq.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002934:	4b0d      	ldr	r3, [pc, #52]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002942:	490a      	ldr	r1, [pc, #40]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002952:	d105      	bne.n	8002960 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a04      	ldr	r2, [pc, #16]	; (800296c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002960:	7cbb      	ldrb	r3, [r7, #18]
}
 8002962:	4618      	mov	r0, r3
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000

08002970 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002978:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800297c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	b29b      	uxth	r3, r3
 800298a:	4313      	orrs	r3, r2
 800298c:	b29a      	uxth	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80029a2:	b480      	push	{r7}
 80029a4:	b085      	sub	sp, #20
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80029aa:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80029ae:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	43db      	mvns	r3, r3
 80029be:	b29b      	uxth	r3, r3
 80029c0:	4013      	ands	r3, r2
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80029d8:	b084      	sub	sp, #16
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
 80029e2:	f107 0014 	add.w	r0, r7, #20
 80029e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ffb0 	bl	8002970 <USB_EnableGlobalInt>

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3708      	adds	r7, #8
 8002a16:	46bd      	mov	sp, r7
 8002a18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002a1c:	b004      	add	sp, #16
 8002a1e:	4770      	bx	lr

08002a20 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a20:	b490      	push	{r4, r7}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	4413      	add	r3, r2
 8002a38:	881b      	ldrh	r3, [r3, #0]
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a44:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	78db      	ldrb	r3, [r3, #3]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d819      	bhi.n	8002a82 <USB_ActivateEndpoint+0x62>
 8002a4e:	a201      	add	r2, pc, #4	; (adr r2, 8002a54 <USB_ActivateEndpoint+0x34>)
 8002a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a54:	08002a65 	.word	0x08002a65
 8002a58:	08002a79 	.word	0x08002a79
 8002a5c:	08002a89 	.word	0x08002a89
 8002a60:	08002a6f 	.word	0x08002a6f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8002a64:	89bb      	ldrh	r3, [r7, #12]
 8002a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a6a:	81bb      	strh	r3, [r7, #12]
      break;
 8002a6c:	e00d      	b.n	8002a8a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8002a6e:	89bb      	ldrh	r3, [r7, #12]
 8002a70:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8002a74:	81bb      	strh	r3, [r7, #12]
      break;
 8002a76:	e008      	b.n	8002a8a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8002a78:	89bb      	ldrh	r3, [r7, #12]
 8002a7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a7e:	81bb      	strh	r3, [r7, #12]
      break;
 8002a80:	e003      	b.n	8002a8a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	73fb      	strb	r3, [r7, #15]
      break;
 8002a86:	e000      	b.n	8002a8a <USB_ActivateEndpoint+0x6a>
      break;
 8002a88:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	441a      	add	r2, r3
 8002a94:	89bb      	ldrh	r3, [r7, #12]
 8002a96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	881b      	ldrh	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b21b      	sxth	r3, r3
 8002aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ac2:	b21a      	sxth	r2, r3
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b21b      	sxth	r3, r3
 8002aca:	4313      	orrs	r3, r2
 8002acc:	b21b      	sxth	r3, r3
 8002ace:	b29c      	uxth	r4, r3
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	441a      	add	r2, r3
 8002ada:	4b8a      	ldr	r3, [pc, #552]	; (8002d04 <USB_ActivateEndpoint+0x2e4>)
 8002adc:	4323      	orrs	r3, r4
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	7b1b      	ldrb	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 8112 	bne.w	8002d10 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	785b      	ldrb	r3, [r3, #1]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d067      	beq.n	8002bc4 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002af4:	687c      	ldr	r4, [r7, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	441c      	add	r4, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4423      	add	r3, r4
 8002b08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b0c:	461c      	mov	r4, r3
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	88db      	ldrh	r3, [r3, #6]
 8002b12:	085b      	lsrs	r3, r3, #1
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	881b      	ldrh	r3, [r3, #0]
 8002b28:	b29c      	uxth	r4, r3
 8002b2a:	4623      	mov	r3, r4
 8002b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d014      	beq.n	8002b5e <USB_ActivateEndpoint+0x13e>
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	881b      	ldrh	r3, [r3, #0]
 8002b40:	b29b      	uxth	r3, r3
 8002b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b4a:	b29c      	uxth	r4, r3
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	441a      	add	r2, r3
 8002b56:	4b6c      	ldr	r3, [pc, #432]	; (8002d08 <USB_ActivateEndpoint+0x2e8>)
 8002b58:	4323      	orrs	r3, r4
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	78db      	ldrb	r3, [r3, #3]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d018      	beq.n	8002b98 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7c:	b29c      	uxth	r4, r3
 8002b7e:	f084 0320 	eor.w	r3, r4, #32
 8002b82:	b29c      	uxth	r4, r3
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	441a      	add	r2, r3
 8002b8e:	4b5d      	ldr	r3, [pc, #372]	; (8002d04 <USB_ActivateEndpoint+0x2e4>)
 8002b90:	4323      	orrs	r3, r4
 8002b92:	b29b      	uxth	r3, r3
 8002b94:	8013      	strh	r3, [r2, #0]
 8002b96:	e22b      	b.n	8002ff0 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bae:	b29c      	uxth	r4, r3
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	441a      	add	r2, r3
 8002bba:	4b52      	ldr	r3, [pc, #328]	; (8002d04 <USB_ActivateEndpoint+0x2e4>)
 8002bbc:	4323      	orrs	r3, r4
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	8013      	strh	r3, [r2, #0]
 8002bc2:	e215      	b.n	8002ff0 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002bc4:	687c      	ldr	r4, [r7, #4]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	441c      	add	r4, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	4423      	add	r3, r4
 8002bd8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bdc:	461c      	mov	r4, r3
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	88db      	ldrh	r3, [r3, #6]
 8002be2:	085b      	lsrs	r3, r3, #1
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002bec:	687c      	ldr	r4, [r7, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	441c      	add	r4, r3
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	4423      	add	r3, r4
 8002c00:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002c04:	461c      	mov	r4, r3
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10e      	bne.n	8002c2c <USB_ActivateEndpoint+0x20c>
 8002c0e:	8823      	ldrh	r3, [r4, #0]
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	8023      	strh	r3, [r4, #0]
 8002c1a:	8823      	ldrh	r3, [r4, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	8023      	strh	r3, [r4, #0]
 8002c2a:	e02d      	b.n	8002c88 <USB_ActivateEndpoint+0x268>
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	691b      	ldr	r3, [r3, #16]
 8002c30:	2b3e      	cmp	r3, #62	; 0x3e
 8002c32:	d812      	bhi.n	8002c5a <USB_ActivateEndpoint+0x23a>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	60bb      	str	r3, [r7, #8]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0301 	and.w	r3, r3, #1
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d002      	beq.n	8002c4e <USB_ActivateEndpoint+0x22e>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	60bb      	str	r3, [r7, #8]
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	029b      	lsls	r3, r3, #10
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	8023      	strh	r3, [r4, #0]
 8002c58:	e016      	b.n	8002c88 <USB_ActivateEndpoint+0x268>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	095b      	lsrs	r3, r3, #5
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f003 031f 	and.w	r3, r3, #31
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d102      	bne.n	8002c74 <USB_ActivateEndpoint+0x254>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	3b01      	subs	r3, #1
 8002c72:	60bb      	str	r3, [r7, #8]
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	029b      	lsls	r3, r3, #10
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	881b      	ldrh	r3, [r3, #0]
 8002c94:	b29c      	uxth	r4, r3
 8002c96:	4623      	mov	r3, r4
 8002c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d014      	beq.n	8002cca <USB_ActivateEndpoint+0x2aa>
 8002ca0:	687a      	ldr	r2, [r7, #4]
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	881b      	ldrh	r3, [r3, #0]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cb6:	b29c      	uxth	r4, r3
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <USB_ActivateEndpoint+0x2ec>)
 8002cc4:	4323      	orrs	r3, r4
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce0:	b29c      	uxth	r4, r3
 8002ce2:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002ce6:	b29c      	uxth	r4, r3
 8002ce8:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002cec:	b29c      	uxth	r4, r3
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	441a      	add	r2, r3
 8002cf8:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <USB_ActivateEndpoint+0x2e4>)
 8002cfa:	4323      	orrs	r3, r4
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	8013      	strh	r3, [r2, #0]
 8002d00:	e176      	b.n	8002ff0 <USB_ActivateEndpoint+0x5d0>
 8002d02:	bf00      	nop
 8002d04:	ffff8080 	.word	0xffff8080
 8002d08:	ffff80c0 	.word	0xffff80c0
 8002d0c:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	4413      	add	r3, r2
 8002d1a:	881b      	ldrh	r3, [r3, #0]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d26:	b29c      	uxth	r4, r3
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	441a      	add	r2, r3
 8002d32:	4b96      	ldr	r3, [pc, #600]	; (8002f8c <USB_ActivateEndpoint+0x56c>)
 8002d34:	4323      	orrs	r3, r4
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8002d3a:	687c      	ldr	r4, [r7, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	441c      	add	r4, r3
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4423      	add	r3, r4
 8002d4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d52:	461c      	mov	r4, r3
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	891b      	ldrh	r3, [r3, #8]
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	8023      	strh	r3, [r4, #0]
 8002d62:	687c      	ldr	r4, [r7, #4]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	441c      	add	r4, r3
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	00db      	lsls	r3, r3, #3
 8002d74:	4423      	add	r3, r4
 8002d76:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002d7a:	461c      	mov	r4, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	895b      	ldrh	r3, [r3, #10]
 8002d80:	085b      	lsrs	r3, r3, #1
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	785b      	ldrb	r3, [r3, #1]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	f040 8088 	bne.w	8002ea4 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	881b      	ldrh	r3, [r3, #0]
 8002da0:	b29c      	uxth	r4, r3
 8002da2:	4623      	mov	r3, r4
 8002da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d014      	beq.n	8002dd6 <USB_ActivateEndpoint+0x3b6>
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	4413      	add	r3, r2
 8002db6:	881b      	ldrh	r3, [r3, #0]
 8002db8:	b29b      	uxth	r3, r3
 8002dba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dc2:	b29c      	uxth	r4, r3
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	441a      	add	r2, r3
 8002dce:	4b70      	ldr	r3, [pc, #448]	; (8002f90 <USB_ActivateEndpoint+0x570>)
 8002dd0:	4323      	orrs	r3, r4
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	881b      	ldrh	r3, [r3, #0]
 8002de2:	b29c      	uxth	r4, r3
 8002de4:	4623      	mov	r3, r4
 8002de6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d014      	beq.n	8002e18 <USB_ActivateEndpoint+0x3f8>
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	4413      	add	r3, r2
 8002df8:	881b      	ldrh	r3, [r3, #0]
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e04:	b29c      	uxth	r4, r3
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	441a      	add	r2, r3
 8002e10:	4b60      	ldr	r3, [pc, #384]	; (8002f94 <USB_ActivateEndpoint+0x574>)
 8002e12:	4323      	orrs	r3, r4
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	881b      	ldrh	r3, [r3, #0]
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e2e:	b29c      	uxth	r4, r3
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	441a      	add	r2, r3
 8002e3a:	4b56      	ldr	r3, [pc, #344]	; (8002f94 <USB_ActivateEndpoint+0x574>)
 8002e3c:	4323      	orrs	r3, r4
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e58:	b29c      	uxth	r4, r3
 8002e5a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8002e5e:	b29c      	uxth	r4, r3
 8002e60:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8002e64:	b29c      	uxth	r4, r3
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	441a      	add	r2, r3
 8002e70:	4b49      	ldr	r3, [pc, #292]	; (8002f98 <USB_ActivateEndpoint+0x578>)
 8002e72:	4323      	orrs	r3, r4
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e8e:	b29c      	uxth	r4, r3
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	441a      	add	r2, r3
 8002e9a:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <USB_ActivateEndpoint+0x578>)
 8002e9c:	4323      	orrs	r3, r4
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	8013      	strh	r3, [r2, #0]
 8002ea2:	e0a5      	b.n	8002ff0 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	b29c      	uxth	r4, r3
 8002eb2:	4623      	mov	r3, r4
 8002eb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d014      	beq.n	8002ee6 <USB_ActivateEndpoint+0x4c6>
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	881b      	ldrh	r3, [r3, #0]
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ed2:	b29c      	uxth	r4, r3
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	441a      	add	r2, r3
 8002ede:	4b2c      	ldr	r3, [pc, #176]	; (8002f90 <USB_ActivateEndpoint+0x570>)
 8002ee0:	4323      	orrs	r3, r4
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	881b      	ldrh	r3, [r3, #0]
 8002ef2:	b29c      	uxth	r4, r3
 8002ef4:	4623      	mov	r3, r4
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d014      	beq.n	8002f28 <USB_ActivateEndpoint+0x508>
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	881b      	ldrh	r3, [r3, #0]
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f14:	b29c      	uxth	r4, r3
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	441a      	add	r2, r3
 8002f20:	4b1c      	ldr	r3, [pc, #112]	; (8002f94 <USB_ActivateEndpoint+0x574>)
 8002f22:	4323      	orrs	r3, r4
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4413      	add	r3, r2
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3e:	b29c      	uxth	r4, r3
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	441a      	add	r2, r3
 8002f4a:	4b11      	ldr	r3, [pc, #68]	; (8002f90 <USB_ActivateEndpoint+0x570>)
 8002f4c:	4323      	orrs	r3, r4
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	78db      	ldrb	r3, [r3, #3]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d020      	beq.n	8002f9c <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	881b      	ldrh	r3, [r3, #0]
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f70:	b29c      	uxth	r4, r3
 8002f72:	f084 0320 	eor.w	r3, r4, #32
 8002f76:	b29c      	uxth	r4, r3
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	441a      	add	r2, r3
 8002f82:	4b05      	ldr	r3, [pc, #20]	; (8002f98 <USB_ActivateEndpoint+0x578>)
 8002f84:	4323      	orrs	r3, r4
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	8013      	strh	r3, [r2, #0]
 8002f8a:	e01c      	b.n	8002fc6 <USB_ActivateEndpoint+0x5a6>
 8002f8c:	ffff8180 	.word	0xffff8180
 8002f90:	ffffc080 	.word	0xffffc080
 8002f94:	ffff80c0 	.word	0xffff80c0
 8002f98:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	881b      	ldrh	r3, [r3, #0]
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb2:	b29c      	uxth	r4, r3
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	441a      	add	r2, r3
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <USB_ActivateEndpoint+0x5dc>)
 8002fc0:	4323      	orrs	r3, r4
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	881b      	ldrh	r3, [r3, #0]
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fdc:	b29c      	uxth	r4, r3
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	441a      	add	r2, r3
 8002fe8:	4b04      	ldr	r3, [pc, #16]	; (8002ffc <USB_ActivateEndpoint+0x5dc>)
 8002fea:	4323      	orrs	r3, r4
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3710      	adds	r7, #16
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bc90      	pop	{r4, r7}
 8002ffa:	4770      	bx	lr
 8002ffc:	ffff8080 	.word	0xffff8080

08003000 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003000:	b490      	push	{r4, r7}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	7b1b      	ldrb	r3, [r3, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d171      	bne.n	80030f6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d036      	beq.n	8003088 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	4413      	add	r3, r2
 8003024:	881b      	ldrh	r3, [r3, #0]
 8003026:	b29c      	uxth	r4, r3
 8003028:	4623      	mov	r3, r4
 800302a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800302e:	2b00      	cmp	r3, #0
 8003030:	d014      	beq.n	800305c <USB_DeactivateEndpoint+0x5c>
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4413      	add	r3, r2
 800303c:	881b      	ldrh	r3, [r3, #0]
 800303e:	b29b      	uxth	r3, r3
 8003040:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003044:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003048:	b29c      	uxth	r4, r3
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	441a      	add	r2, r3
 8003054:	4b6b      	ldr	r3, [pc, #428]	; (8003204 <USB_DeactivateEndpoint+0x204>)
 8003056:	4323      	orrs	r3, r4
 8003058:	b29b      	uxth	r3, r3
 800305a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	4413      	add	r3, r2
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b29b      	uxth	r3, r3
 800306a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003072:	b29c      	uxth	r4, r3
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	441a      	add	r2, r3
 800307e:	4b62      	ldr	r3, [pc, #392]	; (8003208 <USB_DeactivateEndpoint+0x208>)
 8003080:	4323      	orrs	r3, r4
 8003082:	b29b      	uxth	r3, r3
 8003084:	8013      	strh	r3, [r2, #0]
 8003086:	e144      	b.n	8003312 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	781b      	ldrb	r3, [r3, #0]
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	b29c      	uxth	r4, r3
 8003096:	4623      	mov	r3, r4
 8003098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d014      	beq.n	80030ca <USB_DeactivateEndpoint+0xca>
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	881b      	ldrh	r3, [r3, #0]
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b6:	b29c      	uxth	r4, r3
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	441a      	add	r2, r3
 80030c2:	4b52      	ldr	r3, [pc, #328]	; (800320c <USB_DeactivateEndpoint+0x20c>)
 80030c4:	4323      	orrs	r3, r4
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	4413      	add	r3, r2
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030e0:	b29c      	uxth	r4, r3
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	781b      	ldrb	r3, [r3, #0]
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	441a      	add	r2, r3
 80030ec:	4b46      	ldr	r3, [pc, #280]	; (8003208 <USB_DeactivateEndpoint+0x208>)
 80030ee:	4323      	orrs	r3, r4
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	8013      	strh	r3, [r2, #0]
 80030f4:	e10d      	b.n	8003312 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f040 8088 	bne.w	8003210 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	b29c      	uxth	r4, r3
 800310e:	4623      	mov	r3, r4
 8003110:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d014      	beq.n	8003142 <USB_DeactivateEndpoint+0x142>
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	781b      	ldrb	r3, [r3, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	881b      	ldrh	r3, [r3, #0]
 8003124:	b29b      	uxth	r3, r3
 8003126:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800312a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800312e:	b29c      	uxth	r4, r3
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	441a      	add	r2, r3
 800313a:	4b34      	ldr	r3, [pc, #208]	; (800320c <USB_DeactivateEndpoint+0x20c>)
 800313c:	4323      	orrs	r3, r4
 800313e:	b29b      	uxth	r3, r3
 8003140:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	4413      	add	r3, r2
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	b29c      	uxth	r4, r3
 8003150:	4623      	mov	r3, r4
 8003152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003156:	2b00      	cmp	r3, #0
 8003158:	d014      	beq.n	8003184 <USB_DeactivateEndpoint+0x184>
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	781b      	ldrb	r3, [r3, #0]
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4413      	add	r3, r2
 8003164:	881b      	ldrh	r3, [r3, #0]
 8003166:	b29b      	uxth	r3, r3
 8003168:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003170:	b29c      	uxth	r4, r3
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	441a      	add	r2, r3
 800317c:	4b21      	ldr	r3, [pc, #132]	; (8003204 <USB_DeactivateEndpoint+0x204>)
 800317e:	4323      	orrs	r3, r4
 8003180:	b29b      	uxth	r3, r3
 8003182:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	881b      	ldrh	r3, [r3, #0]
 8003190:	b29b      	uxth	r3, r3
 8003192:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	b29c      	uxth	r4, r3
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	441a      	add	r2, r3
 80031a6:	4b17      	ldr	r3, [pc, #92]	; (8003204 <USB_DeactivateEndpoint+0x204>)
 80031a8:	4323      	orrs	r3, r4
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	881b      	ldrh	r3, [r3, #0]
 80031ba:	b29b      	uxth	r3, r3
 80031bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031c4:	b29c      	uxth	r4, r3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	441a      	add	r2, r3
 80031d0:	4b0d      	ldr	r3, [pc, #52]	; (8003208 <USB_DeactivateEndpoint+0x208>)
 80031d2:	4323      	orrs	r3, r4
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	881b      	ldrh	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031ee:	b29c      	uxth	r4, r3
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	441a      	add	r2, r3
 80031fa:	4b03      	ldr	r3, [pc, #12]	; (8003208 <USB_DeactivateEndpoint+0x208>)
 80031fc:	4323      	orrs	r3, r4
 80031fe:	b29b      	uxth	r3, r3
 8003200:	8013      	strh	r3, [r2, #0]
 8003202:	e086      	b.n	8003312 <USB_DeactivateEndpoint+0x312>
 8003204:	ffff80c0 	.word	0xffff80c0
 8003208:	ffff8080 	.word	0xffff8080
 800320c:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	781b      	ldrb	r3, [r3, #0]
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	881b      	ldrh	r3, [r3, #0]
 800321c:	b29c      	uxth	r4, r3
 800321e:	4623      	mov	r3, r4
 8003220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d014      	beq.n	8003252 <USB_DeactivateEndpoint+0x252>
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	009b      	lsls	r3, r3, #2
 8003230:	4413      	add	r3, r2
 8003232:	881b      	ldrh	r3, [r3, #0]
 8003234:	b29b      	uxth	r3, r3
 8003236:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	b29c      	uxth	r4, r3
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	441a      	add	r2, r3
 800324a:	4b35      	ldr	r3, [pc, #212]	; (8003320 <USB_DeactivateEndpoint+0x320>)
 800324c:	4323      	orrs	r3, r4
 800324e:	b29b      	uxth	r3, r3
 8003250:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	b29c      	uxth	r4, r3
 8003260:	4623      	mov	r3, r4
 8003262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003266:	2b00      	cmp	r3, #0
 8003268:	d014      	beq.n	8003294 <USB_DeactivateEndpoint+0x294>
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4413      	add	r3, r2
 8003274:	881b      	ldrh	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800327c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003280:	b29c      	uxth	r4, r3
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	781b      	ldrb	r3, [r3, #0]
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	441a      	add	r2, r3
 800328c:	4b25      	ldr	r3, [pc, #148]	; (8003324 <USB_DeactivateEndpoint+0x324>)
 800328e:	4323      	orrs	r3, r4
 8003290:	b29b      	uxth	r3, r3
 8003292:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4413      	add	r3, r2
 800329e:	881b      	ldrh	r3, [r3, #0]
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032aa:	b29c      	uxth	r4, r3
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	781b      	ldrb	r3, [r3, #0]
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	441a      	add	r2, r3
 80032b6:	4b1a      	ldr	r3, [pc, #104]	; (8003320 <USB_DeactivateEndpoint+0x320>)
 80032b8:	4323      	orrs	r3, r4
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032d4:	b29c      	uxth	r4, r3
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	441a      	add	r2, r3
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <USB_DeactivateEndpoint+0x328>)
 80032e2:	4323      	orrs	r3, r4
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4413      	add	r3, r2
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	b29c      	uxth	r4, r3
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	441a      	add	r2, r3
 800330a:	4b07      	ldr	r3, [pc, #28]	; (8003328 <USB_DeactivateEndpoint+0x328>)
 800330c:	4323      	orrs	r3, r4
 800330e:	b29b      	uxth	r3, r3
 8003310:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bc90      	pop	{r4, r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	ffffc080 	.word	0xffffc080
 8003324:	ffff80c0 	.word	0xffff80c0
 8003328:	ffff8080 	.word	0xffff8080

0800332c <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b08d      	sub	sp, #52	; 0x34
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	785b      	ldrb	r3, [r3, #1]
 800333a:	2b01      	cmp	r3, #1
 800333c:	f040 8160 	bne.w	8003600 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d909      	bls.n	8003360 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	1ad2      	subs	r2, r2, r3
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	619a      	str	r2, [r3, #24]
 800335e:	e005      	b.n	800336c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2200      	movs	r2, #0
 800336a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	7b1b      	ldrb	r3, [r3, #12]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d119      	bne.n	80033a8 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	6959      	ldr	r1, [r3, #20]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	88da      	ldrh	r2, [r3, #6]
 800337c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800337e:	b29b      	uxth	r3, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fba8 	bl	8003ad6 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003386:	687c      	ldr	r4, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800338e:	b29b      	uxth	r3, r3
 8003390:	441c      	add	r4, r3
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	781b      	ldrb	r3, [r3, #0]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4423      	add	r3, r4
 800339a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800339e:	461c      	mov	r4, r3
 80033a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	8023      	strh	r3, [r4, #0]
 80033a6:	e10f      	b.n	80035c8 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	881b      	ldrh	r3, [r3, #0]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d065      	beq.n	800348a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80033be:	687c      	ldr	r4, [r7, #4]
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	785b      	ldrb	r3, [r3, #1]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d148      	bne.n	800345a <USB_EPStartXfer+0x12e>
 80033c8:	687c      	ldr	r4, [r7, #4]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	441c      	add	r4, r3
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	4423      	add	r3, r4
 80033dc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033e0:	461c      	mov	r4, r3
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10e      	bne.n	8003406 <USB_EPStartXfer+0xda>
 80033e8:	8823      	ldrh	r3, [r4, #0]
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	8023      	strh	r3, [r4, #0]
 80033f4:	8823      	ldrh	r3, [r4, #0]
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80033fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003400:	b29b      	uxth	r3, r3
 8003402:	8023      	strh	r3, [r4, #0]
 8003404:	e03d      	b.n	8003482 <USB_EPStartXfer+0x156>
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	2b3e      	cmp	r3, #62	; 0x3e
 800340a:	d810      	bhi.n	800342e <USB_EPStartXfer+0x102>
 800340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	627b      	str	r3, [r7, #36]	; 0x24
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <USB_EPStartXfer+0xf6>
 800341c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341e:	3301      	adds	r3, #1
 8003420:	627b      	str	r3, [r7, #36]	; 0x24
 8003422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003424:	b29b      	uxth	r3, r3
 8003426:	029b      	lsls	r3, r3, #10
 8003428:	b29b      	uxth	r3, r3
 800342a:	8023      	strh	r3, [r4, #0]
 800342c:	e029      	b.n	8003482 <USB_EPStartXfer+0x156>
 800342e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003430:	095b      	lsrs	r3, r3, #5
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
 8003434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003436:	f003 031f 	and.w	r3, r3, #31
 800343a:	2b00      	cmp	r3, #0
 800343c:	d102      	bne.n	8003444 <USB_EPStartXfer+0x118>
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	3b01      	subs	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
 8003444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003446:	b29b      	uxth	r3, r3
 8003448:	029b      	lsls	r3, r3, #10
 800344a:	b29b      	uxth	r3, r3
 800344c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003450:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003454:	b29b      	uxth	r3, r3
 8003456:	8023      	strh	r3, [r4, #0]
 8003458:	e013      	b.n	8003482 <USB_EPStartXfer+0x156>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	785b      	ldrb	r3, [r3, #1]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d10f      	bne.n	8003482 <USB_EPStartXfer+0x156>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003468:	b29b      	uxth	r3, r3
 800346a:	441c      	add	r4, r3
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4423      	add	r3, r4
 8003474:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800347c:	b29a      	uxth	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	895b      	ldrh	r3, [r3, #10]
 8003486:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003488:	e063      	b.n	8003552 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	785b      	ldrb	r3, [r3, #1]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d148      	bne.n	8003524 <USB_EPStartXfer+0x1f8>
 8003492:	687c      	ldr	r4, [r7, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800349a:	b29b      	uxth	r3, r3
 800349c:	441c      	add	r4, r3
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4423      	add	r3, r4
 80034a6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034aa:	461c      	mov	r4, r3
 80034ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10e      	bne.n	80034d0 <USB_EPStartXfer+0x1a4>
 80034b2:	8823      	ldrh	r3, [r4, #0]
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	8023      	strh	r3, [r4, #0]
 80034be:	8823      	ldrh	r3, [r4, #0]
 80034c0:	b29b      	uxth	r3, r3
 80034c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80034c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	8023      	strh	r3, [r4, #0]
 80034ce:	e03d      	b.n	800354c <USB_EPStartXfer+0x220>
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b3e      	cmp	r3, #62	; 0x3e
 80034d4:	d810      	bhi.n	80034f8 <USB_EPStartXfer+0x1cc>
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	085b      	lsrs	r3, r3, #1
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d002      	beq.n	80034ec <USB_EPStartXfer+0x1c0>
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	3301      	adds	r3, #1
 80034ea:	623b      	str	r3, [r7, #32]
 80034ec:	6a3b      	ldr	r3, [r7, #32]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	029b      	lsls	r3, r3, #10
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	8023      	strh	r3, [r4, #0]
 80034f6:	e029      	b.n	800354c <USB_EPStartXfer+0x220>
 80034f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034fa:	095b      	lsrs	r3, r3, #5
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	f003 031f 	and.w	r3, r3, #31
 8003504:	2b00      	cmp	r3, #0
 8003506:	d102      	bne.n	800350e <USB_EPStartXfer+0x1e2>
 8003508:	6a3b      	ldr	r3, [r7, #32]
 800350a:	3b01      	subs	r3, #1
 800350c:	623b      	str	r3, [r7, #32]
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	b29b      	uxth	r3, r3
 8003512:	029b      	lsls	r3, r3, #10
 8003514:	b29b      	uxth	r3, r3
 8003516:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800351a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800351e:	b29b      	uxth	r3, r3
 8003520:	8023      	strh	r3, [r4, #0]
 8003522:	e013      	b.n	800354c <USB_EPStartXfer+0x220>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	785b      	ldrb	r3, [r3, #1]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d10f      	bne.n	800354c <USB_EPStartXfer+0x220>
 800352c:	687c      	ldr	r4, [r7, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003534:	b29b      	uxth	r3, r3
 8003536:	441c      	add	r4, r3
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	4423      	add	r3, r4
 8003540:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003544:	461c      	mov	r4, r3
 8003546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003548:	b29b      	uxth	r3, r3
 800354a:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	891b      	ldrh	r3, [r3, #8]
 8003550:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	6959      	ldr	r1, [r3, #20]
 8003556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003558:	b29b      	uxth	r3, r3
 800355a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 faba 	bl	8003ad6 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	785b      	ldrb	r3, [r3, #1]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d115      	bne.n	8003596 <USB_EPStartXfer+0x26a>
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	4413      	add	r3, r2
 8003574:	881b      	ldrh	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003580:	b29c      	uxth	r4, r3
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	441a      	add	r2, r3
 800358c:	4b9a      	ldr	r3, [pc, #616]	; (80037f8 <USB_EPStartXfer+0x4cc>)
 800358e:	4323      	orrs	r3, r4
 8003590:	b29b      	uxth	r3, r3
 8003592:	8013      	strh	r3, [r2, #0]
 8003594:	e018      	b.n	80035c8 <USB_EPStartXfer+0x29c>
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	785b      	ldrb	r3, [r3, #1]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d114      	bne.n	80035c8 <USB_EPStartXfer+0x29c>
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035b4:	b29c      	uxth	r4, r3
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	441a      	add	r2, r3
 80035c0:	4b8e      	ldr	r3, [pc, #568]	; (80037fc <USB_EPStartXfer+0x4d0>)
 80035c2:	4323      	orrs	r3, r4
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	881b      	ldrh	r3, [r3, #0]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035de:	b29c      	uxth	r4, r3
 80035e0:	f084 0310 	eor.w	r3, r4, #16
 80035e4:	b29c      	uxth	r4, r3
 80035e6:	f084 0320 	eor.w	r3, r4, #32
 80035ea:	b29c      	uxth	r4, r3
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	441a      	add	r2, r3
 80035f6:	4b82      	ldr	r3, [pc, #520]	; (8003800 <USB_EPStartXfer+0x4d4>)
 80035f8:	4323      	orrs	r3, r4
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	8013      	strh	r3, [r2, #0]
 80035fe:	e146      	b.n	800388e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699a      	ldr	r2, [r3, #24]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	691b      	ldr	r3, [r3, #16]
 8003608:	429a      	cmp	r2, r3
 800360a:	d909      	bls.n	8003620 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	691b      	ldr	r3, [r3, #16]
 8003610:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	699a      	ldr	r2, [r3, #24]
 8003616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003618:	1ad2      	subs	r2, r2, r3
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	619a      	str	r2, [r3, #24]
 800361e:	e005      	b.n	800362c <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2200      	movs	r2, #0
 800362a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	7b1b      	ldrb	r3, [r3, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d148      	bne.n	80036c6 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003634:	687c      	ldr	r4, [r7, #4]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800363c:	b29b      	uxth	r3, r3
 800363e:	441c      	add	r4, r3
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	00db      	lsls	r3, r3, #3
 8003646:	4423      	add	r3, r4
 8003648:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800364c:	461c      	mov	r4, r3
 800364e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10e      	bne.n	8003672 <USB_EPStartXfer+0x346>
 8003654:	8823      	ldrh	r3, [r4, #0]
 8003656:	b29b      	uxth	r3, r3
 8003658:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800365c:	b29b      	uxth	r3, r3
 800365e:	8023      	strh	r3, [r4, #0]
 8003660:	8823      	ldrh	r3, [r4, #0]
 8003662:	b29b      	uxth	r3, r3
 8003664:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003668:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800366c:	b29b      	uxth	r3, r3
 800366e:	8023      	strh	r3, [r4, #0]
 8003670:	e0f2      	b.n	8003858 <USB_EPStartXfer+0x52c>
 8003672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003674:	2b3e      	cmp	r3, #62	; 0x3e
 8003676:	d810      	bhi.n	800369a <USB_EPStartXfer+0x36e>
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	61fb      	str	r3, [r7, #28]
 800367e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d002      	beq.n	800368e <USB_EPStartXfer+0x362>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	3301      	adds	r3, #1
 800368c:	61fb      	str	r3, [r7, #28]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	b29b      	uxth	r3, r3
 8003692:	029b      	lsls	r3, r3, #10
 8003694:	b29b      	uxth	r3, r3
 8003696:	8023      	strh	r3, [r4, #0]
 8003698:	e0de      	b.n	8003858 <USB_EPStartXfer+0x52c>
 800369a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800369c:	095b      	lsrs	r3, r3, #5
 800369e:	61fb      	str	r3, [r7, #28]
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <USB_EPStartXfer+0x384>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	61fb      	str	r3, [r7, #28]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	b29b      	uxth	r3, r3
 80036b4:	029b      	lsls	r3, r3, #10
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	8023      	strh	r3, [r4, #0]
 80036c4:	e0c8      	b.n	8003858 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	785b      	ldrb	r3, [r3, #1]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d148      	bne.n	8003760 <USB_EPStartXfer+0x434>
 80036ce:	687c      	ldr	r4, [r7, #4]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036d6:	b29b      	uxth	r3, r3
 80036d8:	441c      	add	r4, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	4423      	add	r3, r4
 80036e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80036e6:	461c      	mov	r4, r3
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10e      	bne.n	800370c <USB_EPStartXfer+0x3e0>
 80036ee:	8823      	ldrh	r3, [r4, #0]
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80036f6:	b29b      	uxth	r3, r3
 80036f8:	8023      	strh	r3, [r4, #0]
 80036fa:	8823      	ldrh	r3, [r4, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003702:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003706:	b29b      	uxth	r3, r3
 8003708:	8023      	strh	r3, [r4, #0]
 800370a:	e03d      	b.n	8003788 <USB_EPStartXfer+0x45c>
 800370c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800370e:	2b3e      	cmp	r3, #62	; 0x3e
 8003710:	d810      	bhi.n	8003734 <USB_EPStartXfer+0x408>
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	085b      	lsrs	r3, r3, #1
 8003716:	61bb      	str	r3, [r7, #24]
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <USB_EPStartXfer+0x3fc>
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	3301      	adds	r3, #1
 8003726:	61bb      	str	r3, [r7, #24]
 8003728:	69bb      	ldr	r3, [r7, #24]
 800372a:	b29b      	uxth	r3, r3
 800372c:	029b      	lsls	r3, r3, #10
 800372e:	b29b      	uxth	r3, r3
 8003730:	8023      	strh	r3, [r4, #0]
 8003732:	e029      	b.n	8003788 <USB_EPStartXfer+0x45c>
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	095b      	lsrs	r3, r3, #5
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <USB_EPStartXfer+0x41e>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	3b01      	subs	r3, #1
 8003748:	61bb      	str	r3, [r7, #24]
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	b29b      	uxth	r3, r3
 800374e:	029b      	lsls	r3, r3, #10
 8003750:	b29b      	uxth	r3, r3
 8003752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800375a:	b29b      	uxth	r3, r3
 800375c:	8023      	strh	r3, [r4, #0]
 800375e:	e013      	b.n	8003788 <USB_EPStartXfer+0x45c>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	785b      	ldrb	r3, [r3, #1]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d10f      	bne.n	8003788 <USB_EPStartXfer+0x45c>
 8003768:	687c      	ldr	r4, [r7, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003770:	b29b      	uxth	r3, r3
 8003772:	441c      	add	r4, r3
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4423      	add	r3, r4
 800377c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003780:	461c      	mov	r4, r3
 8003782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003784:	b29b      	uxth	r3, r3
 8003786:	8023      	strh	r3, [r4, #0]
 8003788:	687c      	ldr	r4, [r7, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d14e      	bne.n	8003830 <USB_EPStartXfer+0x504>
 8003792:	687c      	ldr	r4, [r7, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800379a:	b29b      	uxth	r3, r3
 800379c:	441c      	add	r4, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4423      	add	r3, r4
 80037a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037aa:	461c      	mov	r4, r3
 80037ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10e      	bne.n	80037d0 <USB_EPStartXfer+0x4a4>
 80037b2:	8823      	ldrh	r3, [r4, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	8023      	strh	r3, [r4, #0]
 80037be:	8823      	ldrh	r3, [r4, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	8023      	strh	r3, [r4, #0]
 80037ce:	e043      	b.n	8003858 <USB_EPStartXfer+0x52c>
 80037d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d2:	2b3e      	cmp	r3, #62	; 0x3e
 80037d4:	d816      	bhi.n	8003804 <USB_EPStartXfer+0x4d8>
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <USB_EPStartXfer+0x4c0>
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	3301      	adds	r3, #1
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	029b      	lsls	r3, r3, #10
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	8023      	strh	r3, [r4, #0]
 80037f6:	e02f      	b.n	8003858 <USB_EPStartXfer+0x52c>
 80037f8:	ffff80c0 	.word	0xffff80c0
 80037fc:	ffffc080 	.word	0xffffc080
 8003800:	ffff8080 	.word	0xffff8080
 8003804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003806:	095b      	lsrs	r3, r3, #5
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2b00      	cmp	r3, #0
 8003812:	d102      	bne.n	800381a <USB_EPStartXfer+0x4ee>
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	3b01      	subs	r3, #1
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	b29b      	uxth	r3, r3
 800381e:	029b      	lsls	r3, r3, #10
 8003820:	b29b      	uxth	r3, r3
 8003822:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003826:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800382a:	b29b      	uxth	r3, r3
 800382c:	8023      	strh	r3, [r4, #0]
 800382e:	e013      	b.n	8003858 <USB_EPStartXfer+0x52c>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	785b      	ldrb	r3, [r3, #1]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d10f      	bne.n	8003858 <USB_EPStartXfer+0x52c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800383e:	b29b      	uxth	r3, r3
 8003840:	441c      	add	r4, r3
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	00db      	lsls	r3, r3, #3
 8003848:	4423      	add	r3, r4
 800384a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800384e:	613b      	str	r3, [r7, #16]
 8003850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003852:	b29a      	uxth	r2, r3
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	881b      	ldrh	r3, [r3, #0]
 8003864:	b29b      	uxth	r3, r3
 8003866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800386a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386e:	b29c      	uxth	r4, r3
 8003870:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003874:	b29c      	uxth	r4, r3
 8003876:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800387a:	b29c      	uxth	r4, r3
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	441a      	add	r2, r3
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <USB_EPStartXfer+0x56c>)
 8003888:	4323      	orrs	r3, r4
 800388a:	b29b      	uxth	r3, r3
 800388c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3734      	adds	r7, #52	; 0x34
 8003894:	46bd      	mov	sp, r7
 8003896:	bd90      	pop	{r4, r7, pc}
 8003898:	ffff8080 	.word	0xffff8080

0800389c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800389c:	b490      	push	{r4, r7}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	785b      	ldrb	r3, [r3, #1]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d018      	beq.n	80038e0 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038c4:	b29c      	uxth	r4, r3
 80038c6:	f084 0310 	eor.w	r3, r4, #16
 80038ca:	b29c      	uxth	r4, r3
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	781b      	ldrb	r3, [r3, #0]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	441a      	add	r2, r3
 80038d6:	4b11      	ldr	r3, [pc, #68]	; (800391c <USB_EPSetStall+0x80>)
 80038d8:	4323      	orrs	r3, r4
 80038da:	b29b      	uxth	r3, r3
 80038dc:	8013      	strh	r3, [r2, #0]
 80038de:	e017      	b.n	8003910 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038f6:	b29c      	uxth	r4, r3
 80038f8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 80038fc:	b29c      	uxth	r4, r3
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	009b      	lsls	r3, r3, #2
 8003906:	441a      	add	r2, r3
 8003908:	4b04      	ldr	r3, [pc, #16]	; (800391c <USB_EPSetStall+0x80>)
 800390a:	4323      	orrs	r3, r4
 800390c:	b29b      	uxth	r3, r3
 800390e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bc90      	pop	{r4, r7}
 800391a:	4770      	bx	lr
 800391c:	ffff8080 	.word	0xffff8080

08003920 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003920:	b490      	push	{r4, r7}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	7b1b      	ldrb	r3, [r3, #12]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d17d      	bne.n	8003a2e <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	785b      	ldrb	r3, [r3, #1]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d03d      	beq.n	80039b6 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	b29c      	uxth	r4, r3
 8003948:	4623      	mov	r3, r4
 800394a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394e:	2b00      	cmp	r3, #0
 8003950:	d014      	beq.n	800397c <USB_EPClearStall+0x5c>
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003968:	b29c      	uxth	r4, r3
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	441a      	add	r2, r3
 8003974:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <USB_EPClearStall+0x11c>)
 8003976:	4323      	orrs	r3, r4
 8003978:	b29b      	uxth	r3, r3
 800397a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	78db      	ldrb	r3, [r3, #3]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d054      	beq.n	8003a2e <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	881b      	ldrh	r3, [r3, #0]
 8003990:	b29b      	uxth	r3, r3
 8003992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003996:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800399a:	b29c      	uxth	r4, r3
 800399c:	f084 0320 	eor.w	r3, r4, #32
 80039a0:	b29c      	uxth	r4, r3
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	781b      	ldrb	r3, [r3, #0]
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	441a      	add	r2, r3
 80039ac:	4b24      	ldr	r3, [pc, #144]	; (8003a40 <USB_EPClearStall+0x120>)
 80039ae:	4323      	orrs	r3, r4
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	8013      	strh	r3, [r2, #0]
 80039b4:	e03b      	b.n	8003a2e <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29c      	uxth	r4, r3
 80039c4:	4623      	mov	r3, r4
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d014      	beq.n	80039f8 <USB_EPClearStall+0xd8>
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	009b      	lsls	r3, r3, #2
 80039d6:	4413      	add	r3, r2
 80039d8:	881b      	ldrh	r3, [r3, #0]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e4:	b29c      	uxth	r4, r3
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	441a      	add	r2, r3
 80039f0:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <USB_EPClearStall+0x124>)
 80039f2:	4323      	orrs	r3, r4
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	881b      	ldrh	r3, [r3, #0]
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a0e:	b29c      	uxth	r4, r3
 8003a10:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003a14:	b29c      	uxth	r4, r3
 8003a16:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003a1a:	b29c      	uxth	r4, r3
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	441a      	add	r2, r3
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <USB_EPClearStall+0x120>)
 8003a28:	4323      	orrs	r3, r4
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc90      	pop	{r4, r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	ffff80c0 	.word	0xffff80c0
 8003a40:	ffff8080 	.word	0xffff8080
 8003a44:	ffffc080 	.word	0xffffc080

08003a48 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	460b      	mov	r3, r1
 8003a52:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8003a54:	78fb      	ldrb	r3, [r7, #3]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d103      	bne.n	8003a62 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b083      	sub	sp, #12
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a84:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a88:	b29a      	uxth	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr

08003a9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8003a9e:	b480      	push	{r7}
 8003aa0:	b085      	sub	sp, #20
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3714      	adds	r7, #20
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8003abe:	b480      	push	{r7}
 8003ac0:	b083      	sub	sp, #12
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
 8003ac6:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b08d      	sub	sp, #52	; 0x34
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	60f8      	str	r0, [r7, #12]
 8003ade:	60b9      	str	r1, [r7, #8]
 8003ae0:	4611      	mov	r1, r2
 8003ae2:	461a      	mov	r2, r3
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	80fb      	strh	r3, [r7, #6]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8003aec:	88bb      	ldrh	r3, [r7, #4]
 8003aee:	3301      	adds	r3, #1
 8003af0:	085b      	lsrs	r3, r3, #1
 8003af2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003afc:	88fa      	ldrh	r2, [r7, #6]
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b06:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b0c:	e01b      	b.n	8003b46 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8003b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b10:	781b      	ldrb	r3, [r3, #0]
 8003b12:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8003b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b16:	3301      	adds	r3, #1
 8003b18:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	021b      	lsls	r3, r3, #8
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	461a      	mov	r2, r3
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	3302      	adds	r3, #2
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8003b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b42:	3b01      	subs	r3, #1
 8003b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1e0      	bne.n	8003b0e <USB_WritePMA+0x38>
  }
}
 8003b4c:	bf00      	nop
 8003b4e:	3734      	adds	r7, #52	; 0x34
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr

08003b58 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b08b      	sub	sp, #44	; 0x2c
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	4611      	mov	r1, r2
 8003b64:	461a      	mov	r2, r3
 8003b66:	460b      	mov	r3, r1
 8003b68:	80fb      	strh	r3, [r7, #6]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8003b6e:	88bb      	ldrh	r3, [r7, #4]
 8003b70:	085b      	lsrs	r3, r3, #1
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b88:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8e:	e018      	b.n	8003bc2 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	b29b      	uxth	r3, r3
 8003b96:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	3302      	adds	r3, #2
 8003b9c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	0a1b      	lsrs	r3, r3, #8
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8003bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e3      	bne.n	8003b90 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8003bc8:	88bb      	ldrh	r3, [r7, #4]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d007      	beq.n	8003be4 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8003bd4:	6a3b      	ldr	r3, [r7, #32]
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	701a      	strb	r2, [r3, #0]
  }
}
 8003be4:	bf00      	nop
 8003be6:	372c      	adds	r7, #44	; 0x2c
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7c1b      	ldrb	r3, [r3, #16]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d115      	bne.n	8003c34 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	2181      	movs	r1, #129	; 0x81
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f002 f836 	bl	8005c82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c20:	2202      	movs	r2, #2
 8003c22:	2101      	movs	r1, #1
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f002 f82c 	bl	8005c82 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8003c32:	e012      	b.n	8003c5a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8003c34:	2340      	movs	r3, #64	; 0x40
 8003c36:	2202      	movs	r2, #2
 8003c38:	2181      	movs	r1, #129	; 0x81
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f002 f821 	bl	8005c82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8003c46:	2340      	movs	r3, #64	; 0x40
 8003c48:	2202      	movs	r2, #2
 8003c4a:	2101      	movs	r1, #1
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f002 f818 	bl	8005c82 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
//  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8003c60:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8003c64:	f002 f964 	bl	8005f30 <USBD_static_malloc>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d102      	bne.n	8003c80 <USBD_CDC_Init+0x90>
  {
    ret = 1U;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	73fb      	strb	r3, [r7, #15]
 8003c7e:	e026      	b.n	8003cce <USBD_CDC_Init+0xde>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003c86:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	7c1b      	ldrb	r3, [r3, #16]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d109      	bne.n	8003cbe <USBD_CDC_Init+0xce>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003cb0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003cb4:	2101      	movs	r1, #1
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f002 f8ce 	bl	8005e58 <USBD_LL_PrepareReceive>
 8003cbc:	e007      	b.n	8003cce <USBD_CDC_Init+0xde>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003cc4:	2340      	movs	r3, #64	; 0x40
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f002 f8c5 	bl	8005e58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8003cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	460b      	mov	r3, r1
 8003ce2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8003ce8:	2181      	movs	r1, #129	; 0x81
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f001 ffef 	bl	8005cce <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8003cf6:	2101      	movs	r1, #1
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f001 ffe8 	bl	8005cce <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
//  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00e      	beq.n	8003d34 <USBD_CDC_DeInit+0x5c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d26:	4618      	mov	r0, r3
 8003d28:	f002 f910 	bl	8005f4c <USBD_static_free>
    pdev->pClassData = NULL;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8003d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3710      	adds	r7, #16
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}

08003d3e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b086      	sub	sp, #24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
 8003d46:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003d4e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d039      	beq.n	8003ddc <USBD_CDC_Setup+0x9e>
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d17c      	bne.n	8003e66 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	88db      	ldrh	r3, [r3, #6]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d029      	beq.n	8003dc8 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	b25b      	sxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	da11      	bge.n	8003da2 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	683a      	ldr	r2, [r7, #0]
 8003d88:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8003d8a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	88d2      	ldrh	r2, [r2, #6]
 8003d90:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003d92:	6939      	ldr	r1, [r7, #16]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	88db      	ldrh	r3, [r3, #6]
 8003d98:	461a      	mov	r2, r3
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f001 fa0a 	bl	80051b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8003da0:	e068      	b.n	8003e74 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	785a      	ldrb	r2, [r3, #1]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	88db      	ldrh	r3, [r3, #6]
 8003db0:	b2da      	uxtb	r2, r3
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8003db8:	6939      	ldr	r1, [r7, #16]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	88db      	ldrh	r3, [r3, #6]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f001 fa25 	bl	8005210 <USBD_CtlPrepareRx>
      break;
 8003dc6:	e055      	b.n	8003e74 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	7850      	ldrb	r0, [r2, #1]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	6839      	ldr	r1, [r7, #0]
 8003dd8:	4798      	blx	r3
      break;
 8003dda:	e04b      	b.n	8003e74 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	785b      	ldrb	r3, [r3, #1]
 8003de0:	2b0a      	cmp	r3, #10
 8003de2:	d017      	beq.n	8003e14 <USBD_CDC_Setup+0xd6>
 8003de4:	2b0b      	cmp	r3, #11
 8003de6:	d029      	beq.n	8003e3c <USBD_CDC_Setup+0xfe>
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d133      	bne.n	8003e54 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d107      	bne.n	8003e06 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8003df6:	f107 030c 	add.w	r3, r7, #12
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f001 f9d8 	bl	80051b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003e04:	e02e      	b.n	8003e64 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003e06:	6839      	ldr	r1, [r7, #0]
 8003e08:	6878      	ldr	r0, [r7, #4]
 8003e0a:	f001 f968 	bl	80050de <USBD_CtlError>
            ret = USBD_FAIL;
 8003e0e:	2302      	movs	r3, #2
 8003e10:	75fb      	strb	r3, [r7, #23]
          break;
 8003e12:	e027      	b.n	8003e64 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d107      	bne.n	8003e2e <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8003e1e:	f107 030f 	add.w	r3, r7, #15
 8003e22:	2201      	movs	r2, #1
 8003e24:	4619      	mov	r1, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f001 f9c4 	bl	80051b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8003e2c:	e01a      	b.n	8003e64 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 8003e2e:	6839      	ldr	r1, [r7, #0]
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f001 f954 	bl	80050de <USBD_CtlError>
            ret = USBD_FAIL;
 8003e36:	2302      	movs	r3, #2
 8003e38:	75fb      	strb	r3, [r7, #23]
          break;
 8003e3a:	e013      	b.n	8003e64 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8003e42:	2b03      	cmp	r3, #3
 8003e44:	d00d      	beq.n	8003e62 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 8003e46:	6839      	ldr	r1, [r7, #0]
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f001 f948 	bl	80050de <USBD_CtlError>
            ret = USBD_FAIL;
 8003e4e:	2302      	movs	r3, #2
 8003e50:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8003e52:	e006      	b.n	8003e62 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 8003e54:	6839      	ldr	r1, [r7, #0]
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f001 f941 	bl	80050de <USBD_CtlError>
          ret = USBD_FAIL;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	75fb      	strb	r3, [r7, #23]
          break;
 8003e60:	e000      	b.n	8003e64 <USBD_CDC_Setup+0x126>
          break;
 8003e62:	bf00      	nop
      }
      break;
 8003e64:	e006      	b.n	8003e74 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8003e66:	6839      	ldr	r1, [r7, #0]
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f001 f938 	bl	80050de <USBD_CtlError>
      ret = USBD_FAIL;
 8003e6e:	2302      	movs	r3, #2
 8003e70:	75fb      	strb	r3, [r7, #23]
      break;
 8003e72:	bf00      	nop
  }

  return ret;
 8003e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b084      	sub	sp, #16
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003e90:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8003e98:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d037      	beq.n	8003f14 <USBD_CDC_DataIn+0x96>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8003ea4:	78fa      	ldrb	r2, [r7, #3]
 8003ea6:	6879      	ldr	r1, [r7, #4]
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4413      	add	r3, r2
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	440b      	add	r3, r1
 8003eb2:	331c      	adds	r3, #28
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d026      	beq.n	8003f08 <USBD_CDC_DataIn+0x8a>
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	331c      	adds	r3, #28
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	68b9      	ldr	r1, [r7, #8]
 8003ed0:	0152      	lsls	r2, r2, #5
 8003ed2:	440a      	add	r2, r1
 8003ed4:	3238      	adds	r2, #56	; 0x38
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003edc:	fb02 f201 	mul.w	r2, r2, r1
 8003ee0:	1a9b      	subs	r3, r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d110      	bne.n	8003f08 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	331c      	adds	r3, #28
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8003efa:	78f9      	ldrb	r1, [r7, #3]
 8003efc:	2300      	movs	r3, #0
 8003efe:	2200      	movs	r2, #0
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f001 ff86 	bl	8005e12 <USBD_LL_Transmit>
 8003f06:	e003      	b.n	8003f10 <USBD_CDC_DataIn+0x92>
    }
    else
    {
      hcdc->TxState = 0U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e000      	b.n	8003f16 <USBD_CDC_DataIn+0x98>
  }
  else
  {
    return USBD_FAIL;
 8003f14:	2302      	movs	r3, #2
  }
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
 8003f26:	460b      	mov	r3, r1
 8003f28:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	4619      	mov	r1, r3
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f001 ffb1 	bl	8005e9e <USBD_LL_GetRxDataSize>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00d      	beq.n	8003f6a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8003f62:	4611      	mov	r1, r2
 8003f64:	4798      	blx	r3

    return USBD_OK;
 8003f66:	2300      	movs	r3, #0
 8003f68:	e000      	b.n	8003f6c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8003f6a:	2302      	movs	r3, #2
  }
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3710      	adds	r7, #16
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8003f82:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d015      	beq.n	8003fba <USBD_CDC_EP0_RxReady+0x46>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8003f94:	2bff      	cmp	r3, #255	; 0xff
 8003f96:	d010      	beq.n	8003fba <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8003fa6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8003fae:	b292      	uxth	r2, r2
 8003fb0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	22ff      	movs	r2, #255	; 0xff
 8003fb6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8003fd2:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	2000004c 	.word	0x2000004c

08003fe4 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	220a      	movs	r2, #10
 8003ff0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8003ff2:	4b03      	ldr	r3, [pc, #12]	; (8004000 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	370c      	adds	r7, #12
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr
 8004000:	20000008 	.word	0x20000008

08004004 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800400e:	2302      	movs	r3, #2
 8004010:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8004020:	2300      	movs	r3, #0
 8004022:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004024:	7bfb      	ldrb	r3, [r7, #15]
}
 8004026:	4618      	mov	r0, r3
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr

08004032 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8004032:	b480      	push	{r7}
 8004034:	b087      	sub	sp, #28
 8004036:	af00      	add	r7, sp, #0
 8004038:	60f8      	str	r0, [r7, #12]
 800403a:	60b9      	str	r1, [r7, #8]
 800403c:	4613      	mov	r3, r2
 800403e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004046:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004050:	88fa      	ldrh	r2, [r7, #6]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8004066:	b480      	push	{r7}
 8004068:	b085      	sub	sp, #20
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004076:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	683a      	ldr	r2, [r7, #0]
 800407c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3714      	adds	r7, #20
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800409c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d01c      	beq.n	80040e2 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d115      	bne.n	80040de <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	2181      	movs	r1, #129	; 0x81
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f001 fe9c 	bl	8005e12 <USBD_LL_Transmit>

      return USBD_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	e002      	b.n	80040e4 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 80040de:	2301      	movs	r3, #1
 80040e0:	e000      	b.n	80040e4 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 80040e2:	2302      	movs	r3, #2
  }
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004102:	2b00      	cmp	r3, #0
 8004104:	d017      	beq.n	8004136 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	7c1b      	ldrb	r3, [r3, #16]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d109      	bne.n	8004122 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004114:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004118:	2101      	movs	r1, #1
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f001 fe9c 	bl	8005e58 <USBD_LL_PrepareReceive>
 8004120:	e007      	b.n	8004132 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004128:	2340      	movs	r3, #64	; 0x40
 800412a:	2101      	movs	r1, #1
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f001 fe93 	bl	8005e58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	e000      	b.n	8004138 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8004136:	2302      	movs	r3, #2
  }
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004154:	2302      	movs	r3, #2
 8004156:	e01a      	b.n	800418e <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d003      	beq.n	800416a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	79fa      	ldrb	r2, [r7, #7]
 8004184:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f001 fd00 	bl	8005b8c <USBD_LL_Init>

  return USBD_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3710      	adds	r7, #16
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}

08004196 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004196:	b480      	push	{r7}
 8004198:	b085      	sub	sp, #20
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
 800419e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80041a0:	2300      	movs	r3, #0
 80041a2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d006      	beq.n	80041b8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80041b2:	2300      	movs	r3, #0
 80041b4:	73fb      	strb	r3, [r7, #15]
 80041b6:	e001      	b.n	80041bc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80041b8:	2302      	movs	r3, #2
 80041ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80041bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3714      	adds	r7, #20
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f001 fd3a 	bl	8005c4c <USBD_LL_Start>

  return USBD_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b083      	sub	sp, #12
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	370c      	adds	r7, #12
 80041f0:	46bd      	mov	sp, r7
 80041f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f6:	4770      	bx	lr

080041f8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004204:	2302      	movs	r3, #2
 8004206:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800420e:	2b00      	cmp	r3, #0
 8004210:	d00c      	beq.n	800422c <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	78fa      	ldrb	r2, [r7, #3]
 800421c:	4611      	mov	r1, r2
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004228:	2300      	movs	r3, #0
 800422a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800422c:	7bfb      	ldrb	r3, [r7, #15]
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}

08004236 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004236:	b580      	push	{r7, lr}
 8004238:	b082      	sub	sp, #8
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	4611      	mov	r1, r2
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4798      	blx	r3

  return USBD_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3708      	adds	r7, #8
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800426c:	6839      	ldr	r1, [r7, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fef8 	bl	8005064 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004282:	461a      	mov	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004290:	f003 031f 	and.w	r3, r3, #31
 8004294:	2b01      	cmp	r3, #1
 8004296:	d00c      	beq.n	80042b2 <USBD_LL_SetupStage+0x56>
 8004298:	2b01      	cmp	r3, #1
 800429a:	d302      	bcc.n	80042a2 <USBD_LL_SetupStage+0x46>
 800429c:	2b02      	cmp	r3, #2
 800429e:	d010      	beq.n	80042c2 <USBD_LL_SetupStage+0x66>
 80042a0:	e017      	b.n	80042d2 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042a8:	4619      	mov	r1, r3
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f000 f9ce 	bl	800464c <USBD_StdDevReq>
      break;
 80042b0:	e01a      	b.n	80042e8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042b8:	4619      	mov	r1, r3
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f000 fa30 	bl	8004720 <USBD_StdItfReq>
      break;
 80042c0:	e012      	b.n	80042e8 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80042c8:	4619      	mov	r1, r3
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 fa6e 	bl	80047ac <USBD_StdEPReq>
      break;
 80042d0:	e00a      	b.n	80042e8 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80042d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	4619      	mov	r1, r3
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f001 fd13 	bl	8005d0c <USBD_LL_StallEP>
      break;
 80042e6:	bf00      	nop
  }

  return USBD_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	460b      	mov	r3, r1
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004300:	7afb      	ldrb	r3, [r7, #11]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d14b      	bne.n	800439e <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800430c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004314:	2b03      	cmp	r3, #3
 8004316:	d134      	bne.n	8004382 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	429a      	cmp	r2, r3
 8004322:	d919      	bls.n	8004358 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	1ad2      	subs	r2, r2, r3
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800433a:	429a      	cmp	r2, r3
 800433c:	d203      	bcs.n	8004346 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004342:	b29b      	uxth	r3, r3
 8004344:	e002      	b.n	800434c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800434a:	b29b      	uxth	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	6879      	ldr	r1, [r7, #4]
 8004350:	68f8      	ldr	r0, [r7, #12]
 8004352:	f000 ff7b 	bl	800524c <USBD_CtlContinueRx>
 8004356:	e038      	b.n	80043ca <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00a      	beq.n	800437a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800436a:	2b03      	cmp	r3, #3
 800436c:	d105      	bne.n	800437a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	68f8      	ldr	r0, [r7, #12]
 8004378:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f000 ff78 	bl	8005270 <USBD_CtlSendStatus>
 8004380:	e023      	b.n	80043ca <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004388:	2b05      	cmp	r3, #5
 800438a:	d11e      	bne.n	80043ca <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8004394:	2100      	movs	r1, #0
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f001 fcb8 	bl	8005d0c <USBD_LL_StallEP>
 800439c:	e015      	b.n	80043ca <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00d      	beq.n	80043c6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80043b0:	2b03      	cmp	r3, #3
 80043b2:	d108      	bne.n	80043c6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	7afa      	ldrb	r2, [r7, #11]
 80043be:	4611      	mov	r1, r2
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	4798      	blx	r3
 80043c4:	e001      	b.n	80043ca <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80043c6:	2302      	movs	r3, #2
 80043c8:	e000      	b.n	80043cc <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3718      	adds	r7, #24
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	460b      	mov	r3, r1
 80043de:	607a      	str	r2, [r7, #4]
 80043e0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80043e2:	7afb      	ldrb	r3, [r7, #11]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d17f      	bne.n	80044e8 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	3314      	adds	r3, #20
 80043ec:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d15c      	bne.n	80044b2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	429a      	cmp	r2, r3
 8004402:	d915      	bls.n	8004430 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	68da      	ldr	r2, [r3, #12]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	1ad2      	subs	r2, r2, r3
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	b29b      	uxth	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 fee5 	bl	80051ec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004422:	2300      	movs	r3, #0
 8004424:	2200      	movs	r2, #0
 8004426:	2100      	movs	r1, #0
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f001 fd15 	bl	8005e58 <USBD_LL_PrepareReceive>
 800442e:	e04e      	b.n	80044ce <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	6912      	ldr	r2, [r2, #16]
 8004438:	fbb3 f1f2 	udiv	r1, r3, r2
 800443c:	fb02 f201 	mul.w	r2, r2, r1
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d11c      	bne.n	8004480 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800444e:	429a      	cmp	r2, r3
 8004450:	d316      	bcc.n	8004480 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800445c:	429a      	cmp	r2, r3
 800445e:	d20f      	bcs.n	8004480 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004460:	2200      	movs	r2, #0
 8004462:	2100      	movs	r1, #0
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 fec1 	bl	80051ec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004472:	2300      	movs	r3, #0
 8004474:	2200      	movs	r2, #0
 8004476:	2100      	movs	r1, #0
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f001 fced 	bl	8005e58 <USBD_LL_PrepareReceive>
 800447e:	e026      	b.n	80044ce <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004492:	2b03      	cmp	r3, #3
 8004494:	d105      	bne.n	80044a2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80044a2:	2180      	movs	r1, #128	; 0x80
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f001 fc31 	bl	8005d0c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fef3 	bl	8005296 <USBD_CtlReceiveStatus>
 80044b0:	e00d      	b.n	80044ce <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d004      	beq.n	80044c6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d103      	bne.n	80044ce <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80044c6:	2180      	movs	r1, #128	; 0x80
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f001 fc1f 	bl	8005d0c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d11d      	bne.n	8004514 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f7ff fe82 	bl	80041e2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80044e6:	e015      	b.n	8004514 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	d108      	bne.n	8004510 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	7afa      	ldrb	r2, [r7, #11]
 8004508:	4611      	mov	r1, r2
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	4798      	blx	r3
 800450e:	e001      	b.n	8004514 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004510:	2302      	movs	r3, #2
 8004512:	e000      	b.n	8004516 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004526:	2340      	movs	r3, #64	; 0x40
 8004528:	2200      	movs	r2, #0
 800452a:	2100      	movs	r1, #0
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f001 fba8 	bl	8005c82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2240      	movs	r2, #64	; 0x40
 800453e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004542:	2340      	movs	r3, #64	; 0x40
 8004544:	2200      	movs	r2, #0
 8004546:	2180      	movs	r1, #128	; 0x80
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f001 fb9a 	bl	8005c82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2240      	movs	r2, #64	; 0x40
 8004558:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2200      	movs	r2, #0
 800456e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2200      	movs	r2, #0
 8004574:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d009      	beq.n	8004596 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	6852      	ldr	r2, [r2, #4]
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	4611      	mov	r1, r2
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	4798      	blx	r3
  }

  return USBD_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3708      	adds	r7, #8
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	460b      	mov	r3, r1
 80045aa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	78fa      	ldrb	r2, [r7, #3]
 80045b0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2204      	movs	r2, #4
 80045d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b083      	sub	sp, #12
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80045f8:	2b04      	cmp	r3, #4
 80045fa:	d105      	bne.n	8004608 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b082      	sub	sp, #8
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004624:	2b03      	cmp	r3, #3
 8004626:	d10b      	bne.n	8004640 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d005      	beq.n	8004640 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800463a:	69db      	ldr	r3, [r3, #28]
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b084      	sub	sp, #16
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
 8004654:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004656:	2300      	movs	r3, #0
 8004658:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004662:	2b20      	cmp	r3, #32
 8004664:	d004      	beq.n	8004670 <USBD_StdDevReq+0x24>
 8004666:	2b40      	cmp	r3, #64	; 0x40
 8004668:	d002      	beq.n	8004670 <USBD_StdDevReq+0x24>
 800466a:	2b00      	cmp	r3, #0
 800466c:	d008      	beq.n	8004680 <USBD_StdDevReq+0x34>
 800466e:	e04c      	b.n	800470a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	6839      	ldr	r1, [r7, #0]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
      break;
 800467e:	e049      	b.n	8004714 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	785b      	ldrb	r3, [r3, #1]
 8004684:	2b09      	cmp	r3, #9
 8004686:	d83a      	bhi.n	80046fe <USBD_StdDevReq+0xb2>
 8004688:	a201      	add	r2, pc, #4	; (adr r2, 8004690 <USBD_StdDevReq+0x44>)
 800468a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468e:	bf00      	nop
 8004690:	080046e1 	.word	0x080046e1
 8004694:	080046f5 	.word	0x080046f5
 8004698:	080046ff 	.word	0x080046ff
 800469c:	080046eb 	.word	0x080046eb
 80046a0:	080046ff 	.word	0x080046ff
 80046a4:	080046c3 	.word	0x080046c3
 80046a8:	080046b9 	.word	0x080046b9
 80046ac:	080046ff 	.word	0x080046ff
 80046b0:	080046d7 	.word	0x080046d7
 80046b4:	080046cd 	.word	0x080046cd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80046b8:	6839      	ldr	r1, [r7, #0]
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f000 f9d4 	bl	8004a68 <USBD_GetDescriptor>
          break;
 80046c0:	e022      	b.n	8004708 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80046c2:	6839      	ldr	r1, [r7, #0]
 80046c4:	6878      	ldr	r0, [r7, #4]
 80046c6:	f000 fb61 	bl	8004d8c <USBD_SetAddress>
          break;
 80046ca:	e01d      	b.n	8004708 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80046cc:	6839      	ldr	r1, [r7, #0]
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fb9e 	bl	8004e10 <USBD_SetConfig>
          break;
 80046d4:	e018      	b.n	8004708 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80046d6:	6839      	ldr	r1, [r7, #0]
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fc27 	bl	8004f2c <USBD_GetConfig>
          break;
 80046de:	e013      	b.n	8004708 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80046e0:	6839      	ldr	r1, [r7, #0]
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 fc56 	bl	8004f94 <USBD_GetStatus>
          break;
 80046e8:	e00e      	b.n	8004708 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80046ea:	6839      	ldr	r1, [r7, #0]
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 fc84 	bl	8004ffa <USBD_SetFeature>
          break;
 80046f2:	e009      	b.n	8004708 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80046f4:	6839      	ldr	r1, [r7, #0]
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f000 fc93 	bl	8005022 <USBD_ClrFeature>
          break;
 80046fc:	e004      	b.n	8004708 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 80046fe:	6839      	ldr	r1, [r7, #0]
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fcec 	bl	80050de <USBD_CtlError>
          break;
 8004706:	bf00      	nop
      }
      break;
 8004708:	e004      	b.n	8004714 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800470a:	6839      	ldr	r1, [r7, #0]
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 fce6 	bl	80050de <USBD_CtlError>
      break;
 8004712:	bf00      	nop
  }

  return ret;
 8004714:	7bfb      	ldrb	r3, [r7, #15]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop

08004720 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004736:	2b20      	cmp	r3, #32
 8004738:	d003      	beq.n	8004742 <USBD_StdItfReq+0x22>
 800473a:	2b40      	cmp	r3, #64	; 0x40
 800473c:	d001      	beq.n	8004742 <USBD_StdItfReq+0x22>
 800473e:	2b00      	cmp	r3, #0
 8004740:	d12a      	bne.n	8004798 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004748:	3b01      	subs	r3, #1
 800474a:	2b02      	cmp	r3, #2
 800474c:	d81d      	bhi.n	800478a <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	889b      	ldrh	r3, [r3, #4]
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b01      	cmp	r3, #1
 8004756:	d813      	bhi.n	8004780 <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	6839      	ldr	r1, [r7, #0]
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	4798      	blx	r3
 8004766:	4603      	mov	r3, r0
 8004768:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	88db      	ldrh	r3, [r3, #6]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d110      	bne.n	8004794 <USBD_StdItfReq+0x74>
 8004772:	7bfb      	ldrb	r3, [r7, #15]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d10d      	bne.n	8004794 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 fd79 	bl	8005270 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800477e:	e009      	b.n	8004794 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004780:	6839      	ldr	r1, [r7, #0]
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 fcab 	bl	80050de <USBD_CtlError>
          break;
 8004788:	e004      	b.n	8004794 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 800478a:	6839      	ldr	r1, [r7, #0]
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 fca6 	bl	80050de <USBD_CtlError>
          break;
 8004792:	e000      	b.n	8004796 <USBD_StdItfReq+0x76>
          break;
 8004794:	bf00      	nop
      }
      break;
 8004796:	e004      	b.n	80047a2 <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004798:	6839      	ldr	r1, [r7, #0]
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fc9f 	bl	80050de <USBD_CtlError>
      break;
 80047a0:	bf00      	nop
  }

  return USBD_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b084      	sub	sp, #16
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80047b6:	2300      	movs	r3, #0
 80047b8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	889b      	ldrh	r3, [r3, #4]
 80047be:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d004      	beq.n	80047d6 <USBD_StdEPReq+0x2a>
 80047cc:	2b40      	cmp	r3, #64	; 0x40
 80047ce:	d002      	beq.n	80047d6 <USBD_StdEPReq+0x2a>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d008      	beq.n	80047e6 <USBD_StdEPReq+0x3a>
 80047d4:	e13d      	b.n	8004a52 <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	6839      	ldr	r1, [r7, #0]
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
      break;
 80047e4:	e13a      	b.n	8004a5c <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d10a      	bne.n	8004808 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	6839      	ldr	r1, [r7, #0]
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	4798      	blx	r3
 8004800:	4603      	mov	r3, r0
 8004802:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
 8004806:	e12a      	b.n	8004a5e <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	785b      	ldrb	r3, [r3, #1]
 800480c:	2b01      	cmp	r3, #1
 800480e:	d03e      	beq.n	800488e <USBD_StdEPReq+0xe2>
 8004810:	2b03      	cmp	r3, #3
 8004812:	d002      	beq.n	800481a <USBD_StdEPReq+0x6e>
 8004814:	2b00      	cmp	r3, #0
 8004816:	d070      	beq.n	80048fa <USBD_StdEPReq+0x14e>
 8004818:	e115      	b.n	8004a46 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004820:	2b02      	cmp	r3, #2
 8004822:	d002      	beq.n	800482a <USBD_StdEPReq+0x7e>
 8004824:	2b03      	cmp	r3, #3
 8004826:	d015      	beq.n	8004854 <USBD_StdEPReq+0xa8>
 8004828:	e02b      	b.n	8004882 <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800482a:	7bbb      	ldrb	r3, [r7, #14]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d00c      	beq.n	800484a <USBD_StdEPReq+0x9e>
 8004830:	7bbb      	ldrb	r3, [r7, #14]
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d009      	beq.n	800484a <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004836:	7bbb      	ldrb	r3, [r7, #14]
 8004838:	4619      	mov	r1, r3
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f001 fa66 	bl	8005d0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f001 fa62 	bl	8005d0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004848:	e020      	b.n	800488c <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fc46 	bl	80050de <USBD_CtlError>
              break;
 8004852:	e01b      	b.n	800488c <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	885b      	ldrh	r3, [r3, #2]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10e      	bne.n	800487a <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 800485c:	7bbb      	ldrb	r3, [r7, #14]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00b      	beq.n	800487a <USBD_StdEPReq+0xce>
 8004862:	7bbb      	ldrb	r3, [r7, #14]
 8004864:	2b80      	cmp	r3, #128	; 0x80
 8004866:	d008      	beq.n	800487a <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	88db      	ldrh	r3, [r3, #6]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d104      	bne.n	800487a <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004870:	7bbb      	ldrb	r3, [r7, #14]
 8004872:	4619      	mov	r1, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f001 fa49 	bl	8005d0c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fcf8 	bl	8005270 <USBD_CtlSendStatus>

              break;
 8004880:	e004      	b.n	800488c <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004882:	6839      	ldr	r1, [r7, #0]
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fc2a 	bl	80050de <USBD_CtlError>
              break;
 800488a:	bf00      	nop
          }
          break;
 800488c:	e0e0      	b.n	8004a50 <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004894:	2b02      	cmp	r3, #2
 8004896:	d002      	beq.n	800489e <USBD_StdEPReq+0xf2>
 8004898:	2b03      	cmp	r3, #3
 800489a:	d015      	beq.n	80048c8 <USBD_StdEPReq+0x11c>
 800489c:	e026      	b.n	80048ec <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800489e:	7bbb      	ldrb	r3, [r7, #14]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00c      	beq.n	80048be <USBD_StdEPReq+0x112>
 80048a4:	7bbb      	ldrb	r3, [r7, #14]
 80048a6:	2b80      	cmp	r3, #128	; 0x80
 80048a8:	d009      	beq.n	80048be <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80048aa:	7bbb      	ldrb	r3, [r7, #14]
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fa2c 	bl	8005d0c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80048b4:	2180      	movs	r1, #128	; 0x80
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f001 fa28 	bl	8005d0c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80048bc:	e01c      	b.n	80048f8 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 80048be:	6839      	ldr	r1, [r7, #0]
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	f000 fc0c 	bl	80050de <USBD_CtlError>
              break;
 80048c6:	e017      	b.n	80048f8 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	885b      	ldrh	r3, [r3, #2]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d112      	bne.n	80048f6 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80048d0:	7bbb      	ldrb	r3, [r7, #14]
 80048d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d004      	beq.n	80048e4 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80048da:	7bbb      	ldrb	r3, [r7, #14]
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f001 fa33 	bl	8005d4a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fcc3 	bl	8005270 <USBD_CtlSendStatus>
              }
              break;
 80048ea:	e004      	b.n	80048f6 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 80048ec:	6839      	ldr	r1, [r7, #0]
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 fbf5 	bl	80050de <USBD_CtlError>
              break;
 80048f4:	e000      	b.n	80048f8 <USBD_StdEPReq+0x14c>
              break;
 80048f6:	bf00      	nop
          }
          break;
 80048f8:	e0aa      	b.n	8004a50 <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004900:	2b02      	cmp	r3, #2
 8004902:	d002      	beq.n	800490a <USBD_StdEPReq+0x15e>
 8004904:	2b03      	cmp	r3, #3
 8004906:	d032      	beq.n	800496e <USBD_StdEPReq+0x1c2>
 8004908:	e097      	b.n	8004a3a <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800490a:	7bbb      	ldrb	r3, [r7, #14]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d007      	beq.n	8004920 <USBD_StdEPReq+0x174>
 8004910:	7bbb      	ldrb	r3, [r7, #14]
 8004912:	2b80      	cmp	r3, #128	; 0x80
 8004914:	d004      	beq.n	8004920 <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004916:	6839      	ldr	r1, [r7, #0]
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fbe0 	bl	80050de <USBD_CtlError>
                break;
 800491e:	e091      	b.n	8004a44 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004920:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004924:	2b00      	cmp	r3, #0
 8004926:	da0b      	bge.n	8004940 <USBD_StdEPReq+0x194>
 8004928:	7bbb      	ldrb	r3, [r7, #14]
 800492a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800492e:	4613      	mov	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	3310      	adds	r3, #16
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	4413      	add	r3, r2
 800493c:	3304      	adds	r3, #4
 800493e:	e00b      	b.n	8004958 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004940:	7bbb      	ldrb	r3, [r7, #14]
 8004942:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004946:	4613      	mov	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	4413      	add	r3, r2
 8004956:	3304      	adds	r3, #4
 8004958:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2200      	movs	r2, #0
 800495e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	2202      	movs	r2, #2
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 fc24 	bl	80051b4 <USBD_CtlSendData>
              break;
 800496c:	e06a      	b.n	8004a44 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800496e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004972:	2b00      	cmp	r3, #0
 8004974:	da11      	bge.n	800499a <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004976:	7bbb      	ldrb	r3, [r7, #14]
 8004978:	f003 020f 	and.w	r2, r3, #15
 800497c:	6879      	ldr	r1, [r7, #4]
 800497e:	4613      	mov	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4413      	add	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	440b      	add	r3, r1
 8004988:	3318      	adds	r3, #24
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d117      	bne.n	80049c0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004990:	6839      	ldr	r1, [r7, #0]
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fba3 	bl	80050de <USBD_CtlError>
                  break;
 8004998:	e054      	b.n	8004a44 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800499a:	7bbb      	ldrb	r3, [r7, #14]
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 80049b6:	6839      	ldr	r1, [r7, #0]
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fb90 	bl	80050de <USBD_CtlError>
                  break;
 80049be:	e041      	b.n	8004a44 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	da0b      	bge.n	80049e0 <USBD_StdEPReq+0x234>
 80049c8:	7bbb      	ldrb	r3, [r7, #14]
 80049ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	3310      	adds	r3, #16
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	3304      	adds	r3, #4
 80049de:	e00b      	b.n	80049f8 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80049e0:	7bbb      	ldrb	r3, [r7, #14]
 80049e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	4413      	add	r3, r2
 80049f6:	3304      	adds	r3, #4
 80049f8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80049fa:	7bbb      	ldrb	r3, [r7, #14]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d002      	beq.n	8004a06 <USBD_StdEPReq+0x25a>
 8004a00:	7bbb      	ldrb	r3, [r7, #14]
 8004a02:	2b80      	cmp	r3, #128	; 0x80
 8004a04:	d103      	bne.n	8004a0e <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	e00e      	b.n	8004a2c <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004a0e:	7bbb      	ldrb	r3, [r7, #14]
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f001 f9b8 	bl	8005d88 <USBD_LL_IsStallEP>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d003      	beq.n	8004a26 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	2201      	movs	r2, #1
 8004a22:	601a      	str	r2, [r3, #0]
 8004a24:	e002      	b.n	8004a2c <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4619      	mov	r1, r3
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f000 fbbe 	bl	80051b4 <USBD_CtlSendData>
              break;
 8004a38:	e004      	b.n	8004a44 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004a3a:	6839      	ldr	r1, [r7, #0]
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fb4e 	bl	80050de <USBD_CtlError>
              break;
 8004a42:	bf00      	nop
          }
          break;
 8004a44:	e004      	b.n	8004a50 <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004a46:	6839      	ldr	r1, [r7, #0]
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fb48 	bl	80050de <USBD_CtlError>
          break;
 8004a4e:	bf00      	nop
      }
      break;
 8004a50:	e004      	b.n	8004a5c <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fb42 	bl	80050de <USBD_CtlError>
      break;
 8004a5a:	bf00      	nop
  }

  return ret;
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
	...

08004a68 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	885b      	ldrh	r3, [r3, #2]
 8004a82:	0a1b      	lsrs	r3, r3, #8
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	3b01      	subs	r3, #1
 8004a88:	2b0e      	cmp	r3, #14
 8004a8a:	f200 8152 	bhi.w	8004d32 <USBD_GetDescriptor+0x2ca>
 8004a8e:	a201      	add	r2, pc, #4	; (adr r2, 8004a94 <USBD_GetDescriptor+0x2c>)
 8004a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a94:	08004b05 	.word	0x08004b05
 8004a98:	08004b1d 	.word	0x08004b1d
 8004a9c:	08004b5d 	.word	0x08004b5d
 8004aa0:	08004d33 	.word	0x08004d33
 8004aa4:	08004d33 	.word	0x08004d33
 8004aa8:	08004cd3 	.word	0x08004cd3
 8004aac:	08004cff 	.word	0x08004cff
 8004ab0:	08004d33 	.word	0x08004d33
 8004ab4:	08004d33 	.word	0x08004d33
 8004ab8:	08004d33 	.word	0x08004d33
 8004abc:	08004d33 	.word	0x08004d33
 8004ac0:	08004d33 	.word	0x08004d33
 8004ac4:	08004d33 	.word	0x08004d33
 8004ac8:	08004d33 	.word	0x08004d33
 8004acc:	08004ad1 	.word	0x08004ad1
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00b      	beq.n	8004af4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004ae2:	69db      	ldr	r3, [r3, #28]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	7c12      	ldrb	r2, [r2, #16]
 8004ae8:	f107 0108 	add.w	r1, r7, #8
 8004aec:	4610      	mov	r0, r2
 8004aee:	4798      	blx	r3
 8004af0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004af2:	e126      	b.n	8004d42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 faf1 	bl	80050de <USBD_CtlError>
        err++;
 8004afc:	7afb      	ldrb	r3, [r7, #11]
 8004afe:	3301      	adds	r3, #1
 8004b00:	72fb      	strb	r3, [r7, #11]
      break;
 8004b02:	e11e      	b.n	8004d42 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	687a      	ldr	r2, [r7, #4]
 8004b0e:	7c12      	ldrb	r2, [r2, #16]
 8004b10:	f107 0108 	add.w	r1, r7, #8
 8004b14:	4610      	mov	r0, r2
 8004b16:	4798      	blx	r3
 8004b18:	60f8      	str	r0, [r7, #12]
      break;
 8004b1a:	e112      	b.n	8004d42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7c1b      	ldrb	r3, [r3, #16]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10d      	bne.n	8004b40 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2c:	f107 0208 	add.w	r2, r7, #8
 8004b30:	4610      	mov	r0, r2
 8004b32:	4798      	blx	r3
 8004b34:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8004b3e:	e100      	b.n	8004d42 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b48:	f107 0208 	add.w	r2, r7, #8
 8004b4c:	4610      	mov	r0, r2
 8004b4e:	4798      	blx	r3
 8004b50:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3301      	adds	r3, #1
 8004b56:	2202      	movs	r2, #2
 8004b58:	701a      	strb	r2, [r3, #0]
      break;
 8004b5a:	e0f2      	b.n	8004d42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	885b      	ldrh	r3, [r3, #2]
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b05      	cmp	r3, #5
 8004b64:	f200 80ac 	bhi.w	8004cc0 <USBD_GetDescriptor+0x258>
 8004b68:	a201      	add	r2, pc, #4	; (adr r2, 8004b70 <USBD_GetDescriptor+0x108>)
 8004b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6e:	bf00      	nop
 8004b70:	08004b89 	.word	0x08004b89
 8004b74:	08004bbd 	.word	0x08004bbd
 8004b78:	08004bf1 	.word	0x08004bf1
 8004b7c:	08004c25 	.word	0x08004c25
 8004b80:	08004c59 	.word	0x08004c59
 8004b84:	08004c8d 	.word	0x08004c8d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00b      	beq.n	8004bac <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	7c12      	ldrb	r2, [r2, #16]
 8004ba0:	f107 0108 	add.w	r1, r7, #8
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4798      	blx	r3
 8004ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004baa:	e091      	b.n	8004cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004bac:	6839      	ldr	r1, [r7, #0]
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 fa95 	bl	80050de <USBD_CtlError>
            err++;
 8004bb4:	7afb      	ldrb	r3, [r7, #11]
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8004bba:	e089      	b.n	8004cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00b      	beq.n	8004be0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	7c12      	ldrb	r2, [r2, #16]
 8004bd4:	f107 0108 	add.w	r1, r7, #8
 8004bd8:	4610      	mov	r0, r2
 8004bda:	4798      	blx	r3
 8004bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004bde:	e077      	b.n	8004cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 fa7b 	bl	80050de <USBD_CtlError>
            err++;
 8004be8:	7afb      	ldrb	r3, [r7, #11]
 8004bea:	3301      	adds	r3, #1
 8004bec:	72fb      	strb	r3, [r7, #11]
          break;
 8004bee:	e06f      	b.n	8004cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00b      	beq.n	8004c14 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	7c12      	ldrb	r2, [r2, #16]
 8004c08:	f107 0108 	add.w	r1, r7, #8
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	4798      	blx	r3
 8004c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c12:	e05d      	b.n	8004cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004c14:	6839      	ldr	r1, [r7, #0]
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa61 	bl	80050de <USBD_CtlError>
            err++;
 8004c1c:	7afb      	ldrb	r3, [r7, #11]
 8004c1e:	3301      	adds	r3, #1
 8004c20:	72fb      	strb	r3, [r7, #11]
          break;
 8004c22:	e055      	b.n	8004cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d00b      	beq.n	8004c48 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c36:	691b      	ldr	r3, [r3, #16]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	7c12      	ldrb	r2, [r2, #16]
 8004c3c:	f107 0108 	add.w	r1, r7, #8
 8004c40:	4610      	mov	r0, r2
 8004c42:	4798      	blx	r3
 8004c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c46:	e043      	b.n	8004cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004c48:	6839      	ldr	r1, [r7, #0]
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	f000 fa47 	bl	80050de <USBD_CtlError>
            err++;
 8004c50:	7afb      	ldrb	r3, [r7, #11]
 8004c52:	3301      	adds	r3, #1
 8004c54:	72fb      	strb	r3, [r7, #11]
          break;
 8004c56:	e03b      	b.n	8004cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c5e:	695b      	ldr	r3, [r3, #20]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00b      	beq.n	8004c7c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	7c12      	ldrb	r2, [r2, #16]
 8004c70:	f107 0108 	add.w	r1, r7, #8
 8004c74:	4610      	mov	r0, r2
 8004c76:	4798      	blx	r3
 8004c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004c7a:	e029      	b.n	8004cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004c7c:	6839      	ldr	r1, [r7, #0]
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 fa2d 	bl	80050de <USBD_CtlError>
            err++;
 8004c84:	7afb      	ldrb	r3, [r7, #11]
 8004c86:	3301      	adds	r3, #1
 8004c88:	72fb      	strb	r3, [r7, #11]
          break;
 8004c8a:	e021      	b.n	8004cd0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00b      	beq.n	8004cb0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	7c12      	ldrb	r2, [r2, #16]
 8004ca4:	f107 0108 	add.w	r1, r7, #8
 8004ca8:	4610      	mov	r0, r2
 8004caa:	4798      	blx	r3
 8004cac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8004cae:	e00f      	b.n	8004cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8004cb0:	6839      	ldr	r1, [r7, #0]
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fa13 	bl	80050de <USBD_CtlError>
            err++;
 8004cb8:	7afb      	ldrb	r3, [r7, #11]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	72fb      	strb	r3, [r7, #11]
          break;
 8004cbe:	e007      	b.n	8004cd0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8004cc0:	6839      	ldr	r1, [r7, #0]
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f000 fa0b 	bl	80050de <USBD_CtlError>
          err++;
 8004cc8:	7afb      	ldrb	r3, [r7, #11]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8004cce:	e038      	b.n	8004d42 <USBD_GetDescriptor+0x2da>
 8004cd0:	e037      	b.n	8004d42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	7c1b      	ldrb	r3, [r3, #16]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce2:	f107 0208 	add.w	r2, r7, #8
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	4798      	blx	r3
 8004cea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004cec:	e029      	b.n	8004d42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8004cee:	6839      	ldr	r1, [r7, #0]
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f000 f9f4 	bl	80050de <USBD_CtlError>
        err++;
 8004cf6:	7afb      	ldrb	r3, [r7, #11]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	72fb      	strb	r3, [r7, #11]
      break;
 8004cfc:	e021      	b.n	8004d42 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	7c1b      	ldrb	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10d      	bne.n	8004d22 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0e:	f107 0208 	add.w	r2, r7, #8
 8004d12:	4610      	mov	r0, r2
 8004d14:	4798      	blx	r3
 8004d16:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	2207      	movs	r2, #7
 8004d1e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8004d20:	e00f      	b.n	8004d42 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8004d22:	6839      	ldr	r1, [r7, #0]
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 f9da 	bl	80050de <USBD_CtlError>
        err++;
 8004d2a:	7afb      	ldrb	r3, [r7, #11]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	72fb      	strb	r3, [r7, #11]
      break;
 8004d30:	e007      	b.n	8004d42 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8004d32:	6839      	ldr	r1, [r7, #0]
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 f9d2 	bl	80050de <USBD_CtlError>
      err++;
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	72fb      	strb	r3, [r7, #11]
      break;
 8004d40:	bf00      	nop
  }

  if (err != 0U)
 8004d42:	7afb      	ldrb	r3, [r7, #11]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d11c      	bne.n	8004d82 <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d011      	beq.n	8004d72 <USBD_GetDescriptor+0x30a>
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	88db      	ldrh	r3, [r3, #6]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00d      	beq.n	8004d72 <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	88da      	ldrh	r2, [r3, #6]
 8004d5a:	893b      	ldrh	r3, [r7, #8]
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	bf28      	it	cs
 8004d60:	4613      	movcs	r3, r2
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8004d66:	893b      	ldrh	r3, [r7, #8]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f000 fa21 	bl	80051b4 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	88db      	ldrh	r3, [r3, #6]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d104      	bne.n	8004d84 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	f000 fa78 	bl	8005270 <USBD_CtlSendStatus>
 8004d80:	e000      	b.n	8004d84 <USBD_GetDescriptor+0x31c>
    return;
 8004d82:	bf00      	nop
    }
  }
}
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop

08004d8c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
 8004d94:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	889b      	ldrh	r3, [r3, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d130      	bne.n	8004e00 <USBD_SetAddress+0x74>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	88db      	ldrh	r3, [r3, #6]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d12c      	bne.n	8004e00 <USBD_SetAddress+0x74>
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	885b      	ldrh	r3, [r3, #2]
 8004daa:	2b7f      	cmp	r3, #127	; 0x7f
 8004dac:	d828      	bhi.n	8004e00 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	885b      	ldrh	r3, [r3, #2]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dc0:	2b03      	cmp	r3, #3
 8004dc2:	d104      	bne.n	8004dce <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8004dc4:	6839      	ldr	r1, [r7, #0]
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 f989 	bl	80050de <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dcc:	e01c      	b.n	8004e08 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	7bfa      	ldrb	r2, [r7, #15]
 8004dd2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8004dd6:	7bfb      	ldrb	r3, [r7, #15]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fffa 	bl	8005dd4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f000 fa45 	bl	8005270 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d004      	beq.n	8004df6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004df4:	e008      	b.n	8004e08 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dfe:	e003      	b.n	8004e08 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8004e00:	6839      	ldr	r1, [r7, #0]
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f000 f96b 	bl	80050de <USBD_CtlError>
  }
}
 8004e08:	bf00      	nop
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	885b      	ldrh	r3, [r3, #2]
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	4b41      	ldr	r3, [pc, #260]	; (8004f28 <USBD_SetConfig+0x118>)
 8004e22:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8004e24:	4b40      	ldr	r3, [pc, #256]	; (8004f28 <USBD_SetConfig+0x118>)
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d904      	bls.n	8004e36 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 f955 	bl	80050de <USBD_CtlError>
 8004e34:	e075      	b.n	8004f22 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d002      	beq.n	8004e46 <USBD_SetConfig+0x36>
 8004e40:	2b03      	cmp	r3, #3
 8004e42:	d023      	beq.n	8004e8c <USBD_SetConfig+0x7c>
 8004e44:	e062      	b.n	8004f0c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8004e46:	4b38      	ldr	r3, [pc, #224]	; (8004f28 <USBD_SetConfig+0x118>)
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01a      	beq.n	8004e84 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8004e4e:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <USBD_SetConfig+0x118>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	461a      	mov	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004e60:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <USBD_SetConfig+0x118>)
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	4619      	mov	r1, r3
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7ff f9c6 	bl	80041f8 <USBD_SetClassConfig>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d104      	bne.n	8004e7c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	6878      	ldr	r0, [r7, #4]
 8004e76:	f000 f932 	bl	80050de <USBD_CtlError>
            return;
 8004e7a:	e052      	b.n	8004f22 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f000 f9f7 	bl	8005270 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004e82:	e04e      	b.n	8004f22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f9f3 	bl	8005270 <USBD_CtlSendStatus>
        break;
 8004e8a:	e04a      	b.n	8004f22 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8004e8c:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <USBD_SetConfig+0x118>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d112      	bne.n	8004eba <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8004e9c:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <USBD_SetConfig+0x118>)
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <USBD_SetConfig+0x118>)
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7ff f9c2 	bl	8004236 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f9dc 	bl	8005270 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8004eb8:	e033      	b.n	8004f22 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8004eba:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <USBD_SetConfig+0x118>)
 8004ebc:	781b      	ldrb	r3, [r3, #0]
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d01d      	beq.n	8004f04 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	4619      	mov	r1, r3
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff f9b0 	bl	8004236 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8004ed6:	4b14      	ldr	r3, [pc, #80]	; (8004f28 <USBD_SetConfig+0x118>)
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	461a      	mov	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8004ee0:	4b11      	ldr	r3, [pc, #68]	; (8004f28 <USBD_SetConfig+0x118>)
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f7ff f986 	bl	80041f8 <USBD_SetClassConfig>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d104      	bne.n	8004efc <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8004ef2:	6839      	ldr	r1, [r7, #0]
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f8f2 	bl	80050de <USBD_CtlError>
            return;
 8004efa:	e012      	b.n	8004f22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f000 f9b7 	bl	8005270 <USBD_CtlSendStatus>
        break;
 8004f02:	e00e      	b.n	8004f22 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 f9b3 	bl	8005270 <USBD_CtlSendStatus>
        break;
 8004f0a:	e00a      	b.n	8004f22 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8004f0c:	6839      	ldr	r1, [r7, #0]
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f8e5 	bl	80050de <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8004f14:	4b04      	ldr	r3, [pc, #16]	; (8004f28 <USBD_SetConfig+0x118>)
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff f98b 	bl	8004236 <USBD_ClrClassConfig>
        break;
 8004f20:	bf00      	nop
    }
  }
}
 8004f22:	3708      	adds	r7, #8
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	200000f0 	.word	0x200000f0

08004f2c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	88db      	ldrh	r3, [r3, #6]
 8004f3a:	2b01      	cmp	r3, #1
 8004f3c:	d004      	beq.n	8004f48 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8004f3e:	6839      	ldr	r1, [r7, #0]
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f8cc 	bl	80050de <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8004f46:	e021      	b.n	8004f8c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	db17      	blt.n	8004f82 <USBD_GetConfig+0x56>
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	dd02      	ble.n	8004f5c <USBD_GetConfig+0x30>
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d00b      	beq.n	8004f72 <USBD_GetConfig+0x46>
 8004f5a:	e012      	b.n	8004f82 <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3308      	adds	r3, #8
 8004f66:	2201      	movs	r2, #1
 8004f68:	4619      	mov	r1, r3
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f922 	bl	80051b4 <USBD_CtlSendData>
        break;
 8004f70:	e00c      	b.n	8004f8c <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3304      	adds	r3, #4
 8004f76:	2201      	movs	r2, #1
 8004f78:	4619      	mov	r1, r3
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f000 f91a 	bl	80051b4 <USBD_CtlSendData>
        break;
 8004f80:	e004      	b.n	8004f8c <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 8004f82:	6839      	ldr	r1, [r7, #0]
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f000 f8aa 	bl	80050de <USBD_CtlError>
        break;
 8004f8a:	bf00      	nop
}
 8004f8c:	bf00      	nop
 8004f8e:	3708      	adds	r7, #8
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}

08004f94 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b082      	sub	sp, #8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d81e      	bhi.n	8004fe8 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	88db      	ldrh	r3, [r3, #6]
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d004      	beq.n	8004fbc <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8004fb2:	6839      	ldr	r1, [r7, #0]
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f892 	bl	80050de <USBD_CtlError>
        break;
 8004fba:	e01a      	b.n	8004ff2 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d005      	beq.n	8004fd8 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	68db      	ldr	r3, [r3, #12]
 8004fd0:	f043 0202 	orr.w	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	330c      	adds	r3, #12
 8004fdc:	2202      	movs	r2, #2
 8004fde:	4619      	mov	r1, r3
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f8e7 	bl	80051b4 <USBD_CtlSendData>
      break;
 8004fe6:	e004      	b.n	8004ff2 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8004fe8:	6839      	ldr	r1, [r7, #0]
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f877 	bl	80050de <USBD_CtlError>
      break;
 8004ff0:	bf00      	nop
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b082      	sub	sp, #8
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
 8005002:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	885b      	ldrh	r3, [r3, #2]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d106      	bne.n	800501a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f000 f92b 	bl	8005270 <USBD_CtlSendStatus>
  }
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b082      	sub	sp, #8
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005032:	3b01      	subs	r3, #1
 8005034:	2b02      	cmp	r3, #2
 8005036:	d80b      	bhi.n	8005050 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	885b      	ldrh	r3, [r3, #2]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d10c      	bne.n	800505a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f911 	bl	8005270 <USBD_CtlSendStatus>
      }
      break;
 800504e:	e004      	b.n	800505a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 f843 	bl	80050de <USBD_CtlError>
      break;
 8005058:	e000      	b.n	800505c <USBD_ClrFeature+0x3a>
      break;
 800505a:	bf00      	nop
  }
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	785a      	ldrb	r2, [r3, #1]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	3302      	adds	r3, #2
 8005082:	781b      	ldrb	r3, [r3, #0]
 8005084:	b29a      	uxth	r2, r3
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	3303      	adds	r3, #3
 800508a:	781b      	ldrb	r3, [r3, #0]
 800508c:	b29b      	uxth	r3, r3
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	b29b      	uxth	r3, r3
 8005092:	4413      	add	r3, r2
 8005094:	b29a      	uxth	r2, r3
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	3304      	adds	r3, #4
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	3305      	adds	r3, #5
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	b29b      	uxth	r3, r3
 80050aa:	021b      	lsls	r3, r3, #8
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	3306      	adds	r3, #6
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	b29a      	uxth	r2, r3
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	3307      	adds	r3, #7
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	021b      	lsls	r3, r3, #8
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	4413      	add	r3, r2
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	80da      	strh	r2, [r3, #6]

}
 80050d2:	bf00      	nop
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr

080050de <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b082      	sub	sp, #8
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80050e8:	2180      	movs	r1, #128	; 0x80
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 fe0e 	bl	8005d0c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80050f0:	2100      	movs	r1, #0
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 fe0a 	bl	8005d0c <USBD_LL_StallEP>
}
 80050f8:	bf00      	nop
 80050fa:	3708      	adds	r7, #8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800510c:	2300      	movs	r3, #0
 800510e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d032      	beq.n	800517c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f834 	bl	8005184 <USBD_GetLen>
 800511c:	4603      	mov	r3, r0
 800511e:	3301      	adds	r3, #1
 8005120:	b29b      	uxth	r3, r3
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	b29a      	uxth	r2, r3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800512a:	7dfb      	ldrb	r3, [r7, #23]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	75fa      	strb	r2, [r7, #23]
 8005130:	461a      	mov	r2, r3
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	4413      	add	r3, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	7812      	ldrb	r2, [r2, #0]
 800513a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	75fa      	strb	r2, [r7, #23]
 8005142:	461a      	mov	r2, r3
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	4413      	add	r3, r2
 8005148:	2203      	movs	r2, #3
 800514a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800514c:	e012      	b.n	8005174 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	1c5a      	adds	r2, r3, #1
 8005152:	60fa      	str	r2, [r7, #12]
 8005154:	7dfa      	ldrb	r2, [r7, #23]
 8005156:	1c51      	adds	r1, r2, #1
 8005158:	75f9      	strb	r1, [r7, #23]
 800515a:	4611      	mov	r1, r2
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	440a      	add	r2, r1
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005164:	7dfb      	ldrb	r3, [r7, #23]
 8005166:	1c5a      	adds	r2, r3, #1
 8005168:	75fa      	strb	r2, [r7, #23]
 800516a:	461a      	mov	r2, r3
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4413      	add	r3, r2
 8005170:	2200      	movs	r2, #0
 8005172:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e8      	bne.n	800514e <USBD_GetString+0x4e>
    }
  }
}
 800517c:	bf00      	nop
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005184:	b480      	push	{r7}
 8005186:	b085      	sub	sp, #20
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800518c:	2300      	movs	r3, #0
 800518e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8005190:	e005      	b.n	800519e <USBD_GetLen+0x1a>
  {
    len++;
 8005192:	7bfb      	ldrb	r3, [r7, #15]
 8005194:	3301      	adds	r3, #1
 8005196:	73fb      	strb	r3, [r7, #15]
    buf++;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	3301      	adds	r3, #1
 800519c:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	781b      	ldrb	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1f5      	bne.n	8005192 <USBD_GetLen+0xe>
  }

  return len;
 80051a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	4613      	mov	r3, r2
 80051c0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2202      	movs	r2, #2
 80051c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80051ca:	88fa      	ldrh	r2, [r7, #6]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80051d0:	88fa      	ldrh	r2, [r7, #6]
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80051d6:	88fb      	ldrh	r3, [r7, #6]
 80051d8:	68ba      	ldr	r2, [r7, #8]
 80051da:	2100      	movs	r1, #0
 80051dc:	68f8      	ldr	r0, [r7, #12]
 80051de:	f000 fe18 	bl	8005e12 <USBD_LL_Transmit>

  return USBD_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	2100      	movs	r1, #0
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 fe06 	bl	8005e12 <USBD_LL_Transmit>

  return USBD_OK;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	3710      	adds	r7, #16
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}

08005210 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b084      	sub	sp, #16
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	2203      	movs	r2, #3
 8005222:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005226:	88fa      	ldrh	r2, [r7, #6]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800522e:	88fa      	ldrh	r2, [r7, #6]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005236:	88fb      	ldrh	r3, [r7, #6]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	2100      	movs	r1, #0
 800523c:	68f8      	ldr	r0, [r7, #12]
 800523e:	f000 fe0b 	bl	8005e58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	4613      	mov	r3, r2
 8005258:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	68ba      	ldr	r2, [r7, #8]
 800525e:	2100      	movs	r1, #0
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 fdf9 	bl	8005e58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005266:	2300      	movs	r3, #0
}
 8005268:	4618      	mov	r0, r3
 800526a:	3710      	adds	r7, #16
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}

08005270 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2204      	movs	r2, #4
 800527c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005280:	2300      	movs	r3, #0
 8005282:	2200      	movs	r2, #0
 8005284:	2100      	movs	r1, #0
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 fdc3 	bl	8005e12 <USBD_LL_Transmit>

  return USBD_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}

08005296 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2205      	movs	r2, #5
 80052a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80052a6:	2300      	movs	r3, #0
 80052a8:	2200      	movs	r2, #0
 80052aa:	2100      	movs	r1, #0
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fdd3 	bl	8005e58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <RING_init>:
 *  Created on: 7 cze 2020
 *      Author: Admin
 */
#include "RING.h"

void RING_init(Ring_type *ring) {
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
    ring->tail = ring->head = 0;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2200      	movs	r2, #0
 80052c8:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f893 2801 	ldrb.w	r2, [r3, #2049]	; 0x801
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f883 2800 	strb.w	r2, [r3, #2048]	; 0x800
    ring->status = RING_IS_EMPTY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <RING_is_full>:

uint8_t RING_is_empty(Ring_type *ring){
    return (RING_IS_EMPTY == ring->status);
}

uint8_t RING_is_full(Ring_type *ring) {
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
    return (RING_IS_FULL == ring->status);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f893 3802 	ldrb.w	r3, [r3, #2050]	; 0x802
 80052fa:	2b02      	cmp	r3, #2
 80052fc:	bf0c      	ite	eq
 80052fe:	2301      	moveq	r3, #1
 8005300:	2300      	movne	r3, #0
 8005302:	b2db      	uxtb	r3, r3
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <RING_put>:

void RING_put(Ring_type *ring, uint8_t *data, uint32_t len) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
    if(RING_is_full(ring))
 800531c:	68f8      	ldr	r0, [r7, #12]
 800531e:	f7ff ffe5 	bl	80052ec <RING_is_full>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d144      	bne.n	80053b2 <RING_put+0xa2>
    	return;

    if(len > MAX_CAN_FRAME_SIZE)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b40      	cmp	r3, #64	; 0x40
 800532c:	d843      	bhi.n	80053b6 <RING_put+0xa6>
    	return;

    memcpy(&ring->data[ring->head][0], data, len);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 8005334:	019b      	lsls	r3, r3, #6
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4413      	add	r3, r2
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 ff9c 	bl	800627c <memcpy>
    if(len < MAX_CAN_FRAME_SIZE) {
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2b3f      	cmp	r3, #63	; 0x3f
 8005348:	d80e      	bhi.n	8005368 <RING_put+0x58>
        memset(&ring->data[ring->head][len], 1, MAX_CAN_FRAME_SIZE - len);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 8005350:	019a      	lsls	r2, r3, #6
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4413      	add	r3, r2
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	18d0      	adds	r0, r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005360:	461a      	mov	r2, r3
 8005362:	2101      	movs	r1, #1
 8005364:	f000 ff95 	bl	8006292 <memset>
    }
    ring->head++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 800536e:	3301      	adds	r3, #1
 8005370:	b2da      	uxtb	r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
    ring->status = RING_IS_NOT_FULL;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
    if(ring->head >= UCAN_FRAME_RX_FIFO_SIZE){
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 8005386:	2b1f      	cmp	r3, #31
 8005388:	d903      	bls.n	8005392 <RING_put+0x82>
        ring->head = 0;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2801 	strb.w	r2, [r3, #2049]	; 0x801
    }
    
    if((ring->head + 1) % UCAN_FRAME_RX_FIFO_SIZE == ring->tail) {
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f893 3801 	ldrb.w	r3, [r3, #2049]	; 0x801
 8005398:	3301      	adds	r3, #1
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	f892 2800 	ldrb.w	r2, [r2, #2048]	; 0x800
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d107      	bne.n	80053b8 <RING_put+0xa8>
        ring->status = RING_IS_FULL;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2202      	movs	r2, #2
 80053ac:	f883 2802 	strb.w	r2, [r3, #2050]	; 0x802
 80053b0:	e002      	b.n	80053b8 <RING_put+0xa8>
    	return;
 80053b2:	bf00      	nop
 80053b4:	e000      	b.n	80053b8 <RING_put+0xa8>
    	return;
 80053b6:	bf00      	nop
    }
}
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
	...

080053c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053c6:	f7fa ff27 	bl	8000218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053ca:	f000 f82f 	bl	800542c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80053ce:	f000 f8df 	bl	8005590 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80053d2:	f000 f9f5 	bl	80057c0 <MX_USB_Device_Init>
  MX_FDCAN1_Init();
 80053d6:	f000 f893 	bl	8005500 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  RING_init(&usb_rx);
 80053da:	4811      	ldr	r0, [pc, #68]	; (8005420 <main+0x60>)
 80053dc:	f7ff ff6e 	bl	80052bc <RING_init>
  memset(usb_rx.data,0x55,32*64);
 80053e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053e4:	2155      	movs	r1, #85	; 0x55
 80053e6:	480e      	ldr	r0, [pc, #56]	; (8005420 <main+0x60>)
 80053e8:	f000 ff53 	bl	8006292 <memset>
  RING_init(&usb_tx);
 80053ec:	480d      	ldr	r0, [pc, #52]	; (8005424 <main+0x64>)
 80053ee:	f7ff ff65 	bl	80052bc <RING_init>

  for(uint8_t i = 0; i < 10; i++){
 80053f2:	2300      	movs	r3, #0
 80053f4:	71fb      	strb	r3, [r7, #7]
 80053f6:	e00e      	b.n	8005416 <main+0x56>
	  HAL_Delay(i*10);
 80053f8:	79fa      	ldrb	r2, [r7, #7]
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4618      	mov	r0, r3
 8005404:	f7fa ff78 	bl	80002f8 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005408:	2120      	movs	r1, #32
 800540a:	4807      	ldr	r0, [pc, #28]	; (8005428 <main+0x68>)
 800540c:	f7fb fbf0 	bl	8000bf0 <HAL_GPIO_TogglePin>
  for(uint8_t i = 0; i < 10; i++){
 8005410:	79fb      	ldrb	r3, [r7, #7]
 8005412:	3301      	adds	r3, #1
 8005414:	71fb      	strb	r3, [r7, #7]
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	2b09      	cmp	r3, #9
 800541a:	d9ed      	bls.n	80053f8 <main+0x38>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800541c:	e7fe      	b.n	800541c <main+0x5c>
 800541e:	bf00      	nop
 8005420:	20000b80 	.word	0x20000b80
 8005424:	2000037c 	.word	0x2000037c
 8005428:	48000400 	.word	0x48000400

0800542c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b0a4      	sub	sp, #144	; 0x90
 8005430:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005432:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005436:	2238      	movs	r2, #56	; 0x38
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f000 ff29 	bl	8006292 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005440:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005444:	2200      	movs	r2, #0
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	605a      	str	r2, [r3, #4]
 800544a:	609a      	str	r2, [r3, #8]
 800544c:	60da      	str	r2, [r3, #12]
 800544e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005450:	463b      	mov	r3, r7
 8005452:	2244      	movs	r2, #68	; 0x44
 8005454:	2100      	movs	r1, #0
 8005456:	4618      	mov	r0, r3
 8005458:	f000 ff1b 	bl	8006292 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800545c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005460:	f7fc faf6 	bl	8001a50 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005464:	2302      	movs	r3, #2
 8005466:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005468:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800546e:	2340      	movs	r3, #64	; 0x40
 8005470:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005472:	2302      	movs	r3, #2
 8005474:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005476:	2302      	movs	r3, #2
 8005478:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 800547a:	2302      	movs	r3, #2
 800547c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 36;
 800547e:	2324      	movs	r3, #36	; 0x24
 8005480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005484:	2302      	movs	r3, #2
 8005486:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 800548a:	2306      	movs	r3, #6
 800548c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005490:	2302      	movs	r3, #2
 8005492:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005496:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800549a:	4618      	mov	r0, r3
 800549c:	f7fc fb7c 	bl	8001b98 <HAL_RCC_OscConfig>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <SystemClock_Config+0x7e>
  {
    Error_Handler();
 80054a6:	f000 f8bd 	bl	8005624 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80054aa:	230f      	movs	r3, #15
 80054ac:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80054ae:	2303      	movs	r3, #3
 80054b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80054b2:	2300      	movs	r3, #0
 80054b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80054b6:	2300      	movs	r3, #0
 80054b8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80054ba:	2300      	movs	r3, #0
 80054bc:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80054be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80054c2:	2107      	movs	r1, #7
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fc fe7f 	bl	80021c8 <HAL_RCC_ClockConfig>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d001      	beq.n	80054d4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 80054d0:	f000 f8a8 	bl	8005624 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_FDCAN;
 80054d4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80054d8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80054da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80054de:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80054e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80054e6:	463b      	mov	r3, r7
 80054e8:	4618      	mov	r0, r3
 80054ea:	f7fd f851 	bl	8002590 <HAL_RCCEx_PeriphCLKConfig>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d001      	beq.n	80054f8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80054f4:	f000 f896 	bl	8005624 <Error_Handler>
  }
}
 80054f8:	bf00      	nop
 80054fa:	3790      	adds	r7, #144	; 0x90
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}

08005500 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8005504:	4b20      	ldr	r3, [pc, #128]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005506:	4a21      	ldr	r2, [pc, #132]	; (800558c <MX_FDCAN1_Init+0x8c>)
 8005508:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 800550a:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <MX_FDCAN1_Init+0x88>)
 800550c:	2200      	movs	r2, #0
 800550e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8005510:	4b1d      	ldr	r3, [pc, #116]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005512:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005516:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8005518:	4b1b      	ldr	r3, [pc, #108]	; (8005588 <MX_FDCAN1_Init+0x88>)
 800551a:	2200      	movs	r2, #0
 800551c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800551e:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005520:	2200      	movs	r2, #0
 8005522:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8005524:	4b18      	ldr	r3, [pc, #96]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005526:	2200      	movs	r2, #0
 8005528:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800552a:	4b17      	ldr	r3, [pc, #92]	; (8005588 <MX_FDCAN1_Init+0x88>)
 800552c:	2200      	movs	r2, #0
 800552e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8005530:	4b15      	ldr	r3, [pc, #84]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005532:	2201      	movs	r2, #1
 8005534:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8005536:	4b14      	ldr	r3, [pc, #80]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005538:	2201      	movs	r2, #1
 800553a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800553c:	4b12      	ldr	r3, [pc, #72]	; (8005588 <MX_FDCAN1_Init+0x88>)
 800553e:	2202      	movs	r2, #2
 8005540:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8005542:	4b11      	ldr	r3, [pc, #68]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005544:	2202      	movs	r2, #2
 8005546:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8005548:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <MX_FDCAN1_Init+0x88>)
 800554a:	2201      	movs	r2, #1
 800554c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800554e:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005550:	2201      	movs	r2, #1
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8005554:	4b0c      	ldr	r3, [pc, #48]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005556:	2201      	movs	r2, #1
 8005558:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800555a:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <MX_FDCAN1_Init+0x88>)
 800555c:	2201      	movs	r2, #1
 800555e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8005560:	4b09      	ldr	r3, [pc, #36]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005562:	2200      	movs	r2, #0
 8005564:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8005566:	4b08      	ldr	r3, [pc, #32]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005568:	2200      	movs	r2, #0
 800556a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800556c:	4b06      	ldr	r3, [pc, #24]	; (8005588 <MX_FDCAN1_Init+0x88>)
 800556e:	2200      	movs	r2, #0
 8005570:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8005572:	4805      	ldr	r0, [pc, #20]	; (8005588 <MX_FDCAN1_Init+0x88>)
 8005574:	f7fa fff2 	bl	800055c <HAL_FDCAN_Init>
 8005578:	4603      	mov	r3, r0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 800557e:	f000 f851 	bl	8005624 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8005582:	bf00      	nop
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	20000318 	.word	0x20000318
 800558c:	40006400 	.word	0x40006400

08005590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005596:	f107 030c 	add.w	r3, r7, #12
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]
 800559e:	605a      	str	r2, [r3, #4]
 80055a0:	609a      	str	r2, [r3, #8]
 80055a2:	60da      	str	r2, [r3, #12]
 80055a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80055a6:	4b1d      	ldr	r3, [pc, #116]	; (800561c <MX_GPIO_Init+0x8c>)
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	4a1c      	ldr	r2, [pc, #112]	; (800561c <MX_GPIO_Init+0x8c>)
 80055ac:	f043 0320 	orr.w	r3, r3, #32
 80055b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055b2:	4b1a      	ldr	r3, [pc, #104]	; (800561c <MX_GPIO_Init+0x8c>)
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	60bb      	str	r3, [r7, #8]
 80055bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80055be:	4b17      	ldr	r3, [pc, #92]	; (800561c <MX_GPIO_Init+0x8c>)
 80055c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055c2:	4a16      	ldr	r2, [pc, #88]	; (800561c <MX_GPIO_Init+0x8c>)
 80055c4:	f043 0301 	orr.w	r3, r3, #1
 80055c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055ca:	4b14      	ldr	r3, [pc, #80]	; (800561c <MX_GPIO_Init+0x8c>)
 80055cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80055d6:	4b11      	ldr	r3, [pc, #68]	; (800561c <MX_GPIO_Init+0x8c>)
 80055d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055da:	4a10      	ldr	r2, [pc, #64]	; (800561c <MX_GPIO_Init+0x8c>)
 80055dc:	f043 0302 	orr.w	r3, r3, #2
 80055e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055e2:	4b0e      	ldr	r3, [pc, #56]	; (800561c <MX_GPIO_Init+0x8c>)
 80055e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	603b      	str	r3, [r7, #0]
 80055ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80055ee:	2200      	movs	r2, #0
 80055f0:	2120      	movs	r1, #32
 80055f2:	480b      	ldr	r0, [pc, #44]	; (8005620 <MX_GPIO_Init+0x90>)
 80055f4:	f7fb fae4 	bl	8000bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80055f8:	2320      	movs	r3, #32
 80055fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80055fc:	2301      	movs	r3, #1
 80055fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005600:	2300      	movs	r3, #0
 8005602:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005604:	2300      	movs	r3, #0
 8005606:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005608:	f107 030c 	add.w	r3, r7, #12
 800560c:	4619      	mov	r1, r3
 800560e:	4804      	ldr	r0, [pc, #16]	; (8005620 <MX_GPIO_Init+0x90>)
 8005610:	f7fb f954 	bl	80008bc <HAL_GPIO_Init>

}
 8005614:	bf00      	nop
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40021000 	.word	0x40021000
 8005620:	48000400 	.word	0x48000400

08005624 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005628:	bf00      	nop
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
	...

08005634 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005638:	4b05      	ldr	r3, [pc, #20]	; (8005650 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	4a04      	ldr	r2, [pc, #16]	; (8005650 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800563e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005642:	6093      	str	r3, [r2, #8]
}
 8005644:	bf00      	nop
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40007000 	.word	0x40007000

08005654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800565a:	4b0f      	ldr	r3, [pc, #60]	; (8005698 <HAL_MspInit+0x44>)
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	4a0e      	ldr	r2, [pc, #56]	; (8005698 <HAL_MspInit+0x44>)
 8005660:	f043 0301 	orr.w	r3, r3, #1
 8005664:	6613      	str	r3, [r2, #96]	; 0x60
 8005666:	4b0c      	ldr	r3, [pc, #48]	; (8005698 <HAL_MspInit+0x44>)
 8005668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	607b      	str	r3, [r7, #4]
 8005670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <HAL_MspInit+0x44>)
 8005674:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005676:	4a08      	ldr	r2, [pc, #32]	; (8005698 <HAL_MspInit+0x44>)
 8005678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800567c:	6593      	str	r3, [r2, #88]	; 0x58
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <HAL_MspInit+0x44>)
 8005680:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005686:	603b      	str	r3, [r7, #0]
 8005688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 800568a:	f7ff ffd3 	bl	8005634 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800568e:	bf00      	nop
 8005690:	3708      	adds	r7, #8
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000

0800569c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08a      	sub	sp, #40	; 0x28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056a4:	f107 0314 	add.w	r3, r7, #20
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	609a      	str	r2, [r3, #8]
 80056b0:	60da      	str	r2, [r3, #12]
 80056b2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a17      	ldr	r2, [pc, #92]	; (8005718 <HAL_FDCAN_MspInit+0x7c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d128      	bne.n	8005710 <HAL_FDCAN_MspInit+0x74>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80056be:	4b17      	ldr	r3, [pc, #92]	; (800571c <HAL_FDCAN_MspInit+0x80>)
 80056c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056c2:	4a16      	ldr	r2, [pc, #88]	; (800571c <HAL_FDCAN_MspInit+0x80>)
 80056c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056c8:	6593      	str	r3, [r2, #88]	; 0x58
 80056ca:	4b14      	ldr	r3, [pc, #80]	; (800571c <HAL_FDCAN_MspInit+0x80>)
 80056cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056d2:	613b      	str	r3, [r7, #16]
 80056d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <HAL_FDCAN_MspInit+0x80>)
 80056d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056da:	4a10      	ldr	r2, [pc, #64]	; (800571c <HAL_FDCAN_MspInit+0x80>)
 80056dc:	f043 0302 	orr.w	r3, r3, #2
 80056e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80056e2:	4b0e      	ldr	r3, [pc, #56]	; (800571c <HAL_FDCAN_MspInit+0x80>)
 80056e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80056ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80056f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056f4:	2302      	movs	r3, #2
 80056f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f8:	2300      	movs	r3, #0
 80056fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056fc:	2300      	movs	r3, #0
 80056fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005700:	2309      	movs	r3, #9
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005704:	f107 0314 	add.w	r3, r7, #20
 8005708:	4619      	mov	r1, r3
 800570a:	4805      	ldr	r0, [pc, #20]	; (8005720 <HAL_FDCAN_MspInit+0x84>)
 800570c:	f7fb f8d6 	bl	80008bc <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8005710:	bf00      	nop
 8005712:	3728      	adds	r7, #40	; 0x28
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}
 8005718:	40006400 	.word	0x40006400
 800571c:	40021000 	.word	0x40021000
 8005720:	48000400 	.word	0x48000400

08005724 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005724:	b480      	push	{r7}
 8005726:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005728:	bf00      	nop
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr

08005732 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005732:	b480      	push	{r7}
 8005734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005736:	e7fe      	b.n	8005736 <HardFault_Handler+0x4>

08005738 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005738:	b480      	push	{r7}
 800573a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800573c:	e7fe      	b.n	800573c <MemManage_Handler+0x4>

0800573e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800573e:	b480      	push	{r7}
 8005740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005742:	e7fe      	b.n	8005742 <BusFault_Handler+0x4>

08005744 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005744:	b480      	push	{r7}
 8005746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005748:	e7fe      	b.n	8005748 <UsageFault_Handler+0x4>

0800574a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800574a:	b480      	push	{r7}
 800574c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800574e:	bf00      	nop
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005758:	b480      	push	{r7}
 800575a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800575c:	bf00      	nop
 800575e:	46bd      	mov	sp, r7
 8005760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005764:	4770      	bx	lr

08005766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005766:	b480      	push	{r7}
 8005768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800576a:	bf00      	nop
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005778:	f7fa fda0 	bl	80002bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800577c:	bf00      	nop
 800577e:	bd80      	pop	{r7, pc}

08005780 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005784:	4802      	ldr	r0, [pc, #8]	; (8005790 <USB_LP_IRQHandler+0x10>)
 8005786:	f7fb fb29 	bl	8000ddc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800578a:	bf00      	nop
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	20001e18 	.word	0x20001e18

08005794 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005798:	4b08      	ldr	r3, [pc, #32]	; (80057bc <SystemInit+0x28>)
 800579a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579e:	4a07      	ldr	r2, [pc, #28]	; (80057bc <SystemInit+0x28>)
 80057a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80057a8:	4b04      	ldr	r3, [pc, #16]	; (80057bc <SystemInit+0x28>)
 80057aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057ae:	609a      	str	r2, [r3, #8]
#endif
}
 80057b0:	bf00      	nop
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	e000ed00 	.word	0xe000ed00

080057c0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80057c4:	2200      	movs	r2, #0
 80057c6:	4912      	ldr	r1, [pc, #72]	; (8005810 <MX_USB_Device_Init+0x50>)
 80057c8:	4812      	ldr	r0, [pc, #72]	; (8005814 <MX_USB_Device_Init+0x54>)
 80057ca:	f7fe fcb9 	bl	8004140 <USBD_Init>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 80057d4:	f7ff ff26 	bl	8005624 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80057d8:	490f      	ldr	r1, [pc, #60]	; (8005818 <MX_USB_Device_Init+0x58>)
 80057da:	480e      	ldr	r0, [pc, #56]	; (8005814 <MX_USB_Device_Init+0x54>)
 80057dc:	f7fe fcdb 	bl	8004196 <USBD_RegisterClass>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <MX_USB_Device_Init+0x2a>
    Error_Handler();
 80057e6:	f7ff ff1d 	bl	8005624 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 80057ea:	490c      	ldr	r1, [pc, #48]	; (800581c <MX_USB_Device_Init+0x5c>)
 80057ec:	4809      	ldr	r0, [pc, #36]	; (8005814 <MX_USB_Device_Init+0x54>)
 80057ee:	f7fe fc09 	bl	8004004 <USBD_CDC_RegisterInterface>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d001      	beq.n	80057fc <MX_USB_Device_Init+0x3c>
    Error_Handler();
 80057f8:	f7ff ff14 	bl	8005624 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 80057fc:	4805      	ldr	r0, [pc, #20]	; (8005814 <MX_USB_Device_Init+0x54>)
 80057fe:	f7fe fce4 	bl	80041ca <USBD_Start>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8005808:	f7ff ff0c 	bl	8005624 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800580c:	bf00      	nop
 800580e:	bd80      	pop	{r7, pc}
 8005810:	20000080 	.word	0x20000080
 8005814:	20001384 	.word	0x20001384
 8005818:	20000014 	.word	0x20000014
 800581c:	20000070 	.word	0x20000070

08005820 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005824:	2200      	movs	r2, #0
 8005826:	4905      	ldr	r1, [pc, #20]	; (800583c <CDC_Init_FS+0x1c>)
 8005828:	4805      	ldr	r0, [pc, #20]	; (8005840 <CDC_Init_FS+0x20>)
 800582a:	f7fe fc02 	bl	8004032 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800582e:	4905      	ldr	r1, [pc, #20]	; (8005844 <CDC_Init_FS+0x24>)
 8005830:	4803      	ldr	r0, [pc, #12]	; (8005840 <CDC_Init_FS+0x20>)
 8005832:	f7fe fc18 	bl	8004066 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8005836:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8005838:	4618      	mov	r0, r3
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20001a30 	.word	0x20001a30
 8005840:	20001384 	.word	0x20001384
 8005844:	20001648 	.word	0x20001648

08005848 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800584c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800584e:	4618      	mov	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	4603      	mov	r3, r0
 8005860:	6039      	str	r1, [r7, #0]
 8005862:	71fb      	strb	r3, [r7, #7]
 8005864:	4613      	mov	r3, r2
 8005866:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005868:	79fb      	ldrb	r3, [r7, #7]
 800586a:	2b23      	cmp	r3, #35	; 0x23
 800586c:	d84a      	bhi.n	8005904 <CDC_Control_FS+0xac>
 800586e:	a201      	add	r2, pc, #4	; (adr r2, 8005874 <CDC_Control_FS+0x1c>)
 8005870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005874:	08005905 	.word	0x08005905
 8005878:	08005905 	.word	0x08005905
 800587c:	08005905 	.word	0x08005905
 8005880:	08005905 	.word	0x08005905
 8005884:	08005905 	.word	0x08005905
 8005888:	08005905 	.word	0x08005905
 800588c:	08005905 	.word	0x08005905
 8005890:	08005905 	.word	0x08005905
 8005894:	08005905 	.word	0x08005905
 8005898:	08005905 	.word	0x08005905
 800589c:	08005905 	.word	0x08005905
 80058a0:	08005905 	.word	0x08005905
 80058a4:	08005905 	.word	0x08005905
 80058a8:	08005905 	.word	0x08005905
 80058ac:	08005905 	.word	0x08005905
 80058b0:	08005905 	.word	0x08005905
 80058b4:	08005905 	.word	0x08005905
 80058b8:	08005905 	.word	0x08005905
 80058bc:	08005905 	.word	0x08005905
 80058c0:	08005905 	.word	0x08005905
 80058c4:	08005905 	.word	0x08005905
 80058c8:	08005905 	.word	0x08005905
 80058cc:	08005905 	.word	0x08005905
 80058d0:	08005905 	.word	0x08005905
 80058d4:	08005905 	.word	0x08005905
 80058d8:	08005905 	.word	0x08005905
 80058dc:	08005905 	.word	0x08005905
 80058e0:	08005905 	.word	0x08005905
 80058e4:	08005905 	.word	0x08005905
 80058e8:	08005905 	.word	0x08005905
 80058ec:	08005905 	.word	0x08005905
 80058f0:	08005905 	.word	0x08005905
 80058f4:	08005905 	.word	0x08005905
 80058f8:	08005905 	.word	0x08005905
 80058fc:	08005905 	.word	0x08005905
 8005900:	08005905 	.word	0x08005905
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005904:	bf00      	nop
  }

  return (USBD_OK);
 8005906:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b082      	sub	sp, #8
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	480e      	ldr	r0, [pc, #56]	; (800595c <CDC_Receive_FS+0x48>)
 8005922:	f7fe fba0 	bl	8004066 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005926:	480d      	ldr	r0, [pc, #52]	; (800595c <CDC_Receive_FS+0x48>)
 8005928:	f7fe fbe0 	bl	80040ec <USBD_CDC_ReceivePacket>
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800592c:	2120      	movs	r1, #32
 800592e:	480c      	ldr	r0, [pc, #48]	; (8005960 <CDC_Receive_FS+0x4c>)
 8005930:	f7fb f95e 	bl	8000bf0 <HAL_GPIO_TogglePin>
  RING_put(&usb_rx, Buf, *Len);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	461a      	mov	r2, r3
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	4809      	ldr	r0, [pc, #36]	; (8005964 <CDC_Receive_FS+0x50>)
 800593e:	f7ff fce7 	bl	8005310 <RING_put>
  CDC_Transmit_FS(Buf, *Len);
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	b29b      	uxth	r3, r3
 8005948:	4619      	mov	r1, r3
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f80c 	bl	8005968 <CDC_Transmit_FS>
  return (USBD_OK);
 8005950:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20001384 	.word	0x20001384
 8005960:	48000400 	.word	0x48000400
 8005964:	20000b80 	.word	0x20000b80

08005968 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b084      	sub	sp, #16
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005974:	2300      	movs	r3, #0
 8005976:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005978:	4b0d      	ldr	r3, [pc, #52]	; (80059b0 <CDC_Transmit_FS+0x48>)
 800597a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005986:	2b00      	cmp	r3, #0
 8005988:	d001      	beq.n	800598e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800598a:	2301      	movs	r3, #1
 800598c:	e00b      	b.n	80059a6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800598e:	887b      	ldrh	r3, [r7, #2]
 8005990:	461a      	mov	r2, r3
 8005992:	6879      	ldr	r1, [r7, #4]
 8005994:	4806      	ldr	r0, [pc, #24]	; (80059b0 <CDC_Transmit_FS+0x48>)
 8005996:	f7fe fb4c 	bl	8004032 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800599a:	4805      	ldr	r0, [pc, #20]	; (80059b0 <CDC_Transmit_FS+0x48>)
 800599c:	f7fe fb77 	bl	800408e <USBD_CDC_TransmitPacket>
 80059a0:	4603      	mov	r3, r0
 80059a2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80059a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	20001384 	.word	0x20001384

080059b4 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	; 0x28
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059bc:	f107 0314 	add.w	r3, r7, #20
 80059c0:	2200      	movs	r2, #0
 80059c2:	601a      	str	r2, [r3, #0]
 80059c4:	605a      	str	r2, [r3, #4]
 80059c6:	609a      	str	r2, [r3, #8]
 80059c8:	60da      	str	r2, [r3, #12]
 80059ca:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1a      	ldr	r2, [pc, #104]	; (8005a3c <HAL_PCD_MspInit+0x88>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d12d      	bne.n	8005a32 <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059d6:	4b1a      	ldr	r3, [pc, #104]	; (8005a40 <HAL_PCD_MspInit+0x8c>)
 80059d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059da:	4a19      	ldr	r2, [pc, #100]	; (8005a40 <HAL_PCD_MspInit+0x8c>)
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80059e2:	4b17      	ldr	r3, [pc, #92]	; (8005a40 <HAL_PCD_MspInit+0x8c>)
 80059e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e6:	f003 0301 	and.w	r3, r3, #1
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80059ee:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80059f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80059f4:	2303      	movs	r3, #3
 80059f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80059fc:	f107 0314 	add.w	r3, r7, #20
 8005a00:	4619      	mov	r1, r3
 8005a02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005a06:	f7fa ff59 	bl	80008bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005a0a:	4b0d      	ldr	r3, [pc, #52]	; (8005a40 <HAL_PCD_MspInit+0x8c>)
 8005a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a0e:	4a0c      	ldr	r2, [pc, #48]	; (8005a40 <HAL_PCD_MspInit+0x8c>)
 8005a10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005a14:	6593      	str	r3, [r2, #88]	; 0x58
 8005a16:	4b0a      	ldr	r3, [pc, #40]	; (8005a40 <HAL_PCD_MspInit+0x8c>)
 8005a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a1a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a1e:	60fb      	str	r3, [r7, #12]
 8005a20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8005a22:	2200      	movs	r2, #0
 8005a24:	2100      	movs	r1, #0
 8005a26:	2014      	movs	r0, #20
 8005a28:	f7fa fd63 	bl	80004f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8005a2c:	2014      	movs	r0, #20
 8005a2e:	f7fa fd7a 	bl	8000526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005a32:	bf00      	nop
 8005a34:	3728      	adds	r7, #40	; 0x28
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40005c00 	.word	0x40005c00
 8005a40:	40021000 	.word	0x40021000

08005a44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f7fe fbfe 	bl	800425c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	460b      	mov	r3, r1
 8005a72:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	015b      	lsls	r3, r3, #5
 8005a80:	4413      	add	r3, r2
 8005a82:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8005a86:	681a      	ldr	r2, [r3, #0]
 8005a88:	78fb      	ldrb	r3, [r7, #3]
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	f7fe fc31 	bl	80042f2 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b082      	sub	sp, #8
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8005aaa:	78fb      	ldrb	r3, [r7, #3]
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	015b      	lsls	r3, r3, #5
 8005ab0:	4413      	add	r3, r2
 8005ab2:	333c      	adds	r3, #60	; 0x3c
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	78fb      	ldrb	r3, [r7, #3]
 8005ab8:	4619      	mov	r1, r3
 8005aba:	f7fe fc8b 	bl	80043d4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8005abe:	bf00      	nop
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}

08005ac6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b082      	sub	sp, #8
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f7fe fd9e 	bl	8004616 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8005ada:	bf00      	nop
 8005adc:	3708      	adds	r7, #8
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8005ae2:	b580      	push	{r7, lr}
 8005ae4:	b084      	sub	sp, #16
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005aea:	2301      	movs	r3, #1
 8005aec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	2b02      	cmp	r3, #2
 8005af4:	d001      	beq.n	8005afa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8005af6:	f7ff fd95 	bl	8005624 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b00:	7bfa      	ldrb	r2, [r7, #15]
 8005b02:	4611      	mov	r1, r2
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fd4b 	bl	80045a0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe fd04 	bl	800451e <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8005b16:	bf00      	nop
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
	...

08005b20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b082      	sub	sp, #8
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f7fe fd46 	bl	80045c0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	699b      	ldr	r3, [r3, #24]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d005      	beq.n	8005b48 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005b3c:	4b04      	ldr	r3, [pc, #16]	; (8005b50 <HAL_PCD_SuspendCallback+0x30>)
 8005b3e:	691b      	ldr	r3, [r3, #16]
 8005b40:	4a03      	ldr	r2, [pc, #12]	; (8005b50 <HAL_PCD_SuspendCallback+0x30>)
 8005b42:	f043 0306 	orr.w	r3, r3, #6
 8005b46:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8005b48:	bf00      	nop
 8005b4a:	3708      	adds	r7, #8
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	e000ed00 	.word	0xe000ed00

08005b54 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005b64:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <HAL_PCD_ResumeCallback+0x34>)
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	4a07      	ldr	r2, [pc, #28]	; (8005b88 <HAL_PCD_ResumeCallback+0x34>)
 8005b6a:	f023 0306 	bic.w	r3, r3, #6
 8005b6e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8005b70:	f000 f9f6 	bl	8005f60 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fe fd35 	bl	80045ea <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed00 	.word	0xe000ed00

08005b8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8005b94:	4a2b      	ldr	r2, [pc, #172]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a29      	ldr	r2, [pc, #164]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005ba0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8005ba4:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005ba6:	4a28      	ldr	r2, [pc, #160]	; (8005c48 <USBD_LL_Init+0xbc>)
 8005ba8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005baa:	4b26      	ldr	r3, [pc, #152]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005bac:	2208      	movs	r2, #8
 8005bae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005bb0:	4b24      	ldr	r3, [pc, #144]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005bb6:	4b23      	ldr	r3, [pc, #140]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005bb8:	2202      	movs	r2, #2
 8005bba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8005bbc:	4b21      	ldr	r3, [pc, #132]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005bc2:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005bc8:	4b1e      	ldr	r3, [pc, #120]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005bce:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005bd4:	481b      	ldr	r0, [pc, #108]	; (8005c44 <USBD_LL_Init+0xb8>)
 8005bd6:	f7fb f824 	bl	8000c22 <HAL_PCD_Init>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d001      	beq.n	8005be4 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8005be0:	f7ff fd20 	bl	8005624 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005bea:	2318      	movs	r3, #24
 8005bec:	2200      	movs	r2, #0
 8005bee:	2100      	movs	r1, #0
 8005bf0:	f7fb fec6 	bl	8001980 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005bfa:	2358      	movs	r3, #88	; 0x58
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2180      	movs	r1, #128	; 0x80
 8005c00:	f7fb febe 	bl	8001980 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c0a:	23c0      	movs	r3, #192	; 0xc0
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	2181      	movs	r1, #129	; 0x81
 8005c10:	f7fb feb6 	bl	8001980 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c1a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005c1e:	2200      	movs	r2, #0
 8005c20:	2101      	movs	r1, #1
 8005c22:	f7fb fead 	bl	8001980 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005c2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005c30:	2200      	movs	r2, #0
 8005c32:	2182      	movs	r1, #130	; 0x82
 8005c34:	f7fb fea4 	bl	8001980 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8005c38:	2300      	movs	r3, #0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
 8005c42:	bf00      	nop
 8005c44:	20001e18 	.word	0x20001e18
 8005c48:	40005c00 	.word	0x40005c00

08005c4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c54:	2300      	movs	r3, #0
 8005c56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fb f898 	bl	8000d98 <HAL_PCD_Start>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f97c 	bl	8005f6c <USBD_Get_USB_Status>
 8005c74:	4603      	mov	r3, r0
 8005c76:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8005c78:	7bbb      	ldrb	r3, [r7, #14]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	4608      	mov	r0, r1
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	461a      	mov	r2, r3
 8005c90:	4603      	mov	r3, r0
 8005c92:	70fb      	strb	r3, [r7, #3]
 8005c94:	460b      	mov	r3, r1
 8005c96:	70bb      	strb	r3, [r7, #2]
 8005c98:	4613      	mov	r3, r2
 8005c9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005caa:	78bb      	ldrb	r3, [r7, #2]
 8005cac:	883a      	ldrh	r2, [r7, #0]
 8005cae:	78f9      	ldrb	r1, [r7, #3]
 8005cb0:	f7fb fa07 	bl	80010c2 <HAL_PCD_EP_Open>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005cb8:	7bfb      	ldrb	r3, [r7, #15]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 f956 	bl	8005f6c <USBD_Get_USB_Status>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8005cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3710      	adds	r7, #16
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}

08005cce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
 8005cd6:	460b      	mov	r3, r1
 8005cd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005ce8:	78fa      	ldrb	r2, [r7, #3]
 8005cea:	4611      	mov	r1, r2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fb fa48 	bl	8001182 <HAL_PCD_EP_Close>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005cf6:	7bfb      	ldrb	r3, [r7, #15]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f000 f937 	bl	8005f6c <USBD_Get_USB_Status>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 8005d02:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	460b      	mov	r3, r1
 8005d16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d26:	78fa      	ldrb	r2, [r7, #3]
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fb faf3 	bl	8001316 <HAL_PCD_EP_SetStall>
 8005d30:	4603      	mov	r3, r0
 8005d32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d34:	7bfb      	ldrb	r3, [r7, #15]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f000 f918 	bl	8005f6c <USBD_Get_USB_Status>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3710      	adds	r7, #16
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	460b      	mov	r3, r1
 8005d54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d64:	78fa      	ldrb	r2, [r7, #3]
 8005d66:	4611      	mov	r1, r2
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f7fb fb2e 	bl	80013ca <HAL_PCD_EP_ClrStall>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f8f9 	bl	8005f6c <USBD_Get_USB_Status>
 8005d7a:	4603      	mov	r3, r0
 8005d7c:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8005d7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3710      	adds	r7, #16
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	460b      	mov	r3, r1
 8005d92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005d9a:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8005d9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	da08      	bge.n	8005db6 <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8005da4:	78fb      	ldrb	r3, [r7, #3]
 8005da6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	015b      	lsls	r3, r3, #5
 8005dae:	4413      	add	r3, r2
 8005db0:	332a      	adds	r3, #42	; 0x2a
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	e008      	b.n	8005dc8 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8005db6:	78fb      	ldrb	r3, [r7, #3]
 8005db8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	015b      	lsls	r3, r3, #5
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005dc6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3714      	adds	r7, #20
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
 8005ddc:	460b      	mov	r3, r1
 8005dde:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005de0:	2300      	movs	r3, #0
 8005de2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005de4:	2300      	movs	r3, #0
 8005de6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005dee:	78fa      	ldrb	r2, [r7, #3]
 8005df0:	4611      	mov	r1, r2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fb f940 	bl	8001078 <HAL_PCD_SetAddress>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f000 f8b4 	bl	8005f6c <USBD_Get_USB_Status>
 8005e04:	4603      	mov	r3, r0
 8005e06:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8005e08:	7bbb      	ldrb	r3, [r7, #14]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	60f8      	str	r0, [r7, #12]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	460b      	mov	r3, r1
 8005e20:	72fb      	strb	r3, [r7, #11]
 8005e22:	4613      	mov	r3, r2
 8005e24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005e34:	893b      	ldrh	r3, [r7, #8]
 8005e36:	7af9      	ldrb	r1, [r7, #11]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	f7fb fa33 	bl	80012a4 <HAL_PCD_EP_Transmit>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 f891 	bl	8005f6c <USBD_Get_USB_Status>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8005e4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	607a      	str	r2, [r7, #4]
 8005e62:	461a      	mov	r2, r3
 8005e64:	460b      	mov	r3, r1
 8005e66:	72fb      	strb	r3, [r7, #11]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005e70:	2300      	movs	r3, #0
 8005e72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8005e7a:	893b      	ldrh	r3, [r7, #8]
 8005e7c:	7af9      	ldrb	r1, [r7, #11]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	f7fb f9c1 	bl	8001206 <HAL_PCD_EP_Receive>
 8005e84:	4603      	mov	r3, r0
 8005e86:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8005e88:	7dfb      	ldrb	r3, [r7, #23]
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f000 f86e 	bl	8005f6c <USBD_Get_USB_Status>
 8005e90:	4603      	mov	r3, r0
 8005e92:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 8005e94:	7dbb      	ldrb	r3, [r7, #22]
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3718      	adds	r7, #24
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b082      	sub	sp, #8
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	4611      	mov	r1, r2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fb f9e0 	bl	800127a <HAL_PCD_EP_GetRxCount>
 8005eba:	4603      	mov	r3, r0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3708      	adds	r7, #8
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
 8005ecc:	460b      	mov	r3, r1
 8005ece:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d002      	beq.n	8005edc <HAL_PCDEx_LPM_Callback+0x18>
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d013      	beq.n	8005f02 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8005eda:	e023      	b.n	8005f24 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8005ee4:	f000 f83c 	bl	8005f60 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005ee8:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <HAL_PCDEx_LPM_Callback+0x68>)
 8005eea:	691b      	ldr	r3, [r3, #16]
 8005eec:	4a0f      	ldr	r2, [pc, #60]	; (8005f2c <HAL_PCDEx_LPM_Callback+0x68>)
 8005eee:	f023 0306 	bic.w	r3, r3, #6
 8005ef2:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fe fb75 	bl	80045ea <USBD_LL_Resume>
    break;
 8005f00:	e010      	b.n	8005f24 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe fb59 	bl	80045c0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	699b      	ldr	r3, [r3, #24]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <HAL_PCDEx_LPM_Callback+0x68>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	4a04      	ldr	r2, [pc, #16]	; (8005f2c <HAL_PCDEx_LPM_Callback+0x68>)
 8005f1c:	f043 0306 	orr.w	r3, r3, #6
 8005f20:	6113      	str	r3, [r2, #16]
    break;   
 8005f22:	bf00      	nop
}
 8005f24:	bf00      	nop
 8005f26:	3708      	adds	r7, #8
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	e000ed00 	.word	0xe000ed00

08005f30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8005f38:	4b03      	ldr	r3, [pc, #12]	; (8005f48 <USBD_static_malloc+0x18>)
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop
 8005f48:	200000f4 	.word	0x200000f4

08005f4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]

}
 8005f54:	bf00      	nop
 8005f56:	370c      	adds	r7, #12
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5e:	4770      	bx	lr

08005f60 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8005f64:	f7ff fa62 	bl	800542c <SystemClock_Config>
}
 8005f68:	bf00      	nop
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	4603      	mov	r3, r0
 8005f74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8005f7a:	79fb      	ldrb	r3, [r7, #7]
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d817      	bhi.n	8005fb0 <USBD_Get_USB_Status+0x44>
 8005f80:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <USBD_Get_USB_Status+0x1c>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005f9f 	.word	0x08005f9f
 8005f90:	08005fa5 	.word	0x08005fa5
 8005f94:	08005fab 	.word	0x08005fab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	73fb      	strb	r3, [r7, #15]
    break;
 8005f9c:	e00b      	b.n	8005fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	73fb      	strb	r3, [r7, #15]
    break;
 8005fa2:	e008      	b.n	8005fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
    break;
 8005fa8:	e005      	b.n	8005fb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8005faa:	2302      	movs	r3, #2
 8005fac:	73fb      	strb	r3, [r7, #15]
    break;
 8005fae:	e002      	b.n	8005fb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8005fb4:	bf00      	nop
  }
  return usb_status;
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	3714      	adds	r7, #20
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc2:	4770      	bx	lr

08005fc4 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	4603      	mov	r3, r0
 8005fcc:	6039      	str	r1, [r7, #0]
 8005fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	2212      	movs	r2, #18
 8005fd4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8005fd6:	4b03      	ldr	r3, [pc, #12]	; (8005fe4 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr
 8005fe4:	200000a0 	.word	0x200000a0

08005fe8 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	6039      	str	r1, [r7, #0]
 8005ff2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	2204      	movs	r2, #4
 8005ff8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005ffa:	4b03      	ldr	r3, [pc, #12]	; (8006008 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	370c      	adds	r7, #12
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	200000b4 	.word	0x200000b4

0800600c <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	4603      	mov	r3, r0
 8006014:	6039      	str	r1, [r7, #0]
 8006016:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006018:	79fb      	ldrb	r3, [r7, #7]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d105      	bne.n	800602a <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800601e:	683a      	ldr	r2, [r7, #0]
 8006020:	4907      	ldr	r1, [pc, #28]	; (8006040 <USBD_CDC_ProductStrDescriptor+0x34>)
 8006022:	4808      	ldr	r0, [pc, #32]	; (8006044 <USBD_CDC_ProductStrDescriptor+0x38>)
 8006024:	f7ff f86c 	bl	8005100 <USBD_GetString>
 8006028:	e004      	b.n	8006034 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	4904      	ldr	r1, [pc, #16]	; (8006040 <USBD_CDC_ProductStrDescriptor+0x34>)
 800602e:	4805      	ldr	r0, [pc, #20]	; (8006044 <USBD_CDC_ProductStrDescriptor+0x38>)
 8006030:	f7ff f866 	bl	8005100 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006034:	4b02      	ldr	r3, [pc, #8]	; (8006040 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	2000208c 	.word	0x2000208c
 8006044:	080062bc 	.word	0x080062bc

08006048 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b082      	sub	sp, #8
 800604c:	af00      	add	r7, sp, #0
 800604e:	4603      	mov	r3, r0
 8006050:	6039      	str	r1, [r7, #0]
 8006052:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	4904      	ldr	r1, [pc, #16]	; (8006068 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8006058:	4804      	ldr	r0, [pc, #16]	; (800606c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800605a:	f7ff f851 	bl	8005100 <USBD_GetString>
  return USBD_StrDesc;
 800605e:	4b02      	ldr	r3, [pc, #8]	; (8006068 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8006060:	4618      	mov	r0, r3
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	2000208c 	.word	0x2000208c
 800606c:	080062c8 	.word	0x080062c8

08006070 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b082      	sub	sp, #8
 8006074:	af00      	add	r7, sp, #0
 8006076:	4603      	mov	r3, r0
 8006078:	6039      	str	r1, [r7, #0]
 800607a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	221a      	movs	r2, #26
 8006080:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006082:	f000 f843 	bl	800610c <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8006086:	4b02      	ldr	r3, [pc, #8]	; (8006090 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8006088:	4618      	mov	r0, r3
 800608a:	3708      	adds	r7, #8
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	200000b8 	.word	0x200000b8

08006094 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	4603      	mov	r3, r0
 800609c:	6039      	str	r1, [r7, #0]
 800609e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80060a0:	79fb      	ldrb	r3, [r7, #7]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d105      	bne.n	80060b2 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80060a6:	683a      	ldr	r2, [r7, #0]
 80060a8:	4907      	ldr	r1, [pc, #28]	; (80060c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80060aa:	4808      	ldr	r0, [pc, #32]	; (80060cc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80060ac:	f7ff f828 	bl	8005100 <USBD_GetString>
 80060b0:	e004      	b.n	80060bc <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	4904      	ldr	r1, [pc, #16]	; (80060c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
 80060b6:	4805      	ldr	r0, [pc, #20]	; (80060cc <USBD_CDC_ConfigStrDescriptor+0x38>)
 80060b8:	f7ff f822 	bl	8005100 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060bc:	4b02      	ldr	r3, [pc, #8]	; (80060c8 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	2000208c 	.word	0x2000208c
 80060cc:	080062dc 	.word	0x080062dc

080060d0 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	4603      	mov	r3, r0
 80060d8:	6039      	str	r1, [r7, #0]
 80060da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060dc:	79fb      	ldrb	r3, [r7, #7]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d105      	bne.n	80060ee <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	4907      	ldr	r1, [pc, #28]	; (8006104 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80060e6:	4808      	ldr	r0, [pc, #32]	; (8006108 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80060e8:	f7ff f80a 	bl	8005100 <USBD_GetString>
 80060ec:	e004      	b.n	80060f8 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 80060ee:	683a      	ldr	r2, [r7, #0]
 80060f0:	4904      	ldr	r1, [pc, #16]	; (8006104 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 80060f2:	4805      	ldr	r0, [pc, #20]	; (8006108 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 80060f4:	f7ff f804 	bl	8005100 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060f8:	4b02      	ldr	r3, [pc, #8]	; (8006104 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	3708      	adds	r7, #8
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	2000208c 	.word	0x2000208c
 8006108:	080062e8 	.word	0x080062e8

0800610c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006112:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <Get_SerialNum+0x44>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006118:	4b0e      	ldr	r3, [pc, #56]	; (8006154 <Get_SerialNum+0x48>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800611e:	4b0e      	ldr	r3, [pc, #56]	; (8006158 <Get_SerialNum+0x4c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006124:	68fa      	ldr	r2, [r7, #12]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4413      	add	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006132:	2208      	movs	r2, #8
 8006134:	4909      	ldr	r1, [pc, #36]	; (800615c <Get_SerialNum+0x50>)
 8006136:	68f8      	ldr	r0, [r7, #12]
 8006138:	f000 f814 	bl	8006164 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800613c:	2204      	movs	r2, #4
 800613e:	4908      	ldr	r1, [pc, #32]	; (8006160 <Get_SerialNum+0x54>)
 8006140:	68b8      	ldr	r0, [r7, #8]
 8006142:	f000 f80f 	bl	8006164 <IntToUnicode>
  }
}
 8006146:	bf00      	nop
 8006148:	3710      	adds	r7, #16
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	1fff7590 	.word	0x1fff7590
 8006154:	1fff7594 	.word	0x1fff7594
 8006158:	1fff7598 	.word	0x1fff7598
 800615c:	200000ba 	.word	0x200000ba
 8006160:	200000ca 	.word	0x200000ca

08006164 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006164:	b480      	push	{r7}
 8006166:	b087      	sub	sp, #28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	4613      	mov	r3, r2
 8006170:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006176:	2300      	movs	r3, #0
 8006178:	75fb      	strb	r3, [r7, #23]
 800617a:	e027      	b.n	80061cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	0f1b      	lsrs	r3, r3, #28
 8006180:	2b09      	cmp	r3, #9
 8006182:	d80b      	bhi.n	800619c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	0f1b      	lsrs	r3, r3, #28
 8006188:	b2da      	uxtb	r2, r3
 800618a:	7dfb      	ldrb	r3, [r7, #23]
 800618c:	005b      	lsls	r3, r3, #1
 800618e:	4619      	mov	r1, r3
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	440b      	add	r3, r1
 8006194:	3230      	adds	r2, #48	; 0x30
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]
 800619a:	e00a      	b.n	80061b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	0f1b      	lsrs	r3, r3, #28
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	7dfb      	ldrb	r3, [r7, #23]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	4619      	mov	r1, r3
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	440b      	add	r3, r1
 80061ac:	3237      	adds	r2, #55	; 0x37
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	3301      	adds	r3, #1
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	4413      	add	r3, r2
 80061c2:	2200      	movs	r2, #0
 80061c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80061c6:	7dfb      	ldrb	r3, [r7, #23]
 80061c8:	3301      	adds	r3, #1
 80061ca:	75fb      	strb	r3, [r7, #23]
 80061cc:	7dfa      	ldrb	r2, [r7, #23]
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d3d3      	bcc.n	800617c <IntToUnicode+0x18>
  }
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80061e0:	480d      	ldr	r0, [pc, #52]	; (8006218 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80061e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061e4:	480d      	ldr	r0, [pc, #52]	; (800621c <LoopForever+0x6>)
  ldr r1, =_edata
 80061e6:	490e      	ldr	r1, [pc, #56]	; (8006220 <LoopForever+0xa>)
  ldr r2, =_sidata
 80061e8:	4a0e      	ldr	r2, [pc, #56]	; (8006224 <LoopForever+0xe>)
  movs r3, #0
 80061ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80061ec:	e002      	b.n	80061f4 <LoopCopyDataInit>

080061ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061f2:	3304      	adds	r3, #4

080061f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061f8:	d3f9      	bcc.n	80061ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061fa:	4a0b      	ldr	r2, [pc, #44]	; (8006228 <LoopForever+0x12>)
  ldr r4, =_ebss
 80061fc:	4c0b      	ldr	r4, [pc, #44]	; (800622c <LoopForever+0x16>)
  movs r3, #0
 80061fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006200:	e001      	b.n	8006206 <LoopFillZerobss>

08006202 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006202:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006204:	3204      	adds	r2, #4

08006206 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006206:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006208:	d3fb      	bcc.n	8006202 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800620a:	f7ff fac3 	bl	8005794 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800620e:	f000 f811 	bl	8006234 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006212:	f7ff f8d5 	bl	80053c0 <main>

08006216 <LoopForever>:

LoopForever:
    b LoopForever
 8006216:	e7fe      	b.n	8006216 <LoopForever>
  ldr   r0, =_estack
 8006218:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800621c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006220:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8006224:	08006310 	.word	0x08006310
  ldr r2, =_sbss
 8006228:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 800622c:	2000228c 	.word	0x2000228c

08006230 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006230:	e7fe      	b.n	8006230 <ADC1_2_IRQHandler>
	...

08006234 <__libc_init_array>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4e0d      	ldr	r6, [pc, #52]	; (800626c <__libc_init_array+0x38>)
 8006238:	4c0d      	ldr	r4, [pc, #52]	; (8006270 <__libc_init_array+0x3c>)
 800623a:	1ba4      	subs	r4, r4, r6
 800623c:	10a4      	asrs	r4, r4, #2
 800623e:	2500      	movs	r5, #0
 8006240:	42a5      	cmp	r5, r4
 8006242:	d109      	bne.n	8006258 <__libc_init_array+0x24>
 8006244:	4e0b      	ldr	r6, [pc, #44]	; (8006274 <__libc_init_array+0x40>)
 8006246:	4c0c      	ldr	r4, [pc, #48]	; (8006278 <__libc_init_array+0x44>)
 8006248:	f000 f82c 	bl	80062a4 <_init>
 800624c:	1ba4      	subs	r4, r4, r6
 800624e:	10a4      	asrs	r4, r4, #2
 8006250:	2500      	movs	r5, #0
 8006252:	42a5      	cmp	r5, r4
 8006254:	d105      	bne.n	8006262 <__libc_init_array+0x2e>
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800625c:	4798      	blx	r3
 800625e:	3501      	adds	r5, #1
 8006260:	e7ee      	b.n	8006240 <__libc_init_array+0xc>
 8006262:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006266:	4798      	blx	r3
 8006268:	3501      	adds	r5, #1
 800626a:	e7f2      	b.n	8006252 <__libc_init_array+0x1e>
 800626c:	08006308 	.word	0x08006308
 8006270:	08006308 	.word	0x08006308
 8006274:	08006308 	.word	0x08006308
 8006278:	0800630c 	.word	0x0800630c

0800627c <memcpy>:
 800627c:	b510      	push	{r4, lr}
 800627e:	1e43      	subs	r3, r0, #1
 8006280:	440a      	add	r2, r1
 8006282:	4291      	cmp	r1, r2
 8006284:	d100      	bne.n	8006288 <memcpy+0xc>
 8006286:	bd10      	pop	{r4, pc}
 8006288:	f811 4b01 	ldrb.w	r4, [r1], #1
 800628c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006290:	e7f7      	b.n	8006282 <memcpy+0x6>

08006292 <memset>:
 8006292:	4402      	add	r2, r0
 8006294:	4603      	mov	r3, r0
 8006296:	4293      	cmp	r3, r2
 8006298:	d100      	bne.n	800629c <memset+0xa>
 800629a:	4770      	bx	lr
 800629c:	f803 1b01 	strb.w	r1, [r3], #1
 80062a0:	e7f9      	b.n	8006296 <memset+0x4>
	...

080062a4 <_init>:
 80062a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062a6:	bf00      	nop
 80062a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062aa:	bc08      	pop	{r3}
 80062ac:	469e      	mov	lr, r3
 80062ae:	4770      	bx	lr

080062b0 <_fini>:
 80062b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b2:	bf00      	nop
 80062b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062b6:	bc08      	pop	{r3}
 80062b8:	469e      	mov	lr, r3
 80062ba:	4770      	bx	lr
