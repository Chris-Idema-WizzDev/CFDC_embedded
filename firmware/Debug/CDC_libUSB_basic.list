
CDC_libUSB_basic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000678c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08006964  08006964  00016964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069c0  080069c0  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  080069c0  080069c0  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069c0  080069c0  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069c0  080069c0  000169c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069c4  080069c4  000169c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080069c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002564  200000f4  08006abc  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20002658  08006abc  00022658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018250  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003374  00000000  00000000  00038374  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f48  00000000  00000000  0003b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc0  00000000  00000000  0003c630  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000205f5  00000000  00000000  0003d3f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f1a8  00000000  00000000  0005d9e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bab4f  00000000  00000000  0006cb8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001276dc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d18  00000000  00000000  00127758  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000f4 	.word	0x200000f4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800694c 	.word	0x0800694c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000f8 	.word	0x200000f8
 8000214:	0800694c 	.word	0x0800694c

08000218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800021e:	2300      	movs	r3, #0
 8000220:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f95a 	bl	80004dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000228:	2000      	movs	r0, #0
 800022a:	f000 f80d 	bl	8000248 <HAL_InitTick>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d002      	beq.n	800023a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000234:	2301      	movs	r3, #1
 8000236:	71fb      	strb	r3, [r7, #7]
 8000238:	e001      	b.n	800023e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800023a:	f005 fd07 	bl	8005c4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800023e:	79fb      	ldrb	r3, [r7, #7]

}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}

08000248 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0
 800024e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000250:	2300      	movs	r3, #0
 8000252:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000254:	4b16      	ldr	r3, [pc, #88]	; (80002b0 <HAL_InitTick+0x68>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d022      	beq.n	80002a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800025c:	4b15      	ldr	r3, [pc, #84]	; (80002b4 <HAL_InitTick+0x6c>)
 800025e:	681a      	ldr	r2, [r3, #0]
 8000260:	4b13      	ldr	r3, [pc, #76]	; (80002b0 <HAL_InitTick+0x68>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000268:	fbb1 f3f3 	udiv	r3, r1, r3
 800026c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f966 	bl	8000542 <HAL_SYSTICK_Config>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d10f      	bne.n	800029c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	2b0f      	cmp	r3, #15
 8000280:	d809      	bhi.n	8000296 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000282:	2200      	movs	r2, #0
 8000284:	6879      	ldr	r1, [r7, #4]
 8000286:	f04f 30ff 	mov.w	r0, #4294967295
 800028a:	f000 f932 	bl	80004f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <HAL_InitTick+0x70>)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	6013      	str	r3, [r2, #0]
 8000294:	e007      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000296:	2301      	movs	r3, #1
 8000298:	73fb      	strb	r3, [r7, #15]
 800029a:	e004      	b.n	80002a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800029c:	2301      	movs	r3, #1
 800029e:	73fb      	strb	r3, [r7, #15]
 80002a0:	e001      	b.n	80002a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80002a2:	2301      	movs	r3, #1
 80002a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80002a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3710      	adds	r7, #16
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	20000004 	.word	0x20000004
 80002b4:	2000006c 	.word	0x2000006c
 80002b8:	20000000 	.word	0x20000000

080002bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c0:	4b05      	ldr	r3, [pc, #20]	; (80002d8 <HAL_IncTick+0x1c>)
 80002c2:	681a      	ldr	r2, [r3, #0]
 80002c4:	4b05      	ldr	r3, [pc, #20]	; (80002dc <HAL_IncTick+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4413      	add	r3, r2
 80002ca:	4a03      	ldr	r2, [pc, #12]	; (80002d8 <HAL_IncTick+0x1c>)
 80002cc:	6013      	str	r3, [r2, #0]
}
 80002ce:	bf00      	nop
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	20000180 	.word	0x20000180
 80002dc:	20000004 	.word	0x20000004

080002e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  return uwTick;
 80002e4:	4b03      	ldr	r3, [pc, #12]	; (80002f4 <HAL_GetTick+0x14>)
 80002e6:	681b      	ldr	r3, [r3, #0]
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000180 	.word	0x20000180

080002f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b084      	sub	sp, #16
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000300:	f7ff ffee 	bl	80002e0 <HAL_GetTick>
 8000304:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000310:	d004      	beq.n	800031c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000312:	4b09      	ldr	r3, [pc, #36]	; (8000338 <HAL_Delay+0x40>)
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	4413      	add	r3, r2
 800031a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800031c:	bf00      	nop
 800031e:	f7ff ffdf 	bl	80002e0 <HAL_GetTick>
 8000322:	4602      	mov	r2, r0
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	1ad3      	subs	r3, r2, r3
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	429a      	cmp	r2, r3
 800032c:	d8f7      	bhi.n	800031e <HAL_Delay+0x26>
  {
  }
}
 800032e:	bf00      	nop
 8000330:	3710      	adds	r7, #16
 8000332:	46bd      	mov	sp, r7
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000004 	.word	0x20000004

0800033c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800033c:	b480      	push	{r7}
 800033e:	b085      	sub	sp, #20
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800034c:	4b0c      	ldr	r3, [pc, #48]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000352:	68ba      	ldr	r2, [r7, #8]
 8000354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000358:	4013      	ands	r3, r2
 800035a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800035c:	68fb      	ldr	r3, [r7, #12]
 800035e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800036e:	4a04      	ldr	r2, [pc, #16]	; (8000380 <__NVIC_SetPriorityGrouping+0x44>)
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	60d3      	str	r3, [r2, #12]
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	e000ed00 	.word	0xe000ed00

08000384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000388:	4b04      	ldr	r3, [pc, #16]	; (800039c <__NVIC_GetPriorityGrouping+0x18>)
 800038a:	68db      	ldr	r3, [r3, #12]
 800038c:	0a1b      	lsrs	r3, r3, #8
 800038e:	f003 0307 	and.w	r3, r3, #7
}
 8000392:	4618      	mov	r0, r3
 8000394:	46bd      	mov	sp, r7
 8000396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039a:	4770      	bx	lr
 800039c:	e000ed00 	.word	0xe000ed00

080003a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80003a0:	b480      	push	{r7}
 80003a2:	b083      	sub	sp, #12
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	4603      	mov	r3, r0
 80003a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	db0b      	blt.n	80003ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 021f 	and.w	r2, r3, #31
 80003b8:	4907      	ldr	r1, [pc, #28]	; (80003d8 <__NVIC_EnableIRQ+0x38>)
 80003ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003be:	095b      	lsrs	r3, r3, #5
 80003c0:	2001      	movs	r0, #1
 80003c2:	fa00 f202 	lsl.w	r2, r0, r2
 80003c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80003ca:	bf00      	nop
 80003cc:	370c      	adds	r7, #12
 80003ce:	46bd      	mov	sp, r7
 80003d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d4:	4770      	bx	lr
 80003d6:	bf00      	nop
 80003d8:	e000e100 	.word	0xe000e100

080003dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003dc:	b480      	push	{r7}
 80003de:	b083      	sub	sp, #12
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	4603      	mov	r3, r0
 80003e4:	6039      	str	r1, [r7, #0]
 80003e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	db0a      	blt.n	8000406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f0:	683b      	ldr	r3, [r7, #0]
 80003f2:	b2da      	uxtb	r2, r3
 80003f4:	490c      	ldr	r1, [pc, #48]	; (8000428 <__NVIC_SetPriority+0x4c>)
 80003f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003fa:	0112      	lsls	r2, r2, #4
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	440b      	add	r3, r1
 8000400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000404:	e00a      	b.n	800041c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	b2da      	uxtb	r2, r3
 800040a:	4908      	ldr	r1, [pc, #32]	; (800042c <__NVIC_SetPriority+0x50>)
 800040c:	79fb      	ldrb	r3, [r7, #7]
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	3b04      	subs	r3, #4
 8000414:	0112      	lsls	r2, r2, #4
 8000416:	b2d2      	uxtb	r2, r2
 8000418:	440b      	add	r3, r1
 800041a:	761a      	strb	r2, [r3, #24]
}
 800041c:	bf00      	nop
 800041e:	370c      	adds	r7, #12
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	e000e100 	.word	0xe000e100
 800042c:	e000ed00 	.word	0xe000ed00

08000430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000430:	b480      	push	{r7}
 8000432:	b089      	sub	sp, #36	; 0x24
 8000434:	af00      	add	r7, sp, #0
 8000436:	60f8      	str	r0, [r7, #12]
 8000438:	60b9      	str	r1, [r7, #8]
 800043a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000444:	69fb      	ldr	r3, [r7, #28]
 8000446:	f1c3 0307 	rsb	r3, r3, #7
 800044a:	2b04      	cmp	r3, #4
 800044c:	bf28      	it	cs
 800044e:	2304      	movcs	r3, #4
 8000450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000452:	69fb      	ldr	r3, [r7, #28]
 8000454:	3304      	adds	r3, #4
 8000456:	2b06      	cmp	r3, #6
 8000458:	d902      	bls.n	8000460 <NVIC_EncodePriority+0x30>
 800045a:	69fb      	ldr	r3, [r7, #28]
 800045c:	3b03      	subs	r3, #3
 800045e:	e000      	b.n	8000462 <NVIC_EncodePriority+0x32>
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000464:	f04f 32ff 	mov.w	r2, #4294967295
 8000468:	69bb      	ldr	r3, [r7, #24]
 800046a:	fa02 f303 	lsl.w	r3, r2, r3
 800046e:	43da      	mvns	r2, r3
 8000470:	68bb      	ldr	r3, [r7, #8]
 8000472:	401a      	ands	r2, r3
 8000474:	697b      	ldr	r3, [r7, #20]
 8000476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000478:	f04f 31ff 	mov.w	r1, #4294967295
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	fa01 f303 	lsl.w	r3, r1, r3
 8000482:	43d9      	mvns	r1, r3
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000488:	4313      	orrs	r3, r2
         );
}
 800048a:	4618      	mov	r0, r3
 800048c:	3724      	adds	r7, #36	; 0x24
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b082      	sub	sp, #8
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004a8:	d301      	bcc.n	80004ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80004aa:	2301      	movs	r3, #1
 80004ac:	e00f      	b.n	80004ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004ae:	4a0a      	ldr	r2, [pc, #40]	; (80004d8 <SysTick_Config+0x40>)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	3b01      	subs	r3, #1
 80004b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004b6:	210f      	movs	r1, #15
 80004b8:	f04f 30ff 	mov.w	r0, #4294967295
 80004bc:	f7ff ff8e 	bl	80003dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c0:	4b05      	ldr	r3, [pc, #20]	; (80004d8 <SysTick_Config+0x40>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c6:	4b04      	ldr	r3, [pc, #16]	; (80004d8 <SysTick_Config+0x40>)
 80004c8:	2207      	movs	r2, #7
 80004ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004cc:	2300      	movs	r3, #0
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3708      	adds	r7, #8
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	e000e010 	.word	0xe000e010

080004dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004e4:	6878      	ldr	r0, [r7, #4]
 80004e6:	f7ff ff29 	bl	800033c <__NVIC_SetPriorityGrouping>
}
 80004ea:	bf00      	nop
 80004ec:	3708      	adds	r7, #8
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd80      	pop	{r7, pc}

080004f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f2:	b580      	push	{r7, lr}
 80004f4:	b086      	sub	sp, #24
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	4603      	mov	r3, r0
 80004fa:	60b9      	str	r1, [r7, #8]
 80004fc:	607a      	str	r2, [r7, #4]
 80004fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000500:	f7ff ff40 	bl	8000384 <__NVIC_GetPriorityGrouping>
 8000504:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000506:	687a      	ldr	r2, [r7, #4]
 8000508:	68b9      	ldr	r1, [r7, #8]
 800050a:	6978      	ldr	r0, [r7, #20]
 800050c:	f7ff ff90 	bl	8000430 <NVIC_EncodePriority>
 8000510:	4602      	mov	r2, r0
 8000512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ff5f 	bl	80003dc <__NVIC_SetPriority>
}
 800051e:	bf00      	nop
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000534:	4618      	mov	r0, r3
 8000536:	f7ff ff33 	bl	80003a0 <__NVIC_EnableIRQ>
}
 800053a:	bf00      	nop
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b082      	sub	sp, #8
 8000546:	af00      	add	r7, sp, #0
 8000548:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800054a:	6878      	ldr	r0, [r7, #4]
 800054c:	f7ff ffa4 	bl	8000498 <SysTick_Config>
 8000550:	4603      	mov	r3, r0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3708      	adds	r7, #8
 8000556:	46bd      	mov	sp, r7
 8000558:	bd80      	pop	{r7, pc}
	...

0800055c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800056a:	2301      	movs	r3, #1
 800056c:	e147      	b.n	80007fe <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d106      	bne.n	8000588 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2200      	movs	r2, #0
 800057e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f005 fb86 	bl	8005c94 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	699a      	ldr	r2, [r3, #24]
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f022 0210 	bic.w	r2, r2, #16
 8000596:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000598:	f7ff fea2 	bl	80002e0 <HAL_GetTick>
 800059c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800059e:	e012      	b.n	80005c6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80005a0:	f7ff fe9e 	bl	80002e0 <HAL_GetTick>
 80005a4:	4602      	mov	r2, r0
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	2b0a      	cmp	r3, #10
 80005ac:	d90b      	bls.n	80005c6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005b2:	f043 0201 	orr.w	r2, r3, #1
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	2203      	movs	r2, #3
 80005be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e11b      	b.n	80007fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0308 	and.w	r3, r3, #8
 80005d0:	2b08      	cmp	r3, #8
 80005d2:	d0e5      	beq.n	80005a0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	699a      	ldr	r2, [r3, #24]
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f042 0201 	orr.w	r2, r2, #1
 80005e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80005e4:	f7ff fe7c 	bl	80002e0 <HAL_GetTick>
 80005e8:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80005ea:	e012      	b.n	8000612 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80005ec:	f7ff fe78 	bl	80002e0 <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	2b0a      	cmp	r3, #10
 80005f8:	d90b      	bls.n	8000612 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fe:	f043 0201 	orr.w	r2, r3, #1
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	2203      	movs	r2, #3
 800060a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800060e:	2301      	movs	r3, #1
 8000610:	e0f5      	b.n	80007fe <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0e5      	beq.n	80005ec <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	699a      	ldr	r2, [r3, #24]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	f042 0202 	orr.w	r2, r2, #2
 800062e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a74      	ldr	r2, [pc, #464]	; (8000808 <HAL_FDCAN_Init+0x2ac>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d103      	bne.n	8000642 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800063a:	4a74      	ldr	r2, [pc, #464]	; (800080c <HAL_FDCAN_Init+0x2b0>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	685b      	ldr	r3, [r3, #4]
 8000640:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7c1b      	ldrb	r3, [r3, #16]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d108      	bne.n	800065c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	699a      	ldr	r2, [r3, #24]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000658:	619a      	str	r2, [r3, #24]
 800065a:	e007      	b.n	800066c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	699a      	ldr	r2, [r3, #24]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800066a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7c5b      	ldrb	r3, [r3, #17]
 8000670:	2b01      	cmp	r3, #1
 8000672:	d108      	bne.n	8000686 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	699a      	ldr	r2, [r3, #24]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000682:	619a      	str	r2, [r3, #24]
 8000684:	e007      	b.n	8000696 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	699a      	ldr	r2, [r3, #24]
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000694:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	7c9b      	ldrb	r3, [r3, #18]
 800069a:	2b01      	cmp	r3, #1
 800069c:	d108      	bne.n	80006b0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	699a      	ldr	r2, [r3, #24]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80006ac:	619a      	str	r2, [r3, #24]
 80006ae:	e007      	b.n	80006c0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	699a      	ldr	r2, [r3, #24]
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006be:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	689a      	ldr	r2, [r3, #8]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	430a      	orrs	r2, r1
 80006d4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	699a      	ldr	r2, [r3, #24]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80006e4:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	691a      	ldr	r2, [r3, #16]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f022 0210 	bic.w	r2, r2, #16
 80006f4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	68db      	ldr	r3, [r3, #12]
 80006fa:	2b01      	cmp	r3, #1
 80006fc:	d108      	bne.n	8000710 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	699a      	ldr	r2, [r3, #24]
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f042 0204 	orr.w	r2, r2, #4
 800070c:	619a      	str	r2, [r3, #24]
 800070e:	e02c      	b.n	800076a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d028      	beq.n	800076a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d01c      	beq.n	800075a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800072e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	691a      	ldr	r2, [r3, #16]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f042 0210 	orr.w	r2, r2, #16
 800073e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d110      	bne.n	800076a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f042 0220 	orr.w	r2, r2, #32
 8000756:	619a      	str	r2, [r3, #24]
 8000758:	e007      	b.n	800076a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	699a      	ldr	r2, [r3, #24]
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f042 0220 	orr.w	r2, r2, #32
 8000768:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	699b      	ldr	r3, [r3, #24]
 800076e:	3b01      	subs	r3, #1
 8000770:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	69db      	ldr	r3, [r3, #28]
 8000776:	3b01      	subs	r3, #1
 8000778:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800077a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000782:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	3b01      	subs	r3, #1
 800078c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000792:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000794:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	689b      	ldr	r3, [r3, #8]
 800079a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800079e:	d115      	bne.n	80007cc <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007a4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007aa:	3b01      	subs	r3, #1
 80007ac:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007ae:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b4:	3b01      	subs	r3, #1
 80007b6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80007b8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c0:	3b01      	subs	r3, #1
 80007c2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80007c8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80007ca:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	430a      	orrs	r2, r1
 80007de:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80007e2:	6878      	ldr	r0, [r7, #4]
 80007e4:	f000 fa2e 	bl	8000c44 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2201      	movs	r2, #1
 80007f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40006400 	.word	0x40006400
 800080c:	40006500 	.word	0x40006500

08000810 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800081e:	b2db      	uxtb	r3, r3
 8000820:	2b01      	cmp	r3, #1
 8000822:	d110      	bne.n	8000846 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2202      	movs	r2, #2
 8000828:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	699a      	ldr	r2, [r3, #24]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	f022 0201 	bic.w	r2, r2, #1
 800083a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	2200      	movs	r2, #0
 8000840:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8000842:	2300      	movs	r3, #0
 8000844:	e006      	b.n	8000854 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800084a:	f043 0204 	orr.w	r2, r3, #4
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8000852:	2301      	movs	r3, #1
  }
}
 8000854:	4618      	mov	r0, r3
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b086      	sub	sp, #24
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000872:	b2db      	uxtb	r3, r3
 8000874:	2b02      	cmp	r3, #2
 8000876:	d12c      	bne.n	80008d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8000880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000884:	2b00      	cmp	r3, #0
 8000886:	d007      	beq.n	8000898 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800088c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8000894:	2301      	movs	r3, #1
 8000896:	e023      	b.n	80008e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80008a0:	0c1b      	lsrs	r3, r3, #16
 80008a2:	f003 0303 	and.w	r3, r3, #3
 80008a6:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	68f8      	ldr	r0, [r7, #12]
 80008b0:	f000 fa1e 	bl	8000cf0 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2101      	movs	r1, #1
 80008ba:	697a      	ldr	r2, [r7, #20]
 80008bc:	fa01 f202 	lsl.w	r2, r1, r2
 80008c0:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80008c4:	2201      	movs	r2, #1
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	409a      	lsls	r2, r3
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 80008ce:	2300      	movs	r3, #0
 80008d0:	e006      	b.n	80008e0 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008d6:	f043 0208 	orr.w	r2, r3, #8
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
  }
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}

080008e8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80008f6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000904:	4013      	ands	r3, r2
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800090e:	f003 0307 	and.w	r3, r3, #7
 8000912:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800091a:	6a3a      	ldr	r2, [r7, #32]
 800091c:	4013      	ands	r3, r2
 800091e:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000926:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800092a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000932:	69fa      	ldr	r2, [r7, #28]
 8000934:	4013      	ands	r3, r2
 8000936:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800093e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8000942:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	4013      	ands	r3, r2
 800094e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000956:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800095a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	4013      	ands	r3, r2
 8000966:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800096e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000972:	2b00      	cmp	r3, #0
 8000974:	d00d      	beq.n	8000992 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800097c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000980:	2b00      	cmp	r3, #0
 8000982:	d006      	beq.n	8000992 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2240      	movs	r2, #64	; 0x40
 800098a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f000 f939 	bl	8000c04 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800099c:	2b00      	cmp	r3, #0
 800099e:	d01b      	beq.n	80009d8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80009a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d014      	beq.n	80009d8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80009b6:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4013      	ands	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009ce:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80009d0:	6939      	ldr	r1, [r7, #16]
 80009d2:	6878      	ldr	r0, [r7, #4]
 80009d4:	f000 f8f7 	bl	8000bc6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80009d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d007      	beq.n	80009ee <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80009e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f8b6 	bl	8000b5a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80009ee:	6a3b      	ldr	r3, [r7, #32]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d007      	beq.n	8000a04 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	6a3a      	ldr	r2, [r7, #32]
 80009fa:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80009fc:	6a39      	ldr	r1, [r7, #32]
 80009fe:	6878      	ldr	r0, [r7, #4]
 8000a00:	f000 f8b6 	bl	8000b70 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8000a04:	69fb      	ldr	r3, [r7, #28]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d007      	beq.n	8000a1a <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	69fa      	ldr	r2, [r7, #28]
 8000a10:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8000a12:	69f9      	ldr	r1, [r7, #28]
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	f000 f8b6 	bl	8000b86 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d00e      	beq.n	8000a46 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d007      	beq.n	8000a46 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f000 f8ab 	bl	8000b9c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d01a      	beq.n	8000a8a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d013      	beq.n	8000a8a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000a6a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	4013      	ands	r3, r2
 8000a78:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2280      	movs	r2, #128	; 0x80
 8000a80:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8000a82:	68f9      	ldr	r1, [r7, #12]
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f893 	bl	8000bb0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d00e      	beq.n	8000ab6 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000a9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d007      	beq.n	8000ab6 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8000ab0:	6878      	ldr	r0, [r7, #4]
 8000ab2:	f000 f893 	bl	8000bdc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000abc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d00e      	beq.n	8000ae2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d007      	beq.n	8000ae2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ada:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f887 	bl	8000bf0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d011      	beq.n	8000b14 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d00a      	beq.n	8000b14 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d007      	beq.n	8000b2a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	697a      	ldr	r2, [r7, #20]
 8000b20:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
      /* Error Status Callback */
      HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8000b22:	6979      	ldr	r1, [r7, #20]
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f000 f881 	bl	8000c2c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d009      	beq.n	8000b44 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	69ba      	ldr	r2, [r7, #24]
 8000b36:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	431a      	orrs	r2, r3
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d002      	beq.n	8000b52 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8000b4c:	6878      	ldr	r0, [r7, #4]
 8000b4e:	f000 f863 	bl	8000c18 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8000b52:	bf00      	nop
 8000b54:	3728      	adds	r7, #40	; 0x28
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	b083      	sub	sp, #12
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	6078      	str	r0, [r7, #4]
 8000b62:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8000b7a:	bf00      	nop
 8000b7c:	370c      	adds	r7, #12
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr

08000b86 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8000b86:	b480      	push	{r7}
 8000b88:	b083      	sub	sp, #12
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
 8000b8e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
 8000bb8:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr

08000bc6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
	...

08000c44 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8000c4c:	4b27      	ldr	r3, [pc, #156]	; (8000cec <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8000c4e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c5e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c66:	041a      	lsls	r2, r3, #16
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c84:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c8c:	061a      	lsls	r2, r3, #24
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	e005      	b.n	8000cd2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	3304      	adds	r3, #4
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8000cd8:	68fa      	ldr	r2, [r7, #12]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d3f3      	bcc.n	8000cc6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	4000a400 	.word	0x4000a400

08000cf0 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b089      	sub	sp, #36	; 0x24
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	60f8      	str	r0, [r7, #12]
 8000cf8:	60b9      	str	r1, [r7, #8]
 8000cfa:	607a      	str	r2, [r7, #4]
 8000cfc:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d10a      	bne.n	8000d1c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8000d0e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d16:	4313      	orrs	r3, r2
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e00a      	b.n	8000d32 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8000d24:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8000d2a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8000d2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000d30:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000d32:	68bb      	ldr	r3, [r7, #8]
 8000d34:	6a1b      	ldr	r3, [r3, #32]
 8000d36:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000d3c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8000d42:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8000d48:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8000d56:	683a      	ldr	r2, [r7, #0]
 8000d58:	4613      	mov	r3, r2
 8000d5a:	00db      	lsls	r3, r3, #3
 8000d5c:	4413      	add	r3, r2
 8000d5e:	00db      	lsls	r3, r3, #3
 8000d60:	440b      	add	r3, r1
 8000d62:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	69fa      	ldr	r2, [r7, #28]
 8000d68:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8000d6a:	69bb      	ldr	r3, [r7, #24]
 8000d6c:	3304      	adds	r3, #4
 8000d6e:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	693a      	ldr	r2, [r7, #16]
 8000d74:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	3304      	adds	r3, #4
 8000d7a:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	e020      	b.n	8000dc4 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	3303      	adds	r3, #3
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	3302      	adds	r3, #2
 8000d92:	6879      	ldr	r1, [r7, #4]
 8000d94:	440b      	add	r3, r1
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000d9a:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	6879      	ldr	r1, [r7, #4]
 8000da2:	440b      	add	r3, r1
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8000da8:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8000daa:	6879      	ldr	r1, [r7, #4]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	440a      	add	r2, r1
 8000db0:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8000db2:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	3304      	adds	r3, #4
 8000dbc:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3304      	adds	r3, #4
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	0c1b      	lsrs	r3, r3, #16
 8000dca:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <FDCAN_CopyMessageToRAM+0xf4>)
 8000dcc:	5cd3      	ldrb	r3, [r2, r3]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d3d5      	bcc.n	8000d82 <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8000dd6:	bf00      	nop
 8000dd8:	3724      	adds	r7, #36	; 0x24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	080069a0 	.word	0x080069a0

08000de8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000df6:	e15a      	b.n	80010ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	fa01 f303 	lsl.w	r3, r1, r3
 8000e04:	4013      	ands	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	f000 814c 	beq.w	80010a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d00b      	beq.n	8000e30 <HAL_GPIO_Init+0x48>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	d007      	beq.n	8000e30 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e24:	2b11      	cmp	r3, #17
 8000e26:	d003      	beq.n	8000e30 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	2b12      	cmp	r3, #18
 8000e2e:	d130      	bne.n	8000e92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	2203      	movs	r2, #3
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	68da      	ldr	r2, [r3, #12]
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e66:	2201      	movs	r2, #1
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	091b      	lsrs	r3, r3, #4
 8000e7c:	f003 0201 	and.w	r2, r3, #1
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	693a      	ldr	r2, [r7, #16]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	68db      	ldr	r3, [r3, #12]
 8000e96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	689a      	ldr	r2, [r3, #8]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0xea>
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2b12      	cmp	r3, #18
 8000ed0:	d123      	bne.n	8000f1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	08da      	lsrs	r2, r3, #3
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	3208      	adds	r2, #8
 8000eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ede:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	f003 0307 	and.w	r3, r3, #7
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	220f      	movs	r2, #15
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	43db      	mvns	r3, r3
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	691a      	ldr	r2, [r3, #16]
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	f003 0307 	and.w	r3, r3, #7
 8000f00:	009b      	lsls	r3, r3, #2
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	4313      	orrs	r3, r2
 8000f0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	6939      	ldr	r1, [r7, #16]
 8000f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	2203      	movs	r2, #3
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4013      	ands	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0203 	and.w	r2, r3, #3
 8000f3a:	697b      	ldr	r3, [r7, #20]
 8000f3c:	005b      	lsls	r3, r3, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	f000 80a6 	beq.w	80010a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5c:	4b5b      	ldr	r3, [pc, #364]	; (80010cc <HAL_GPIO_Init+0x2e4>)
 8000f5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f60:	4a5a      	ldr	r2, [pc, #360]	; (80010cc <HAL_GPIO_Init+0x2e4>)
 8000f62:	f043 0301 	orr.w	r3, r3, #1
 8000f66:	6613      	str	r3, [r2, #96]	; 0x60
 8000f68:	4b58      	ldr	r3, [pc, #352]	; (80010cc <HAL_GPIO_Init+0x2e4>)
 8000f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f74:	4a56      	ldr	r2, [pc, #344]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	f003 0303 	and.w	r3, r3, #3
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4013      	ands	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f9e:	d01f      	beq.n	8000fe0 <HAL_GPIO_Init+0x1f8>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a4c      	ldr	r2, [pc, #304]	; (80010d4 <HAL_GPIO_Init+0x2ec>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d019      	beq.n	8000fdc <HAL_GPIO_Init+0x1f4>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	4a4b      	ldr	r2, [pc, #300]	; (80010d8 <HAL_GPIO_Init+0x2f0>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d013      	beq.n	8000fd8 <HAL_GPIO_Init+0x1f0>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	4a4a      	ldr	r2, [pc, #296]	; (80010dc <HAL_GPIO_Init+0x2f4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d00d      	beq.n	8000fd4 <HAL_GPIO_Init+0x1ec>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a49      	ldr	r2, [pc, #292]	; (80010e0 <HAL_GPIO_Init+0x2f8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d007      	beq.n	8000fd0 <HAL_GPIO_Init+0x1e8>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4a48      	ldr	r2, [pc, #288]	; (80010e4 <HAL_GPIO_Init+0x2fc>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d101      	bne.n	8000fcc <HAL_GPIO_Init+0x1e4>
 8000fc8:	2305      	movs	r3, #5
 8000fca:	e00a      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fcc:	2306      	movs	r3, #6
 8000fce:	e008      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	e006      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e004      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fd8:	2302      	movs	r3, #2
 8000fda:	e002      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	e000      	b.n	8000fe2 <HAL_GPIO_Init+0x1fa>
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	f002 0203 	and.w	r2, r2, #3
 8000fe8:	0092      	lsls	r2, r2, #2
 8000fea:	4093      	lsls	r3, r2
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ff2:	4937      	ldr	r1, [pc, #220]	; (80010d0 <HAL_GPIO_Init+0x2e8>)
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3302      	adds	r3, #2
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001000:	4b39      	ldr	r3, [pc, #228]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001024:	4a30      	ldr	r2, [pc, #192]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800102a:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <HAL_GPIO_Init+0x300>)
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43db      	mvns	r3, r3
 8001034:	693a      	ldr	r2, [r7, #16]
 8001036:	4013      	ands	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4313      	orrs	r3, r2
 800104c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800104e:	4a26      	ldr	r2, [pc, #152]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001056:	689b      	ldr	r3, [r3, #8]
 8001058:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	43db      	mvns	r3, r3
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <HAL_GPIO_Init+0x300>)
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <HAL_GPIO_Init+0x300>)
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4313      	orrs	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010a2:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <HAL_GPIO_Init+0x300>)
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681a      	ldr	r2, [r3, #0]
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa22 f303 	lsr.w	r3, r2, r3
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	f47f ae9d 	bne.w	8000df8 <HAL_GPIO_Init+0x10>
  }
}
 80010be:	bf00      	nop
 80010c0:	371c      	adds	r7, #28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40010000 	.word	0x40010000
 80010d4:	48000400 	.word	0x48000400
 80010d8:	48000800 	.word	0x48000800
 80010dc:	48000c00 	.word	0x48000c00
 80010e0:	48001000 	.word	0x48001000
 80010e4:	48001400 	.word	0x48001400
 80010e8:	40010400 	.word	0x40010400

080010ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	460b      	mov	r3, r1
 80010f6:	807b      	strh	r3, [r7, #2]
 80010f8:	4613      	mov	r3, r2
 80010fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fc:	787b      	ldrb	r3, [r7, #1]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d003      	beq.n	800110a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001102:	887a      	ldrh	r2, [r7, #2]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001108:	e002      	b.n	8001110 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110a:	887a      	ldrh	r2, [r7, #2]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111a:	4770      	bx	lr

0800111c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	695a      	ldr	r2, [r3, #20]
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	4013      	ands	r3, r2
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001134:	887a      	ldrh	r2, [r7, #2]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800113a:	e002      	b.n	8001142 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800114e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001150:	b08b      	sub	sp, #44	; 0x2c
 8001152:	af06      	add	r7, sp, #24
 8001154:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0ad      	b.n	80012bc <HAL_PCD_Init+0x16e>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3229 	ldrb.w	r3, [r3, #553]	; 0x229
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d106      	bne.n	800117a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f004 ff71 	bl	800605c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f001 fee3 	bl	8002f52 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	73fb      	strb	r3, [r7, #15]
 8001190:	e035      	b.n	80011fe <HAL_PCD_Init+0xb0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001192:	7bfb      	ldrb	r3, [r7, #15]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	015b      	lsls	r3, r3, #5
 8001198:	4413      	add	r3, r2
 800119a:	3329      	adds	r3, #41	; 0x29
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	015b      	lsls	r3, r3, #5
 80011a6:	4413      	add	r3, r2
 80011a8:	3328      	adds	r3, #40	; 0x28
 80011aa:	7bfa      	ldrb	r2, [r7, #15]
 80011ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	7bfa      	ldrb	r2, [r7, #15]
 80011b2:	b291      	uxth	r1, r2
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	015b      	lsls	r3, r3, #5
 80011b8:	4413      	add	r3, r2
 80011ba:	3336      	adds	r3, #54	; 0x36
 80011bc:	460a      	mov	r2, r1
 80011be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
 80011c2:	687a      	ldr	r2, [r7, #4]
 80011c4:	015b      	lsls	r3, r3, #5
 80011c6:	4413      	add	r3, r2
 80011c8:	332b      	adds	r3, #43	; 0x2b
 80011ca:	2200      	movs	r2, #0
 80011cc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	015b      	lsls	r3, r3, #5
 80011d4:	4413      	add	r3, r2
 80011d6:	3338      	adds	r3, #56	; 0x38
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011dc:	7bfb      	ldrb	r3, [r7, #15]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	015b      	lsls	r3, r3, #5
 80011e2:	4413      	add	r3, r2
 80011e4:	333c      	adds	r3, #60	; 0x3c
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011ea:	7bfb      	ldrb	r3, [r7, #15]
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	3302      	adds	r3, #2
 80011f0:	015b      	lsls	r3, r3, #5
 80011f2:	4413      	add	r3, r2
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011f8:	7bfb      	ldrb	r3, [r7, #15]
 80011fa:	3301      	adds	r3, #1
 80011fc:	73fb      	strb	r3, [r7, #15]
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	429a      	cmp	r2, r3
 8001206:	d3c4      	bcc.n	8001192 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001208:	2300      	movs	r3, #0
 800120a:	73fb      	strb	r3, [r7, #15]
 800120c:	e031      	b.n	8001272 <HAL_PCD_Init+0x124>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800120e:	7bfb      	ldrb	r3, [r7, #15]
 8001210:	687a      	ldr	r2, [r7, #4]
 8001212:	015b      	lsls	r3, r3, #5
 8001214:	4413      	add	r3, r2
 8001216:	f203 1329 	addw	r3, r3, #297	; 0x129
 800121a:	2200      	movs	r2, #0
 800121c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800121e:	7bfb      	ldrb	r3, [r7, #15]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	015b      	lsls	r3, r3, #5
 8001224:	4413      	add	r3, r2
 8001226:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800122a:	7bfa      	ldrb	r2, [r7, #15]
 800122c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	015b      	lsls	r3, r3, #5
 8001234:	4413      	add	r3, r2
 8001236:	f203 132b 	addw	r3, r3, #299	; 0x12b
 800123a:	2200      	movs	r2, #0
 800123c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	015b      	lsls	r3, r3, #5
 8001244:	4413      	add	r3, r2
 8001246:	f503 739c 	add.w	r3, r3, #312	; 0x138
 800124a:	2200      	movs	r2, #0
 800124c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	687a      	ldr	r2, [r7, #4]
 8001252:	015b      	lsls	r3, r3, #5
 8001254:	4413      	add	r3, r2
 8001256:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800125e:	7bfb      	ldrb	r3, [r7, #15]
 8001260:	687a      	ldr	r2, [r7, #4]
 8001262:	330a      	adds	r3, #10
 8001264:	015b      	lsls	r3, r3, #5
 8001266:	4413      	add	r3, r2
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	3301      	adds	r3, #1
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	429a      	cmp	r2, r3
 800127a:	d3c8      	bcc.n	800120e <HAL_PCD_Init+0xc0>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	603b      	str	r3, [r7, #0]
 8001282:	687e      	ldr	r6, [r7, #4]
 8001284:	466d      	mov	r5, sp
 8001286:	f106 0410 	add.w	r4, r6, #16
 800128a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128e:	6823      	ldr	r3, [r4, #0]
 8001290:	602b      	str	r3, [r5, #0]
 8001292:	1d33      	adds	r3, r6, #4
 8001294:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001296:	6838      	ldr	r0, [r7, #0]
 8001298:	f001 fe76 	bl	8002f88 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2229 	strb.w	r2, [r3, #553]	; 0x229
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	69db      	ldr	r3, [r3, #28]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d102      	bne.n	80012ba <HAL_PCD_Init+0x16c>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f000 fe36 	bl	8001f26 <HAL_PCDEx_ActivateLPM>
  }
  
  return HAL_OK;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012c4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d101      	bne.n	80012da <HAL_PCD_Start+0x16>
 80012d6:	2302      	movs	r3, #2
 80012d8:	e012      	b.n	8001300 <HAL_PCD_Start+0x3c>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DevConnect(hpcd->Instance);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 fe9a 	bl	8004020 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4618      	mov	r0, r3
 80012f2:	f001 fe15 	bl	8002f20 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4618      	mov	r0, r3
 8001316:	f002 fe9a 	bl	800404e <USB_ReadInterrupts>
 800131a:	4603      	mov	r3, r0
 800131c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001324:	d102      	bne.n	800132c <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 fb34 	bl	8001994 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fe8c 	bl	800404e <USB_ReadInterrupts>
 8001336:	4603      	mov	r3, r0
 8001338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800133c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001340:	d112      	bne.n	8001368 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001354:	b292      	uxth	r2, r2
 8001356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f004 ff15 	bl	800618a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001360:	2100      	movs	r1, #0
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f91e 	bl	80015a4 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4618      	mov	r0, r3
 800136e:	f002 fe6e 	bl	800404e <USB_ReadInterrupts>
 8001372:	4603      	mov	r3, r0
 8001374:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001378:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800137c:	d10b      	bne.n	8001396 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001386:	b29a      	uxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001390:	b292      	uxth	r2, r2
 8001392:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f002 fe57 	bl	800404e <USB_ReadInterrupts>
 80013a0:	4603      	mov	r3, r0
 80013a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013aa:	d10b      	bne.n	80013c4 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80013be:	b292      	uxth	r2, r2
 80013c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4618      	mov	r0, r3
 80013ca:	f002 fe40 	bl	800404e <USB_ReadInterrupts>
 80013ce:	4603      	mov	r3, r0
 80013d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013d8:	d133      	bne.n	8001442 <HAL_PCD_IRQHandler+0x13a>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f022 0204 	bic.w	r2, r2, #4
 80013ec:	b292      	uxth	r2, r2
 80013ee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0208 	bic.w	r2, r2, #8
 8001404:	b292      	uxth	r2, r2
 8001406:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 8001410:	2b01      	cmp	r3, #1
 8001412:	d107      	bne.n	8001424 <HAL_PCD_IRQHandler+0x11c>
    {
      hpcd->LPM_State = LPM_L0;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f005 f8a4 	bl	800656c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f004 fee9 	bl	80061fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001432:	b29a      	uxth	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800143c:	b292      	uxth	r2, r2
 800143e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f002 fe01 	bl	800404e <USB_ReadInterrupts>
 800144c:	4603      	mov	r3, r0
 800144e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001456:	d126      	bne.n	80014a6 <HAL_PCD_IRQHandler+0x19e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001460:	b29a      	uxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f042 0208 	orr.w	r2, r2, #8
 800146a:	b292      	uxth	r2, r2
 800146c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001478:	b29a      	uxth	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001482:	b292      	uxth	r2, r2
 8001484:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001490:	b29a      	uxth	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f042 0204 	orr.w	r2, r2, #4
 800149a:	b292      	uxth	r2, r2
 800149c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f004 fe91 	bl	80061c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  /* Handle LPM Interrupt */
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f002 fdcf 	bl	800404e <USB_ReadInterrupts>
 80014b0:	4603      	mov	r3, r0
 80014b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b6:	2b80      	cmp	r3, #128	; 0x80
 80014b8:	d13f      	bne.n	800153a <HAL_PCD_IRQHandler+0x232>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014c2:	b29a      	uxth	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014cc:	b292      	uxth	r2, r2
 80014ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d12b      	bne.n	8001534 <HAL_PCD_IRQHandler+0x22c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f042 0204 	orr.w	r2, r2, #4
 80014ee:	b292      	uxth	r2, r2
 80014f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0208 	orr.w	r2, r2, #8
 8001506:	b292      	uxth	r2, r2
 8001508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800151c:	b29b      	uxth	r3, r3
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f8c3 2264 	str.w	r2, [r3, #612]	; 0x264
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800152a:	2101      	movs	r1, #1
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f005 f81d 	bl	800656c <HAL_PCDEx_LPM_Callback>
 8001532:	e002      	b.n	800153a <HAL_PCD_IRQHandler+0x232>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SuspendCallback(hpcd);
#else
      HAL_PCD_SuspendCallback(hpcd);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f004 fe47 	bl	80061c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f002 fd85 	bl	800404e <USB_ReadInterrupts>
 8001544:	4603      	mov	r3, r0
 8001546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800154a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800154e:	d10e      	bne.n	800156e <HAL_PCD_IRQHandler+0x266>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001558:	b29a      	uxth	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001562:	b292      	uxth	r2, r2
 8001564:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f004 fe00 	bl	800616e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f002 fd6b 	bl	800404e <USB_ReadInterrupts>
 8001578:	4603      	mov	r3, r0
 800157a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800157e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001582:	d10b      	bne.n	800159c <HAL_PCD_IRQHandler+0x294>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800158c:	b29a      	uxth	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001596:	b292      	uxth	r2, r2
 8001598:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800159c:	bf00      	nop
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_PCD_SetAddress+0x1a>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e013      	b.n	80015e6 <HAL_PCD_SetAddress+0x42>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  hpcd->USB_Address = address;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	78fa      	ldrb	r2, [r7, #3]
 80015ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	78fa      	ldrb	r2, [r7, #3]
 80015d4:	4611      	mov	r1, r2
 80015d6:	4618      	mov	r0, r3
 80015d8:	f002 fd0e 	bl	8003ff8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	4608      	mov	r0, r1
 80015f8:	4611      	mov	r1, r2
 80015fa:	461a      	mov	r2, r3
 80015fc:	4603      	mov	r3, r0
 80015fe:	70fb      	strb	r3, [r7, #3]
 8001600:	460b      	mov	r3, r1
 8001602:	803b      	strh	r3, [r7, #0]
 8001604:	4613      	mov	r3, r2
 8001606:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001608:	2300      	movs	r3, #0
 800160a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800160c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001610:	2b00      	cmp	r3, #0
 8001612:	da0b      	bge.n	800162c <HAL_PCD_EP_Open+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001614:	78fb      	ldrb	r3, [r7, #3]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	015b      	lsls	r3, r3, #5
 800161c:	3328      	adds	r3, #40	; 0x28
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	2201      	movs	r2, #1
 8001628:	705a      	strb	r2, [r3, #1]
 800162a:	e00b      	b.n	8001644 <HAL_PCD_EP_Open+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800162c:	78fb      	ldrb	r3, [r7, #3]
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	015b      	lsls	r3, r3, #5
 8001634:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001638:	687a      	ldr	r2, [r7, #4]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	2200      	movs	r2, #0
 8001642:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001644:	78fb      	ldrb	r3, [r7, #3]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	b2da      	uxtb	r2, r3
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001650:	883a      	ldrh	r2, [r7, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	78ba      	ldrb	r2, [r7, #2]
 800165a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d004      	beq.n	800166e <HAL_PCD_EP_Open+0x80>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	b29a      	uxth	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800166e:	78bb      	ldrb	r3, [r7, #2]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d102      	bne.n	800167a <HAL_PCD_EP_Open+0x8c>
  {
    ep->data_pid_start = 0U;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2200      	movs	r2, #0
 8001678:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001680:	2b01      	cmp	r3, #1
 8001682:	d101      	bne.n	8001688 <HAL_PCD_EP_Open+0x9a>
 8001684:	2302      	movs	r3, #2
 8001686:	e00e      	b.n	80016a6 <HAL_PCD_EP_Open+0xb8>
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2201      	movs	r2, #1
 800168c:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	68f9      	ldr	r1, [r7, #12]
 8001696:	4618      	mov	r0, r3
 8001698:	f001 fc9a 	bl	8002fd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return ret;
 80016a4:	7afb      	ldrb	r3, [r7, #11]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b084      	sub	sp, #16
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	da0b      	bge.n	80016da <HAL_PCD_EP_Close+0x2c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016c2:	78fb      	ldrb	r3, [r7, #3]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	015b      	lsls	r3, r3, #5
 80016ca:	3328      	adds	r3, #40	; 0x28
 80016cc:	687a      	ldr	r2, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	2201      	movs	r2, #1
 80016d6:	705a      	strb	r2, [r3, #1]
 80016d8:	e00b      	b.n	80016f2 <HAL_PCD_EP_Close+0x44>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016da:	78fb      	ldrb	r3, [r7, #3]
 80016dc:	f003 0307 	and.w	r3, r3, #7
 80016e0:	015b      	lsls	r3, r3, #5
 80016e2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	4413      	add	r3, r2
 80016ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80016f2:	78fb      	ldrb	r3, [r7, #3]
 80016f4:	f003 0307 	and.w	r3, r3, #7
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_PCD_EP_Close+0x5e>
 8001708:	2302      	movs	r3, #2
 800170a:	e00e      	b.n	800172a <HAL_PCD_EP_Close+0x7c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68f9      	ldr	r1, [r7, #12]
 800171a:	4618      	mov	r0, r3
 800171c:	f001 ff48 	bl	80035b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  return HAL_OK;
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3710      	adds	r7, #16
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	460b      	mov	r3, r1
 8001740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001742:	7afb      	ldrb	r3, [r7, #11]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	015b      	lsls	r3, r3, #5
 800174a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4413      	add	r3, r2
 8001752:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	683a      	ldr	r2, [r7, #0]
 800175e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2200      	movs	r2, #0
 800176a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800176c:	7afb      	ldrb	r3, [r7, #11]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	b2da      	uxtb	r2, r3
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001778:	7afb      	ldrb	r3, [r7, #11]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	2b00      	cmp	r3, #0
 8001780:	d106      	bne.n	8001790 <HAL_PCD_EP_Receive+0x5e>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6979      	ldr	r1, [r7, #20]
 8001788:	4618      	mov	r0, r3
 800178a:	f002 f8a7 	bl	80038dc <USB_EPStartXfer>
 800178e:	e005      	b.n	800179c <HAL_PCD_EP_Receive+0x6a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6979      	ldr	r1, [r7, #20]
 8001796:	4618      	mov	r0, r3
 8001798:	f002 f8a0 	bl	80038dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}

080017a6 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	460b      	mov	r3, r1
 80017b0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80017b2:	78fb      	ldrb	r3, [r7, #3]
 80017b4:	f003 0307 	and.w	r3, r3, #7
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	330a      	adds	r3, #10
 80017bc:	015b      	lsls	r3, r3, #5
 80017be:	4413      	add	r3, r2
 80017c0:	3304      	adds	r3, #4
 80017c2:	681b      	ldr	r3, [r3, #0]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	60f8      	str	r0, [r7, #12]
 80017d8:	607a      	str	r2, [r7, #4]
 80017da:	603b      	str	r3, [r7, #0]
 80017dc:	460b      	mov	r3, r1
 80017de:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80017e0:	7afb      	ldrb	r3, [r7, #11]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	015b      	lsls	r3, r3, #5
 80017e8:	3328      	adds	r3, #40	; 0x28
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	4413      	add	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2200      	movs	r2, #0
 8001800:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	2201      	movs	r2, #1
 8001806:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001808:	7afb      	ldrb	r3, [r7, #11]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	b2da      	uxtb	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001814:	7afb      	ldrb	r3, [r7, #11]
 8001816:	f003 0307 	and.w	r3, r3, #7
 800181a:	2b00      	cmp	r3, #0
 800181c:	d106      	bne.n	800182c <HAL_PCD_EP_Transmit+0x5c>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6979      	ldr	r1, [r7, #20]
 8001824:	4618      	mov	r0, r3
 8001826:	f002 f859 	bl	80038dc <USB_EPStartXfer>
 800182a:	e005      	b.n	8001838 <HAL_PCD_EP_Transmit+0x68>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6979      	ldr	r1, [r7, #20]
 8001832:	4618      	mov	r0, r3
 8001834:	f002 f852 	bl	80038dc <USB_EPStartXfer>
  }

  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b084      	sub	sp, #16
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	f003 0207 	and.w	r2, r3, #7
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	d901      	bls.n	8001860 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e046      	b.n	80018ee <HAL_PCD_EP_SetStall+0xac>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001860:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001864:	2b00      	cmp	r3, #0
 8001866:	da0b      	bge.n	8001880 <HAL_PCD_EP_SetStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	015b      	lsls	r3, r3, #5
 8001870:	3328      	adds	r3, #40	; 0x28
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	4413      	add	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	2201      	movs	r2, #1
 800187c:	705a      	strb	r2, [r3, #1]
 800187e:	e009      	b.n	8001894 <HAL_PCD_EP_SetStall+0x52>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001880:	78fb      	ldrb	r3, [r7, #3]
 8001882:	015b      	lsls	r3, r3, #5
 8001884:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	4413      	add	r3, r2
 800188c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2200      	movs	r2, #0
 8001892:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2201      	movs	r2, #1
 8001898:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	b2da      	uxtb	r2, r3
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d101      	bne.n	80018b4 <HAL_PCD_EP_SetStall+0x72>
 80018b0:	2302      	movs	r3, #2
 80018b2:	e01c      	b.n	80018ee <HAL_PCD_EP_SetStall+0xac>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68f9      	ldr	r1, [r7, #12]
 80018c2:	4618      	mov	r0, r3
 80018c4:	f002 fac2 	bl	8003e4c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018c8:	78fb      	ldrb	r3, [r7, #3]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d108      	bne.n	80018e4 <HAL_PCD_EP_SetStall+0xa2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f503 730c 	add.w	r3, r3, #560	; 0x230
 80018dc:	4619      	mov	r1, r3
 80018de:	4610      	mov	r0, r2
 80018e0:	f002 fbc5 	bl	800406e <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
 80018fe:	460b      	mov	r3, r1
 8001900:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	f003 020f 	and.w	r2, r3, #15
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	429a      	cmp	r2, r3
 800190e:	d901      	bls.n	8001914 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e03a      	b.n	800198a <HAL_PCD_EP_ClrStall+0x94>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001918:	2b00      	cmp	r3, #0
 800191a:	da0b      	bge.n	8001934 <HAL_PCD_EP_ClrStall+0x3e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	015b      	lsls	r3, r3, #5
 8001924:	3328      	adds	r3, #40	; 0x28
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	4413      	add	r3, r2
 800192a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	705a      	strb	r2, [r3, #1]
 8001932:	e00b      	b.n	800194c <HAL_PCD_EP_ClrStall+0x56>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001934:	78fb      	ldrb	r3, [r7, #3]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	015b      	lsls	r3, r3, #5
 800193c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4413      	add	r3, r2
 8001944:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2200      	movs	r2, #0
 800194a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2200      	movs	r2, #0
 8001950:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001952:	78fb      	ldrb	r3, [r7, #3]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	b2da      	uxtb	r2, r3
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	f893 3228 	ldrb.w	r3, [r3, #552]	; 0x228
 8001964:	2b01      	cmp	r3, #1
 8001966:	d101      	bne.n	800196c <HAL_PCD_EP_ClrStall+0x76>
 8001968:	2302      	movs	r3, #2
 800196a:	e00e      	b.n	800198a <HAL_PCD_EP_ClrStall+0x94>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	68f9      	ldr	r1, [r7, #12]
 800197a:	4618      	mov	r0, r3
 800197c:	f002 faa8 	bl	8003ed0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228

  return HAL_OK;
 8001988:	2300      	movs	r3, #0
}
 800198a:	4618      	mov	r0, r3
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b089      	sub	sp, #36	; 0x24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  uint16_t wIstr;
  uint16_t wEPVal;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800199c:	e274      	b.n	8001e88 <PCD_EP_ISR_Handler+0x4f4>
  {
    wIstr = hpcd->Instance->ISTR;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019a6:	82fb      	strh	r3, [r7, #22]
    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019a8:	8afb      	ldrh	r3, [r7, #22]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f003 030f 	and.w	r3, r3, #15
 80019b0:	757b      	strb	r3, [r7, #21]

    if (epindex == 0U)
 80019b2:	7d7b      	ldrb	r3, [r7, #21]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 813c 	bne.w	8001c32 <PCD_EP_ISR_Handler+0x29e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80019ba:	8afb      	ldrh	r3, [r7, #22]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d14f      	bne.n	8001a64 <PCD_EP_ISR_Handler+0xd0>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80019d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d4:	b29c      	uxth	r4, r3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 80019de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3328      	adds	r3, #40	; 0x28
 80019ea:	60fb      	str	r3, [r7, #12]

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	461a      	mov	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	4413      	add	r3, r2
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	6812      	ldr	r2, [r2, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001a0a:	881b      	ldrh	r3, [r3, #0]
 8001a0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	69db      	ldr	r3, [r3, #28]
 8001a1c:	441a      	add	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a22:	2100      	movs	r1, #0
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f004 fb8b 	bl	8006140 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f000 8228 	beq.w	8001e88 <PCD_EP_ISR_Handler+0x4f4>
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	f040 8223 	bne.w	8001e88 <PCD_EP_ISR_Handler+0x4f4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	b292      	uxth	r2, r2
 8001a56:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001a62:	e211      	b.n	8001e88 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001a6a:	60fb      	str	r3, [r7, #12]
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	881b      	ldrh	r3, [r3, #0]
 8001a72:	827b      	strh	r3, [r7, #18]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a74:	8a7b      	ldrh	r3, [r7, #18]
 8001a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d031      	beq.n	8001ae2 <PCD_EP_ISR_Handler+0x14e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	461a      	mov	r2, r3
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	4413      	add	r3, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6812      	ldr	r2, [r2, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f503 710c 	add.w	r1, r3, #560	; 0x230
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	f002 fb25 	bl	8004108 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	881b      	ldrh	r3, [r3, #0]
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001aca:	4013      	ands	r3, r2
 8001acc:	b29c      	uxth	r4, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001ad6:	b292      	uxth	r2, r2
 8001ad8:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f004 fb06 	bl	80060ec <HAL_PCD_SetupStageCallback>
 8001ae0:	e1d2      	b.n	8001e88 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }

        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001ae2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f280 81ce 	bge.w	8001e88 <PCD_EP_ISR_Handler+0x4f4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001af8:	4013      	ands	r3, r2
 8001afa:	b29c      	uxth	r4, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001b04:	b292      	uxth	r2, r2
 8001b06:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	4413      	add	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6812      	ldr	r2, [r2, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001b26:	881b      	ldrh	r3, [r3, #0]
 8001b28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d019      	beq.n	8001b6c <PCD_EP_ISR_Handler+0x1d8>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d015      	beq.n	8001b6c <PCD_EP_ISR_Handler+0x1d8>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6818      	ldr	r0, [r3, #0]
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6959      	ldr	r1, [r3, #20]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	f002 fad9 	bl	8004108 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	441a      	add	r2, r3
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001b64:	2100      	movs	r1, #0
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f004 fad2 	bl	8006110 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	461c      	mov	r4, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	441c      	add	r4, r3
 8001b7e:	f204 4306 	addw	r3, r4, #1030	; 0x406
 8001b82:	461c      	mov	r4, r3
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d10e      	bne.n	8001baa <PCD_EP_ISR_Handler+0x216>
 8001b8c:	8823      	ldrh	r3, [r4, #0]
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	8023      	strh	r3, [r4, #0]
 8001b98:	8823      	ldrh	r3, [r4, #0]
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ba0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	8023      	strh	r3, [r4, #0]
 8001ba8:	e02d      	b.n	8001c06 <PCD_EP_ISR_Handler+0x272>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	691b      	ldr	r3, [r3, #16]
 8001bae:	2b3e      	cmp	r3, #62	; 0x3e
 8001bb0:	d812      	bhi.n	8001bd8 <PCD_EP_ISR_Handler+0x244>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	085b      	lsrs	r3, r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	691b      	ldr	r3, [r3, #16]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <PCD_EP_ISR_Handler+0x238>
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	69bb      	ldr	r3, [r7, #24]
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	029b      	lsls	r3, r3, #10
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	8023      	strh	r3, [r4, #0]
 8001bd6:	e016      	b.n	8001c06 <PCD_EP_ISR_Handler+0x272>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	691b      	ldr	r3, [r3, #16]
 8001bdc:	095b      	lsrs	r3, r3, #5
 8001bde:	61bb      	str	r3, [r7, #24]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	f003 031f 	and.w	r3, r3, #31
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d102      	bne.n	8001bf2 <PCD_EP_ISR_Handler+0x25e>
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	61bb      	str	r3, [r7, #24]
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	029b      	lsls	r3, r3, #10
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001bfe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	8023      	strh	r3, [r4, #0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c16:	b29c      	uxth	r4, r3
 8001c18:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8001c1c:	b29c      	uxth	r4, r3
 8001c1e:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8001c22:	b29c      	uxth	r4, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b9e      	ldr	r3, [pc, #632]	; (8001ea4 <PCD_EP_ISR_Handler+0x510>)
 8001c2a:	4323      	orrs	r3, r4
 8001c2c:	b29b      	uxth	r3, r3
 8001c2e:	8013      	strh	r3, [r2, #0]
 8001c30:	e12a      	b.n	8001e88 <PCD_EP_ISR_Handler+0x4f4>
    else
    {
      /* Decode and service non control endpoints interrupt */

      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	461a      	mov	r2, r3
 8001c38:	7d7b      	ldrb	r3, [r7, #21]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	881b      	ldrh	r3, [r3, #0]
 8001c40:	827b      	strh	r3, [r7, #18]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c42:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f280 80cb 	bge.w	8001de2 <PCD_EP_ISR_Handler+0x44e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	7d7b      	ldrb	r3, [r7, #21]
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c60:	4013      	ands	r3, r2
 8001c62:	b29c      	uxth	r4, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	7d7b      	ldrb	r3, [r7, #21]
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	f044 0280 	orr.w	r2, r4, #128	; 0x80
 8001c74:	b292      	uxth	r2, r2
 8001c76:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001c78:	7d7b      	ldrb	r3, [r7, #21]
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	60fb      	str	r3, [r7, #12]

        /* OUT double Buffering */
        if (ep->doublebuffer == 0U)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	7b1b      	ldrb	r3, [r3, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d11f      	bne.n	8001cce <PCD_EP_ISR_Handler+0x33a>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c96:	b29b      	uxth	r3, r3
 8001c98:	461a      	mov	r2, r3
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001cb2:	83fb      	strh	r3, [r7, #30]
          if (count != 0U)
 8001cb4:	8bfb      	ldrh	r3, [r7, #30]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d06e      	beq.n	8001d98 <PCD_EP_ISR_Handler+0x404>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6818      	ldr	r0, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	6959      	ldr	r1, [r3, #20]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	88da      	ldrh	r2, [r3, #6]
 8001cc6:	8bfb      	ldrh	r3, [r7, #30]
 8001cc8:	f002 fa1e 	bl	8004108 <USB_ReadPMA>
 8001ccc:	e064      	b.n	8001d98 <PCD_EP_ISR_Handler+0x404>
          }
        }
        else
        {
          /* free EP OUT Buffer */
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ce8:	b29c      	uxth	r4, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	461a      	mov	r2, r3
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	441a      	add	r2, r3
 8001cf8:	4b6b      	ldr	r3, [pc, #428]	; (8001ea8 <PCD_EP_ISR_Handler+0x514>)
 8001cfa:	4323      	orrs	r3, r4
 8001cfc:	b29b      	uxth	r3, r3
 8001cfe:	8013      	strh	r3, [r2, #0]

          if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	881b      	ldrh	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01f      	beq.n	8001d5a <PCD_EP_ISR_Handler+0x3c6>
          {
            /* read from endpoint BUF0Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d22:	b29b      	uxth	r3, r3
 8001d24:	461a      	mov	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4413      	add	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6812      	ldr	r2, [r2, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001d38:	881b      	ldrh	r3, [r3, #0]
 8001d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d3e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001d40:	8bfb      	ldrh	r3, [r7, #30]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d028      	beq.n	8001d98 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6959      	ldr	r1, [r3, #20]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	891a      	ldrh	r2, [r3, #8]
 8001d52:	8bfb      	ldrh	r3, [r7, #30]
 8001d54:	f002 f9d8 	bl	8004108 <USB_ReadPMA>
 8001d58:	e01e      	b.n	8001d98 <PCD_EP_ISR_Handler+0x404>
            }
          }
          else
          {
            /* read from endpoint BUF1Addr buffer */
            count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	00db      	lsls	r3, r3, #3
 8001d6c:	4413      	add	r3, r2
 8001d6e:	687a      	ldr	r2, [r7, #4]
 8001d70:	6812      	ldr	r2, [r2, #0]
 8001d72:	4413      	add	r3, r2
 8001d74:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d7e:	83fb      	strh	r3, [r7, #30]
            if (count != 0U)
 8001d80:	8bfb      	ldrh	r3, [r7, #30]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d008      	beq.n	8001d98 <PCD_EP_ISR_Handler+0x404>
            {
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6818      	ldr	r0, [r3, #0]
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	6959      	ldr	r1, [r3, #20]
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	895a      	ldrh	r2, [r3, #10]
 8001d92:	8bfb      	ldrh	r3, [r7, #30]
 8001d94:	f002 f9b8 	bl	8004108 <USB_ReadPMA>
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	8bfb      	ldrh	r3, [r7, #30]
 8001d9e:	441a      	add	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	695a      	ldr	r2, [r3, #20]
 8001da8:	8bfb      	ldrh	r3, [r7, #30]
 8001daa:	441a      	add	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d004      	beq.n	8001dc2 <PCD_EP_ISR_Handler+0x42e>
 8001db8:	8bfa      	ldrh	r2, [r7, #30]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	429a      	cmp	r2, r3
 8001dc0:	d206      	bcs.n	8001dd0 <PCD_EP_ISR_Handler+0x43c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	4619      	mov	r1, r3
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f004 f9a1 	bl	8006110 <HAL_PCD_DataOutStageCallback>
 8001dce:	e008      	b.n	8001de2 <PCD_EP_ISR_Handler+0x44e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	7819      	ldrb	r1, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	699b      	ldr	r3, [r3, #24]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fca8 	bl	8001732 <HAL_PCD_EP_Receive>
        }

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001de2:	8a7b      	ldrh	r3, [r7, #18]
 8001de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d04d      	beq.n	8001e88 <PCD_EP_ISR_Handler+0x4f4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001dec:	7d7b      	ldrb	r3, [r7, #21]
 8001dee:	015b      	lsls	r3, r3, #5
 8001df0:	3328      	adds	r3, #40	; 0x28
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	4413      	add	r3, r2
 8001df6:	60fb      	str	r3, [r7, #12]

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	7d7b      	ldrb	r3, [r7, #21]
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e10:	b29c      	uxth	r4, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	461a      	mov	r2, r3
 8001e18:	7d7b      	ldrb	r3, [r7, #21]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	441a      	add	r2, r3
 8001e1e:	ea6f 4344 	mvn.w	r3, r4, lsl #17
 8001e22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	8013      	strh	r3, [r2, #0]

        /* multi-packet on the NON control IN endpoint */
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e32:	b29b      	uxth	r3, r3
 8001e34:	461a      	mov	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	4413      	add	r3, r2
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	6812      	ldr	r2, [r2, #0]
 8001e42:	4413      	add	r3, r2
 8001e44:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	695a      	ldr	r2, [r3, #20]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	441a      	add	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	615a      	str	r2, [r3, #20]

        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d106      	bne.n	8001e76 <PCD_EP_ISR_Handler+0x4e2>
        {
          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f004 f966 	bl	8006140 <HAL_PCD_DataInStageCallback>
 8001e74:	e008      	b.n	8001e88 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	7819      	ldrb	r1, [r3, #0]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7ff fca4 	bl	80017d0 <HAL_PCD_EP_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e90:	b29b      	uxth	r3, r3
 8001e92:	b21b      	sxth	r3, r3
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f6ff ad82 	blt.w	800199e <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }
  return HAL_OK;
 8001e9a:	2300      	movs	r3, #0
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3724      	adds	r7, #36	; 0x24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd90      	pop	{r4, r7, pc}
 8001ea4:	ffff8080 	.word	0xffff8080
 8001ea8:	ffff80c0 	.word	0xffff80c0

08001eac <HAL_PCDEx_PMAConfig>:

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd,
                                       uint16_t ep_addr,
                                       uint16_t ep_kind,
                                       uint32_t pmaadress)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	817b      	strh	r3, [r7, #10]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8001ebe:	897b      	ldrh	r3, [r7, #10]
 8001ec0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d008      	beq.n	8001edc <HAL_PCDEx_PMAConfig+0x30>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001eca:	897b      	ldrh	r3, [r7, #10]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	015b      	lsls	r3, r3, #5
 8001ed2:	3328      	adds	r3, #40	; 0x28
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	4413      	add	r3, r2
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	e006      	b.n	8001eea <HAL_PCDEx_PMAConfig+0x3e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001edc:	897b      	ldrh	r3, [r7, #10]
 8001ede:	015b      	lsls	r3, r3, #5
 8001ee0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001ee4:	68fa      	ldr	r2, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001eea:	893b      	ldrh	r3, [r7, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d107      	bne.n	8001f00 <HAL_PCDEx_PMAConfig+0x54>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	b29a      	uxth	r2, r3
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	80da      	strh	r2, [r3, #6]
 8001efe:	e00b      	b.n	8001f18 <HAL_PCDEx_PMAConfig+0x6c>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	2201      	movs	r2, #1
 8001f04:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	0c1b      	lsrs	r3, r3, #16
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr

08001f26 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b085      	sub	sp, #20
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
  hpcd->LPM_State = LPM_L0;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	f043 0302 	orr.w	r3, r3, #2
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
	...

08001f7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d141      	bne.n	800200e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f8a:	4b4b      	ldr	r3, [pc, #300]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f96:	d131      	bne.n	8001ffc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f98:	4b47      	ldr	r3, [pc, #284]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f9e:	4a46      	ldr	r2, [pc, #280]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fa4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fa8:	4b43      	ldr	r3, [pc, #268]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fb0:	4a41      	ldr	r2, [pc, #260]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fb8:	4b40      	ldr	r3, [pc, #256]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2232      	movs	r2, #50	; 0x32
 8001fbe:	fb02 f303 	mul.w	r3, r2, r3
 8001fc2:	4a3f      	ldr	r2, [pc, #252]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc8:	0c9b      	lsrs	r3, r3, #18
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fce:	e002      	b.n	8001fd6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fd6:	4b38      	ldr	r3, [pc, #224]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fe2:	d102      	bne.n	8001fea <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1f2      	bne.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fea:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fec:	695b      	ldr	r3, [r3, #20]
 8001fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff6:	d158      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e057      	b.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ffc:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002002:	4a2d      	ldr	r2, [pc, #180]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002008:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800200c:	e04d      	b.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002014:	d141      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002016:	4b28      	ldr	r3, [pc, #160]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800201e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002022:	d131      	bne.n	8002088 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002024:	4b24      	ldr	r3, [pc, #144]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002026:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800202a:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002030:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002034:	4b20      	ldr	r3, [pc, #128]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800203c:	4a1e      	ldr	r2, [pc, #120]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800203e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002042:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002044:	4b1d      	ldr	r3, [pc, #116]	; (80020bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2232      	movs	r2, #50	; 0x32
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	4a1c      	ldr	r2, [pc, #112]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002050:	fba2 2303 	umull	r2, r3, r2, r3
 8002054:	0c9b      	lsrs	r3, r3, #18
 8002056:	3301      	adds	r3, #1
 8002058:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800205a:	e002      	b.n	8002062 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3b01      	subs	r3, #1
 8002060:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002062:	4b15      	ldr	r3, [pc, #84]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800206a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800206e:	d102      	bne.n	8002076 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f2      	bne.n	800205c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002082:	d112      	bne.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e011      	b.n	80020ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002088:	4b0b      	ldr	r3, [pc, #44]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002090:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002094:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002098:	e007      	b.n	80020aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800209a:	4b07      	ldr	r3, [pc, #28]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020a2:	4a05      	ldr	r2, [pc, #20]	; (80020b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80020aa:	2300      	movs	r3, #0
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3714      	adds	r7, #20
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	40007000 	.word	0x40007000
 80020bc:	2000006c 	.word	0x2000006c
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d101      	bne.n	80020d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e308      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0301 	and.w	r3, r3, #1
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d075      	beq.n	80021ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e2:	4ba3      	ldr	r3, [pc, #652]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ec:	4ba0      	ldr	r3, [pc, #640]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b0c      	cmp	r3, #12
 80020fa:	d102      	bne.n	8002102 <HAL_RCC_OscConfig+0x3e>
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d002      	beq.n	8002108 <HAL_RCC_OscConfig+0x44>
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	2b08      	cmp	r3, #8
 8002106:	d10b      	bne.n	8002120 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002108:	4b99      	ldr	r3, [pc, #612]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d05b      	beq.n	80021cc <HAL_RCC_OscConfig+0x108>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d157      	bne.n	80021cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e2e3      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d106      	bne.n	8002138 <HAL_RCC_OscConfig+0x74>
 800212a:	4b91      	ldr	r3, [pc, #580]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a90      	ldr	r2, [pc, #576]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e01d      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002140:	d10c      	bne.n	800215c <HAL_RCC_OscConfig+0x98>
 8002142:	4b8b      	ldr	r3, [pc, #556]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a8a      	ldr	r2, [pc, #552]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002148:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	4b88      	ldr	r3, [pc, #544]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a87      	ldr	r2, [pc, #540]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002158:	6013      	str	r3, [r2, #0]
 800215a:	e00b      	b.n	8002174 <HAL_RCC_OscConfig+0xb0>
 800215c:	4b84      	ldr	r3, [pc, #528]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a83      	ldr	r2, [pc, #524]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	6013      	str	r3, [r2, #0]
 8002168:	4b81      	ldr	r3, [pc, #516]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a80      	ldr	r2, [pc, #512]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800216e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002172:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d013      	beq.n	80021a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7fe f8b0 	bl	80002e0 <HAL_GetTick>
 8002180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002184:	f7fe f8ac 	bl	80002e0 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e2a8      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002196:	4b76      	ldr	r3, [pc, #472]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0xc0>
 80021a2:	e014      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7fe f89c 	bl	80002e0 <HAL_GetTick>
 80021a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021aa:	e008      	b.n	80021be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021ac:	f7fe f898 	bl	80002e0 <HAL_GetTick>
 80021b0:	4602      	mov	r2, r0
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	1ad3      	subs	r3, r2, r3
 80021b6:	2b64      	cmp	r3, #100	; 0x64
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e294      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021be:	4b6c      	ldr	r3, [pc, #432]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1f0      	bne.n	80021ac <HAL_RCC_OscConfig+0xe8>
 80021ca:	e000      	b.n	80021ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d075      	beq.n	80022c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021da:	4b65      	ldr	r3, [pc, #404]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e4:	4b62      	ldr	r3, [pc, #392]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b0c      	cmp	r3, #12
 80021f2:	d102      	bne.n	80021fa <HAL_RCC_OscConfig+0x136>
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d002      	beq.n	8002200 <HAL_RCC_OscConfig+0x13c>
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b04      	cmp	r3, #4
 80021fe:	d11f      	bne.n	8002240 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002200:	4b5b      	ldr	r3, [pc, #364]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_OscConfig+0x154>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e267      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002218:	4b55      	ldr	r3, [pc, #340]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	061b      	lsls	r3, r3, #24
 8002226:	4952      	ldr	r1, [pc, #328]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800222c:	4b51      	ldr	r3, [pc, #324]	; (8002374 <HAL_RCC_OscConfig+0x2b0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f7fe f809 	bl	8000248 <HAL_InitTick>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d043      	beq.n	80022c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e253      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d023      	beq.n	8002290 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002248:	4b49      	ldr	r3, [pc, #292]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a48      	ldr	r2, [pc, #288]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800224e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002252:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe f844 	bl	80002e0 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225c:	f7fe f840 	bl	80002e0 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e23c      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226e:	4b40      	ldr	r3, [pc, #256]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0f0      	beq.n	800225c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227a:	4b3d      	ldr	r3, [pc, #244]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	691b      	ldr	r3, [r3, #16]
 8002286:	061b      	lsls	r3, r3, #24
 8002288:	4939      	ldr	r1, [pc, #228]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
 800228e:	e01a      	b.n	80022c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002290:	4b37      	ldr	r3, [pc, #220]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a36      	ldr	r2, [pc, #216]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800229a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe f820 	bl	80002e0 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022a4:	f7fe f81c 	bl	80002e0 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e218      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b6:	4b2e      	ldr	r3, [pc, #184]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0x1e0>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d03c      	beq.n	800234c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	695b      	ldr	r3, [r3, #20]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d01c      	beq.n	8002314 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022da:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e0:	4a23      	ldr	r2, [pc, #140]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	f043 0301 	orr.w	r3, r3, #1
 80022e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ea:	f7fd fff9 	bl	80002e0 <HAL_GetTick>
 80022ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f0:	e008      	b.n	8002304 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f2:	f7fd fff5 	bl	80002e0 <HAL_GetTick>
 80022f6:	4602      	mov	r2, r0
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d901      	bls.n	8002304 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002300:	2303      	movs	r3, #3
 8002302:	e1f1      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002304:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002306:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0ef      	beq.n	80022f2 <HAL_RCC_OscConfig+0x22e>
 8002312:	e01b      	b.n	800234c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002314:	4b16      	ldr	r3, [pc, #88]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231a:	4a15      	ldr	r2, [pc, #84]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	f023 0301 	bic.w	r3, r3, #1
 8002320:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002324:	f7fd ffdc 	bl	80002e0 <HAL_GetTick>
 8002328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232c:	f7fd ffd8 	bl	80002e0 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b02      	cmp	r3, #2
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e1d4      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d1ef      	bne.n	800232c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0304 	and.w	r3, r3, #4
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80ab 	beq.w	80024b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235a:	2300      	movs	r3, #0
 800235c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002362:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d106      	bne.n	8002378 <HAL_RCC_OscConfig+0x2b4>
 800236a:	2301      	movs	r3, #1
 800236c:	e005      	b.n	800237a <HAL_RCC_OscConfig+0x2b6>
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000
 8002374:	20000000 	.word	0x20000000
 8002378:	2300      	movs	r3, #0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00d      	beq.n	800239a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237e:	4baf      	ldr	r3, [pc, #700]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	4aae      	ldr	r2, [pc, #696]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002388:	6593      	str	r3, [r2, #88]	; 0x58
 800238a:	4bac      	ldr	r3, [pc, #688]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800238c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002396:	2301      	movs	r3, #1
 8002398:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800239a:	4ba9      	ldr	r3, [pc, #676]	; (8002640 <HAL_RCC_OscConfig+0x57c>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d118      	bne.n	80023d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023a6:	4ba6      	ldr	r3, [pc, #664]	; (8002640 <HAL_RCC_OscConfig+0x57c>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4aa5      	ldr	r2, [pc, #660]	; (8002640 <HAL_RCC_OscConfig+0x57c>)
 80023ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023b2:	f7fd ff95 	bl	80002e0 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023b8:	e008      	b.n	80023cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ba:	f7fd ff91 	bl	80002e0 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d901      	bls.n	80023cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023c8:	2303      	movs	r3, #3
 80023ca:	e18d      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023cc:	4b9c      	ldr	r3, [pc, #624]	; (8002640 <HAL_RCC_OscConfig+0x57c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d0f0      	beq.n	80023ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <HAL_RCC_OscConfig+0x32e>
 80023e0:	4b96      	ldr	r3, [pc, #600]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80023e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e6:	4a95      	ldr	r2, [pc, #596]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f0:	e024      	b.n	800243c <HAL_RCC_OscConfig+0x378>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b05      	cmp	r3, #5
 80023f8:	d110      	bne.n	800241c <HAL_RCC_OscConfig+0x358>
 80023fa:	4b90      	ldr	r3, [pc, #576]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	4a8e      	ldr	r2, [pc, #568]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002402:	f043 0304 	orr.w	r3, r3, #4
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240a:	4b8c      	ldr	r3, [pc, #560]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	4a8a      	ldr	r2, [pc, #552]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002412:	f043 0301 	orr.w	r3, r3, #1
 8002416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800241a:	e00f      	b.n	800243c <HAL_RCC_OscConfig+0x378>
 800241c:	4b87      	ldr	r3, [pc, #540]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800241e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002422:	4a86      	ldr	r2, [pc, #536]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002424:	f023 0301 	bic.w	r3, r3, #1
 8002428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800242c:	4b83      	ldr	r3, [pc, #524]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002432:	4a82      	ldr	r2, [pc, #520]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002434:	f023 0304 	bic.w	r3, r3, #4
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d016      	beq.n	8002472 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002444:	f7fd ff4c 	bl	80002e0 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244a:	e00a      	b.n	8002462 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7fd ff48 	bl	80002e0 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	f241 3288 	movw	r2, #5000	; 0x1388
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e142      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d0ed      	beq.n	800244c <HAL_RCC_OscConfig+0x388>
 8002470:	e015      	b.n	800249e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002472:	f7fd ff35 	bl	80002e0 <HAL_GetTick>
 8002476:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002478:	e00a      	b.n	8002490 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247a:	f7fd ff31 	bl	80002e0 <HAL_GetTick>
 800247e:	4602      	mov	r2, r0
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	f241 3288 	movw	r2, #5000	; 0x1388
 8002488:	4293      	cmp	r3, r2
 800248a:	d901      	bls.n	8002490 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e12b      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002490:	4b6a      	ldr	r3, [pc, #424]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1ed      	bne.n	800247a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800249e:	7ffb      	ldrb	r3, [r7, #31]
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d105      	bne.n	80024b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024a4:	4b65      	ldr	r3, [pc, #404]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	4a64      	ldr	r2, [pc, #400]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80024aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0320 	and.w	r3, r3, #32
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d03c      	beq.n	8002536 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01c      	beq.n	80024fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024c4:	4b5d      	ldr	r3, [pc, #372]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80024c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ca:	4a5c      	ldr	r2, [pc, #368]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d4:	f7fd ff04 	bl	80002e0 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024da:	e008      	b.n	80024ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024dc:	f7fd ff00 	bl	80002e0 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e0fc      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ee:	4b53      	ldr	r3, [pc, #332]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80024f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0ef      	beq.n	80024dc <HAL_RCC_OscConfig+0x418>
 80024fc:	e01b      	b.n	8002536 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024fe:	4b4f      	ldr	r3, [pc, #316]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002500:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002504:	4a4d      	ldr	r2, [pc, #308]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250e:	f7fd fee7 	bl	80002e0 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002516:	f7fd fee3 	bl	80002e0 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e0df      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002528:	4b44      	ldr	r3, [pc, #272]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800252a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1ef      	bne.n	8002516 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69db      	ldr	r3, [r3, #28]
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80d3 	beq.w	80026e6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002540:	4b3e      	ldr	r3, [pc, #248]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b0c      	cmp	r3, #12
 800254a:	f000 808d 	beq.w	8002668 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69db      	ldr	r3, [r3, #28]
 8002552:	2b02      	cmp	r3, #2
 8002554:	d15a      	bne.n	800260c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002556:	4b39      	ldr	r3, [pc, #228]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a38      	ldr	r2, [pc, #224]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800255c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fd febd 	bl	80002e0 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800256a:	f7fd feb9 	bl	80002e0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e0b5      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257c:	4b2f      	ldr	r3, [pc, #188]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f0      	bne.n	800256a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002588:	4b2c      	ldr	r3, [pc, #176]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	4b2d      	ldr	r3, [pc, #180]	; (8002644 <HAL_RCC_OscConfig+0x580>)
 800258e:	4013      	ands	r3, r2
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6a11      	ldr	r1, [r2, #32]
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002598:	3a01      	subs	r2, #1
 800259a:	0112      	lsls	r2, r2, #4
 800259c:	4311      	orrs	r1, r2
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80025a2:	0212      	lsls	r2, r2, #8
 80025a4:	4311      	orrs	r1, r2
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025aa:	0852      	lsrs	r2, r2, #1
 80025ac:	3a01      	subs	r2, #1
 80025ae:	0552      	lsls	r2, r2, #21
 80025b0:	4311      	orrs	r1, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b6:	0852      	lsrs	r2, r2, #1
 80025b8:	3a01      	subs	r2, #1
 80025ba:	0652      	lsls	r2, r2, #25
 80025bc:	4311      	orrs	r1, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025c2:	06d2      	lsls	r2, r2, #27
 80025c4:	430a      	orrs	r2, r1
 80025c6:	491d      	ldr	r1, [pc, #116]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025cc:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a1a      	ldr	r2, [pc, #104]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80025d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d8:	4b18      	ldr	r3, [pc, #96]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	4a17      	ldr	r2, [pc, #92]	; (800263c <HAL_RCC_OscConfig+0x578>)
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fd fe7c 	bl	80002e0 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fd fe78 	bl	80002e0 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e074      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fe:	4b0f      	ldr	r3, [pc, #60]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x528>
 800260a:	e06c      	b.n	80026e6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0a      	ldr	r2, [pc, #40]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002618:	4b08      	ldr	r3, [pc, #32]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a07      	ldr	r2, [pc, #28]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002624:	4b05      	ldr	r3, [pc, #20]	; (800263c <HAL_RCC_OscConfig+0x578>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a04      	ldr	r2, [pc, #16]	; (800263c <HAL_RCC_OscConfig+0x578>)
 800262a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800262e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002632:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fd fe54 	bl	80002e0 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800263a:	e00e      	b.n	800265a <HAL_RCC_OscConfig+0x596>
 800263c:	40021000 	.word	0x40021000
 8002640:	40007000 	.word	0x40007000
 8002644:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002648:	f7fd fe4a 	bl	80002e0 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b02      	cmp	r3, #2
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e046      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265a:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <HAL_RCC_OscConfig+0x62c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x584>
 8002666:	e03e      	b.n	80026e6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	69db      	ldr	r3, [r3, #28]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d101      	bne.n	8002674 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e039      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002674:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCC_OscConfig+0x62c>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	429a      	cmp	r2, r3
 8002686:	d12c      	bne.n	80026e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002692:	3b01      	subs	r3, #1
 8002694:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d123      	bne.n	80026e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d11b      	bne.n	80026e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d113      	bne.n	80026e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c4:	085b      	lsrs	r3, r3, #1
 80026c6:	3b01      	subs	r3, #1
 80026c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d109      	bne.n	80026e2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026d8:	085b      	lsrs	r3, r3, #1
 80026da:	3b01      	subs	r3, #1
 80026dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000

080026f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b086      	sub	sp, #24
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e11e      	b.n	800294a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b91      	ldr	r3, [pc, #580]	; (8002954 <HAL_RCC_ClockConfig+0x260>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d910      	bls.n	800273c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b8e      	ldr	r3, [pc, #568]	; (8002954 <HAL_RCC_ClockConfig+0x260>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 020f 	bic.w	r2, r3, #15
 8002722:	498c      	ldr	r1, [pc, #560]	; (8002954 <HAL_RCC_ClockConfig+0x260>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b8a      	ldr	r3, [pc, #552]	; (8002954 <HAL_RCC_ClockConfig+0x260>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e106      	b.n	800294a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d073      	beq.n	8002830 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b03      	cmp	r3, #3
 800274e:	d129      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002750:	4b81      	ldr	r3, [pc, #516]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0f4      	b.n	800294a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002760:	f000 f966 	bl	8002a30 <RCC_GetSysClockFreqFromPLLSource>
 8002764:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4a7c      	ldr	r2, [pc, #496]	; (800295c <HAL_RCC_ClockConfig+0x268>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d93f      	bls.n	80027ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800276e:	4b7a      	ldr	r3, [pc, #488]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d009      	beq.n	800278e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002782:	2b00      	cmp	r3, #0
 8002784:	d033      	beq.n	80027ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800278a:	2b00      	cmp	r3, #0
 800278c:	d12f      	bne.n	80027ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800278e:	4b72      	ldr	r3, [pc, #456]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002796:	4a70      	ldr	r2, [pc, #448]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800279c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800279e:	2380      	movs	r3, #128	; 0x80
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e024      	b.n	80027ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d107      	bne.n	80027bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ac:	4b6a      	ldr	r3, [pc, #424]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d109      	bne.n	80027cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e0c6      	b.n	800294a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e0be      	b.n	800294a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027cc:	f000 f8ce 	bl	800296c <HAL_RCC_GetSysClockFreq>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	4a61      	ldr	r2, [pc, #388]	; (800295c <HAL_RCC_ClockConfig+0x268>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d909      	bls.n	80027ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027da:	4b5f      	ldr	r3, [pc, #380]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027e2:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 80027e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ee:	4b5a      	ldr	r3, [pc, #360]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f023 0203 	bic.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	4957      	ldr	r1, [pc, #348]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002800:	f7fd fd6e 	bl	80002e0 <HAL_GetTick>
 8002804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	e00a      	b.n	800281e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002808:	f7fd fd6a 	bl	80002e0 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	f241 3288 	movw	r2, #5000	; 0x1388
 8002816:	4293      	cmp	r3, r2
 8002818:	d901      	bls.n	800281e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e095      	b.n	800294a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	4b4e      	ldr	r3, [pc, #312]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 020c 	and.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	429a      	cmp	r2, r3
 800282e:	d1eb      	bne.n	8002808 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d023      	beq.n	8002884 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002848:	4b43      	ldr	r3, [pc, #268]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a42      	ldr	r2, [pc, #264]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 800284e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002852:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d007      	beq.n	8002870 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002860:	4b3d      	ldr	r3, [pc, #244]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002868:	4a3b      	ldr	r2, [pc, #236]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 800286a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800286e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	4b39      	ldr	r3, [pc, #228]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	4936      	ldr	r1, [pc, #216]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
 8002882:	e008      	b.n	8002896 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b80      	cmp	r3, #128	; 0x80
 8002888:	d105      	bne.n	8002896 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800288a:	4b33      	ldr	r3, [pc, #204]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	4a32      	ldr	r2, [pc, #200]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002890:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002894:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002896:	4b2f      	ldr	r3, [pc, #188]	; (8002954 <HAL_RCC_ClockConfig+0x260>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	683a      	ldr	r2, [r7, #0]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d21d      	bcs.n	80028e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <HAL_RCC_ClockConfig+0x260>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f023 020f 	bic.w	r2, r3, #15
 80028ac:	4929      	ldr	r1, [pc, #164]	; (8002954 <HAL_RCC_ClockConfig+0x260>)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028b4:	f7fd fd14 	bl	80002e0 <HAL_GetTick>
 80028b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	e00a      	b.n	80028d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028bc:	f7fd fd10 	bl	80002e0 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e03b      	b.n	800294a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d2:	4b20      	ldr	r3, [pc, #128]	; (8002954 <HAL_RCC_ClockConfig+0x260>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 030f 	and.w	r3, r3, #15
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d1ed      	bne.n	80028bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 0304 	and.w	r3, r3, #4
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d008      	beq.n	80028fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ec:	4b1a      	ldr	r3, [pc, #104]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	4917      	ldr	r1, [pc, #92]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0308 	and.w	r3, r3, #8
 8002906:	2b00      	cmp	r3, #0
 8002908:	d009      	beq.n	800291e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290a:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	490f      	ldr	r1, [pc, #60]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800291e:	f000 f825 	bl	800296c <HAL_RCC_GetSysClockFreq>
 8002922:	4601      	mov	r1, r0
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <HAL_RCC_ClockConfig+0x264>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <HAL_RCC_ClockConfig+0x26c>)
 8002930:	5cd3      	ldrb	r3, [r2, r3]
 8002932:	f003 031f 	and.w	r3, r3, #31
 8002936:	fa21 f303 	lsr.w	r3, r1, r3
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <HAL_RCC_ClockConfig+0x270>)
 800293c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800293e:	4b0a      	ldr	r3, [pc, #40]	; (8002968 <HAL_RCC_ClockConfig+0x274>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fc80 	bl	8000248 <HAL_InitTick>
 8002948:	4603      	mov	r3, r0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40022000 	.word	0x40022000
 8002958:	40021000 	.word	0x40021000
 800295c:	04c4b400 	.word	0x04c4b400
 8002960:	080069b0 	.word	0x080069b0
 8002964:	2000006c 	.word	0x2000006c
 8002968:	20000000 	.word	0x20000000

0800296c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800296c:	b480      	push	{r7}
 800296e:	b087      	sub	sp, #28
 8002970:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002972:	4b2c      	ldr	r3, [pc, #176]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 030c 	and.w	r3, r3, #12
 800297a:	2b04      	cmp	r3, #4
 800297c:	d102      	bne.n	8002984 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800297e:	4b2a      	ldr	r3, [pc, #168]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	e047      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002984:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
 800298c:	2b08      	cmp	r3, #8
 800298e:	d102      	bne.n	8002996 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002990:	4b26      	ldr	r3, [pc, #152]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	e03e      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
 800299e:	2b0c      	cmp	r3, #12
 80029a0:	d136      	bne.n	8002a10 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029a2:	4b20      	ldr	r3, [pc, #128]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	091b      	lsrs	r3, r3, #4
 80029b2:	f003 030f 	and.w	r3, r3, #15
 80029b6:	3301      	adds	r3, #1
 80029b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2b03      	cmp	r3, #3
 80029be:	d10c      	bne.n	80029da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029c0:	4a1a      	ldr	r2, [pc, #104]	; (8002a2c <HAL_RCC_GetSysClockFreq+0xc0>)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c8:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ca:	68d2      	ldr	r2, [r2, #12]
 80029cc:	0a12      	lsrs	r2, r2, #8
 80029ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029d2:	fb02 f303 	mul.w	r3, r2, r3
 80029d6:	617b      	str	r3, [r7, #20]
      break;
 80029d8:	e00c      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029da:	4a13      	ldr	r2, [pc, #76]	; (8002a28 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4a10      	ldr	r2, [pc, #64]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e4:	68d2      	ldr	r2, [r2, #12]
 80029e6:	0a12      	lsrs	r2, r2, #8
 80029e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029ec:	fb02 f303 	mul.w	r3, r2, r3
 80029f0:	617b      	str	r3, [r7, #20]
      break;
 80029f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	0e5b      	lsrs	r3, r3, #25
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	e001      	b.n	8002a14 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a14:	693b      	ldr	r3, [r7, #16]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	007a1200 	.word	0x007a1200

08002a30 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b087      	sub	sp, #28
 8002a34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a36:	4b1e      	ldr	r3, [pc, #120]	; (8002ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a40:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d10c      	bne.n	8002a6e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a54:	4a17      	ldr	r2, [pc, #92]	; (8002ab4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a5c:	4a14      	ldr	r2, [pc, #80]	; (8002ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a5e:	68d2      	ldr	r2, [r2, #12]
 8002a60:	0a12      	lsrs	r2, r2, #8
 8002a62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a66:	fb02 f303 	mul.w	r3, r2, r3
 8002a6a:	617b      	str	r3, [r7, #20]
    break;
 8002a6c:	e00c      	b.n	8002a88 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a76:	4a0e      	ldr	r2, [pc, #56]	; (8002ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a78:	68d2      	ldr	r2, [r2, #12]
 8002a7a:	0a12      	lsrs	r2, r2, #8
 8002a7c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a80:	fb02 f303 	mul.w	r3, r2, r3
 8002a84:	617b      	str	r3, [r7, #20]
    break;
 8002a86:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a88:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0e5b      	lsrs	r3, r3, #25
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	3301      	adds	r3, #1
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002aa2:	687b      	ldr	r3, [r7, #4]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	007a1200 	.word	0x007a1200
 8002ab8:	00f42400 	.word	0x00f42400

08002abc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b086      	sub	sp, #24
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ac8:	2300      	movs	r3, #0
 8002aca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8098 	beq.w	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ada:	2300      	movs	r3, #0
 8002adc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ade:	4b43      	ldr	r3, [pc, #268]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10d      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aea:	4b40      	ldr	r3, [pc, #256]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aee:	4a3f      	ldr	r2, [pc, #252]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6593      	str	r3, [r2, #88]	; 0x58
 8002af6:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b02:	2301      	movs	r3, #1
 8002b04:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b06:	4b3a      	ldr	r3, [pc, #232]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a39      	ldr	r2, [pc, #228]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b12:	f7fd fbe5 	bl	80002e0 <HAL_GetTick>
 8002b16:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b18:	e009      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f7fd fbe1 	bl	80002e0 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d902      	bls.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	74fb      	strb	r3, [r7, #19]
        break;
 8002b2c:	e005      	b.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b2e:	4b30      	ldr	r3, [pc, #192]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d0ef      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b3a:	7cfb      	ldrb	r3, [r7, #19]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d159      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b40:	4b2a      	ldr	r3, [pc, #168]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d01e      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d019      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b5c:	4b23      	ldr	r3, [pc, #140]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b66:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b68:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6e:	4a1f      	ldr	r2, [pc, #124]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b78:	4b1c      	ldr	r3, [pc, #112]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b7e:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b88:	4a18      	ldr	r2, [pc, #96]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fd fba1 	bl	80002e0 <HAL_GetTick>
 8002b9e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba0:	e00b      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba2:	f7fd fb9d 	bl	80002e0 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d902      	bls.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	74fb      	strb	r3, [r7, #19]
            break;
 8002bb8:	e006      	b.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	f003 0302 	and.w	r3, r3, #2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d0ec      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002bc8:	7cfb      	ldrb	r3, [r7, #19]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bce:	4b07      	ldr	r3, [pc, #28]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bdc:	4903      	ldr	r1, [pc, #12]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002be4:	e008      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002be6:	7cfb      	ldrb	r3, [r7, #19]
 8002be8:	74bb      	strb	r3, [r7, #18]
 8002bea:	e005      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002bec:	40021000 	.word	0x40021000
 8002bf0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bf8:	7c7b      	ldrb	r3, [r7, #17]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d105      	bne.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bfe:	4ba6      	ldr	r3, [pc, #664]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c02:	4aa5      	ldr	r2, [pc, #660]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c08:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d00a      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c16:	4ba0      	ldr	r3, [pc, #640]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1c:	f023 0203 	bic.w	r2, r3, #3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	499c      	ldr	r1, [pc, #624]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00a      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c38:	4b97      	ldr	r3, [pc, #604]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f023 020c 	bic.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	4994      	ldr	r1, [pc, #592]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0304 	and.w	r3, r3, #4
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00a      	beq.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c5a:	4b8f      	ldr	r3, [pc, #572]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c60:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	498b      	ldr	r1, [pc, #556]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c7c:	4b86      	ldr	r3, [pc, #536]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	4983      	ldr	r1, [pc, #524]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0320 	and.w	r3, r3, #32
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00a      	beq.n	8002cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c9e:	4b7e      	ldr	r3, [pc, #504]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ca4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	695b      	ldr	r3, [r3, #20]
 8002cac:	497a      	ldr	r1, [pc, #488]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d00a      	beq.n	8002cd6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cc0:	4b75      	ldr	r3, [pc, #468]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	4972      	ldr	r1, [pc, #456]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cd0:	4313      	orrs	r3, r2
 8002cd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00a      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002ce2:	4b6d      	ldr	r3, [pc, #436]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	4969      	ldr	r1, [pc, #420]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d00a      	beq.n	8002d1a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d04:	4b64      	ldr	r3, [pc, #400]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a1b      	ldr	r3, [r3, #32]
 8002d12:	4961      	ldr	r1, [pc, #388]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d00a      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d26:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	4958      	ldr	r1, [pc, #352]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d015      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d48:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	4950      	ldr	r1, [pc, #320]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d66:	d105      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d68:	4b4b      	ldr	r3, [pc, #300]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	4a4a      	ldr	r2, [pc, #296]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d72:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d015      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d80:	4b45      	ldr	r3, [pc, #276]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8e:	4942      	ldr	r1, [pc, #264]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9e:	d105      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002da0:	4b3d      	ldr	r3, [pc, #244]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4a3c      	ldr	r2, [pc, #240]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002da6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002daa:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d015      	beq.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002db8:	4b37      	ldr	r3, [pc, #220]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4934      	ldr	r1, [pc, #208]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd6:	d105      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	4a2e      	ldr	r2, [pc, #184]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d015      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002df0:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	4926      	ldr	r1, [pc, #152]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e0e:	d105      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e10:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	4a20      	ldr	r2, [pc, #128]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e1a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d015      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e28:	4b1b      	ldr	r3, [pc, #108]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e36:	4918      	ldr	r1, [pc, #96]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e42:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e46:	d105      	bne.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e48:	4b13      	ldr	r3, [pc, #76]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a12      	ldr	r2, [pc, #72]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d015      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e60:	4b0d      	ldr	r3, [pc, #52]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	490a      	ldr	r1, [pc, #40]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e70:	4313      	orrs	r3, r2
 8002e72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e7e:	d105      	bne.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002e8c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40021000 	.word	0x40021000

08002e9c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8002ea4:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <HAL_RCCEx_CRSConfig+0x7c>)
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <HAL_RCCEx_CRSConfig+0x7c>)
 8002eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eae:	6393      	str	r3, [r2, #56]	; 0x38
  __HAL_RCC_CRS_RELEASE_RESET();
 8002eb0:	4b19      	ldr	r3, [pc, #100]	; (8002f18 <HAL_RCCEx_CRSConfig+0x7c>)
 8002eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb4:	4a18      	ldr	r2, [pc, #96]	; (8002f18 <HAL_RCCEx_CRSConfig+0x7c>)
 8002eb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eba:	6393      	str	r3, [r2, #56]	; 0x38

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	041b      	lsls	r3, r3, #16
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 8002ee4:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <HAL_RCCEx_CRSConfig+0x80>)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[6:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 8002eea:	4b0c      	ldr	r3, [pc, #48]	; (8002f1c <HAL_RCCEx_CRSConfig+0x80>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	4908      	ldr	r1, [pc, #32]	; (8002f1c <HAL_RCCEx_CRSConfig+0x80>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 8002efe:	4b07      	ldr	r3, [pc, #28]	; (8002f1c <HAL_RCCEx_CRSConfig+0x80>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a06      	ldr	r2, [pc, #24]	; (8002f1c <HAL_RCCEx_CRSConfig+0x80>)
 8002f04:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002f08:	6013      	str	r3, [r2, #0]
}
 8002f0a:	bf00      	nop
 8002f0c:	3714      	adds	r7, #20
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	40021000 	.word	0x40021000
 8002f1c:	40002000 	.word	0x40002000

08002f20 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f28:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002f2c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR |= (uint16_t)winterruptmask;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx : Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b085      	sub	sp, #20
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8002f5a:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8002f5e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	4013      	ands	r3, r2
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f7a:	2300      	movs	r3, #0
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3714      	adds	r7, #20
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002f88:	b084      	sub	sp, #16
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b082      	sub	sp, #8
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	6078      	str	r0, [r7, #4]
 8002f92:	f107 0014 	add.w	r0, r7, #20
 8002f96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /*CNTR_FRES = 1*/
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*CNTR_FRES = 0*/
  USBx->CNTR = 0U;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /*Clear pending interrupts*/
  USBx->ISTR = 0U;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  /* Enable USB Device Interrupt mask */
  (void)USB_EnableGlobalInt(USBx);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f7ff ffb0 	bl	8002f20 <USB_EnableGlobalInt>

  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002fcc:	b004      	add	sp, #16
 8002fce:	4770      	bx	lr

08002fd0 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002fd0:	b490      	push	{r4, r7}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	73fb      	strb	r3, [r7, #15]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	4413      	add	r3, r2
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8002ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ff4:	81bb      	strh	r3, [r7, #12]

  /* initialize Endpoint */
  switch (ep->type)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	78db      	ldrb	r3, [r3, #3]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d819      	bhi.n	8003032 <USB_ActivateEndpoint+0x62>
 8002ffe:	a201      	add	r2, pc, #4	; (adr r2, 8003004 <USB_ActivateEndpoint+0x34>)
 8003000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003004:	08003015 	.word	0x08003015
 8003008:	08003029 	.word	0x08003029
 800300c:	08003039 	.word	0x08003039
 8003010:	0800301f 	.word	0x0800301f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003014:	89bb      	ldrh	r3, [r7, #12]
 8003016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800301a:	81bb      	strh	r3, [r7, #12]
      break;
 800301c:	e00d      	b.n	800303a <USB_ActivateEndpoint+0x6a>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800301e:	89bb      	ldrh	r3, [r7, #12]
 8003020:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003024:	81bb      	strh	r3, [r7, #12]
      break;
 8003026:	e008      	b.n	800303a <USB_ActivateEndpoint+0x6a>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003028:	89bb      	ldrh	r3, [r7, #12]
 800302a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800302e:	81bb      	strh	r3, [r7, #12]
      break;
 8003030:	e003      	b.n	800303a <USB_ActivateEndpoint+0x6a>

    default:
      ret = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	73fb      	strb	r3, [r7, #15]
      break;
 8003036:	e000      	b.n	800303a <USB_ActivateEndpoint+0x6a>
      break;
 8003038:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	441a      	add	r2, r3
 8003044:	89bb      	ldrh	r3, [r7, #12]
 8003046:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800304a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800304e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003056:	b29b      	uxth	r3, r3
 8003058:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	b29b      	uxth	r3, r3
 8003068:	b21b      	sxth	r3, r3
 800306a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800306e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003072:	b21a      	sxth	r2, r3
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	b21b      	sxth	r3, r3
 800307a:	4313      	orrs	r3, r2
 800307c:	b21b      	sxth	r3, r3
 800307e:	b29c      	uxth	r4, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	441a      	add	r2, r3
 800308a:	4b8a      	ldr	r3, [pc, #552]	; (80032b4 <USB_ActivateEndpoint+0x2e4>)
 800308c:	4323      	orrs	r3, r4
 800308e:	b29b      	uxth	r3, r3
 8003090:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	7b1b      	ldrb	r3, [r3, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 8112 	bne.w	80032c0 <USB_ActivateEndpoint+0x2f0>
  {
    if (ep->is_in != 0U)
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	785b      	ldrb	r3, [r3, #1]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d067      	beq.n	8003174 <USB_ActivateEndpoint+0x1a4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80030a4:	687c      	ldr	r4, [r7, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ac:	b29b      	uxth	r3, r3
 80030ae:	441c      	add	r4, r3
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4423      	add	r3, r4
 80030b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80030bc:	461c      	mov	r4, r3
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	88db      	ldrh	r3, [r3, #6]
 80030c2:	085b      	lsrs	r3, r3, #1
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	881b      	ldrh	r3, [r3, #0]
 80030d8:	b29c      	uxth	r4, r3
 80030da:	4623      	mov	r3, r4
 80030dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d014      	beq.n	800310e <USB_ActivateEndpoint+0x13e>
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	4413      	add	r3, r2
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	b29c      	uxth	r4, r3
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	441a      	add	r2, r3
 8003106:	4b6c      	ldr	r3, [pc, #432]	; (80032b8 <USB_ActivateEndpoint+0x2e8>)
 8003108:	4323      	orrs	r3, r4
 800310a:	b29b      	uxth	r3, r3
 800310c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	78db      	ldrb	r3, [r3, #3]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d018      	beq.n	8003148 <USB_ActivateEndpoint+0x178>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4413      	add	r3, r2
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29b      	uxth	r3, r3
 8003124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800312c:	b29c      	uxth	r4, r3
 800312e:	f084 0320 	eor.w	r3, r4, #32
 8003132:	b29c      	uxth	r4, r3
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	441a      	add	r2, r3
 800313e:	4b5d      	ldr	r3, [pc, #372]	; (80032b4 <USB_ActivateEndpoint+0x2e4>)
 8003140:	4323      	orrs	r3, r4
 8003142:	b29b      	uxth	r3, r3
 8003144:	8013      	strh	r3, [r2, #0]
 8003146:	e22b      	b.n	80035a0 <USB_ActivateEndpoint+0x5d0>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	b29b      	uxth	r3, r3
 8003156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800315a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800315e:	b29c      	uxth	r4, r3
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	441a      	add	r2, r3
 800316a:	4b52      	ldr	r3, [pc, #328]	; (80032b4 <USB_ActivateEndpoint+0x2e4>)
 800316c:	4323      	orrs	r3, r4
 800316e:	b29b      	uxth	r3, r3
 8003170:	8013      	strh	r3, [r2, #0]
 8003172:	e215      	b.n	80035a0 <USB_ActivateEndpoint+0x5d0>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003174:	687c      	ldr	r4, [r7, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317c:	b29b      	uxth	r3, r3
 800317e:	441c      	add	r4, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	4423      	add	r3, r4
 8003188:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800318c:	461c      	mov	r4, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	88db      	ldrh	r3, [r3, #6]
 8003192:	085b      	lsrs	r3, r3, #1
 8003194:	b29b      	uxth	r3, r3
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	b29b      	uxth	r3, r3
 800319a:	8023      	strh	r3, [r4, #0]
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800319c:	687c      	ldr	r4, [r7, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	441c      	add	r4, r3
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	00db      	lsls	r3, r3, #3
 80031ae:	4423      	add	r3, r4
 80031b0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031b4:	461c      	mov	r4, r3
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10e      	bne.n	80031dc <USB_ActivateEndpoint+0x20c>
 80031be:	8823      	ldrh	r3, [r4, #0]
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	8023      	strh	r3, [r4, #0]
 80031ca:	8823      	ldrh	r3, [r4, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	8023      	strh	r3, [r4, #0]
 80031da:	e02d      	b.n	8003238 <USB_ActivateEndpoint+0x268>
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b3e      	cmp	r3, #62	; 0x3e
 80031e2:	d812      	bhi.n	800320a <USB_ActivateEndpoint+0x23a>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	085b      	lsrs	r3, r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d002      	beq.n	80031fe <USB_ActivateEndpoint+0x22e>
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	b29b      	uxth	r3, r3
 8003202:	029b      	lsls	r3, r3, #10
 8003204:	b29b      	uxth	r3, r3
 8003206:	8023      	strh	r3, [r4, #0]
 8003208:	e016      	b.n	8003238 <USB_ActivateEndpoint+0x268>
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	60bb      	str	r3, [r7, #8]
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f003 031f 	and.w	r3, r3, #31
 800321a:	2b00      	cmp	r3, #0
 800321c:	d102      	bne.n	8003224 <USB_ActivateEndpoint+0x254>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	3b01      	subs	r3, #1
 8003222:	60bb      	str	r3, [r7, #8]
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	b29b      	uxth	r3, r3
 8003228:	029b      	lsls	r3, r3, #10
 800322a:	b29b      	uxth	r3, r3
 800322c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003230:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003234:	b29b      	uxth	r3, r3
 8003236:	8023      	strh	r3, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	881b      	ldrh	r3, [r3, #0]
 8003244:	b29c      	uxth	r4, r3
 8003246:	4623      	mov	r3, r4
 8003248:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d014      	beq.n	800327a <USB_ActivateEndpoint+0x2aa>
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	881b      	ldrh	r3, [r3, #0]
 800325c:	b29b      	uxth	r3, r3
 800325e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003266:	b29c      	uxth	r4, r3
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	441a      	add	r2, r3
 8003272:	4b12      	ldr	r3, [pc, #72]	; (80032bc <USB_ActivateEndpoint+0x2ec>)
 8003274:	4323      	orrs	r3, r4
 8003276:	b29b      	uxth	r3, r3
 8003278:	8013      	strh	r3, [r2, #0]
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	b29b      	uxth	r3, r3
 8003288:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800328c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003290:	b29c      	uxth	r4, r3
 8003292:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003296:	b29c      	uxth	r4, r3
 8003298:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 800329c:	b29c      	uxth	r4, r3
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	441a      	add	r2, r3
 80032a8:	4b02      	ldr	r3, [pc, #8]	; (80032b4 <USB_ActivateEndpoint+0x2e4>)
 80032aa:	4323      	orrs	r3, r4
 80032ac:	b29b      	uxth	r3, r3
 80032ae:	8013      	strh	r3, [r2, #0]
 80032b0:	e176      	b.n	80035a0 <USB_ActivateEndpoint+0x5d0>
 80032b2:	bf00      	nop
 80032b4:	ffff8080 	.word	0xffff8080
 80032b8:	ffff80c0 	.word	0xffff80c0
 80032bc:	ffffc080 	.word	0xffffc080
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	881b      	ldrh	r3, [r3, #0]
 80032cc:	b29b      	uxth	r3, r3
 80032ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d6:	b29c      	uxth	r4, r3
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	441a      	add	r2, r3
 80032e2:	4b96      	ldr	r3, [pc, #600]	; (800353c <USB_ActivateEndpoint+0x56c>)
 80032e4:	4323      	orrs	r3, r4
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	8013      	strh	r3, [r2, #0]
    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80032ea:	687c      	ldr	r4, [r7, #4]
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	441c      	add	r4, r3
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	4423      	add	r3, r4
 80032fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003302:	461c      	mov	r4, r3
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	891b      	ldrh	r3, [r3, #8]
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	b29b      	uxth	r3, r3
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	b29b      	uxth	r3, r3
 8003310:	8023      	strh	r3, [r4, #0]
 8003312:	687c      	ldr	r4, [r7, #4]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800331a:	b29b      	uxth	r3, r3
 800331c:	441c      	add	r4, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4423      	add	r3, r4
 8003326:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800332a:	461c      	mov	r4, r3
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	895b      	ldrh	r3, [r3, #10]
 8003330:	085b      	lsrs	r3, r3, #1
 8003332:	b29b      	uxth	r3, r3
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	b29b      	uxth	r3, r3
 8003338:	8023      	strh	r3, [r4, #0]

    if (ep->is_in == 0U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	785b      	ldrb	r3, [r3, #1]
 800333e:	2b00      	cmp	r3, #0
 8003340:	f040 8088 	bne.w	8003454 <USB_ActivateEndpoint+0x484>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	881b      	ldrh	r3, [r3, #0]
 8003350:	b29c      	uxth	r4, r3
 8003352:	4623      	mov	r3, r4
 8003354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d014      	beq.n	8003386 <USB_ActivateEndpoint+0x3b6>
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	b29b      	uxth	r3, r3
 800336a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	b29c      	uxth	r4, r3
 8003374:	687a      	ldr	r2, [r7, #4]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	441a      	add	r2, r3
 800337e:	4b70      	ldr	r3, [pc, #448]	; (8003540 <USB_ActivateEndpoint+0x570>)
 8003380:	4323      	orrs	r3, r4
 8003382:	b29b      	uxth	r3, r3
 8003384:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	4413      	add	r3, r2
 8003390:	881b      	ldrh	r3, [r3, #0]
 8003392:	b29c      	uxth	r4, r3
 8003394:	4623      	mov	r3, r4
 8003396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800339a:	2b00      	cmp	r3, #0
 800339c:	d014      	beq.n	80033c8 <USB_ActivateEndpoint+0x3f8>
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	881b      	ldrh	r3, [r3, #0]
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033b4:	b29c      	uxth	r4, r3
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	441a      	add	r2, r3
 80033c0:	4b60      	ldr	r3, [pc, #384]	; (8003544 <USB_ActivateEndpoint+0x574>)
 80033c2:	4323      	orrs	r3, r4
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out */
      PCD_TX_DTOG(USBx, ep->num);
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	4413      	add	r3, r2
 80033d2:	881b      	ldrh	r3, [r3, #0]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80033da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033de:	b29c      	uxth	r4, r3
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	441a      	add	r2, r3
 80033ea:	4b56      	ldr	r3, [pc, #344]	; (8003544 <USB_ActivateEndpoint+0x574>)
 80033ec:	4323      	orrs	r3, r4
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80033f2:	687a      	ldr	r2, [r7, #4]
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29b      	uxth	r3, r3
 8003400:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003408:	b29c      	uxth	r4, r3
 800340a:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 800340e:	b29c      	uxth	r4, r3
 8003410:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003414:	b29c      	uxth	r4, r3
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	441a      	add	r2, r3
 8003420:	4b49      	ldr	r3, [pc, #292]	; (8003548 <USB_ActivateEndpoint+0x578>)
 8003422:	4323      	orrs	r3, r4
 8003424:	b29b      	uxth	r3, r3
 8003426:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	b29b      	uxth	r3, r3
 8003436:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800343a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800343e:	b29c      	uxth	r4, r3
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	441a      	add	r2, r3
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <USB_ActivateEndpoint+0x578>)
 800344c:	4323      	orrs	r3, r4
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]
 8003452:	e0a5      	b.n	80035a0 <USB_ActivateEndpoint+0x5d0>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29c      	uxth	r4, r3
 8003462:	4623      	mov	r3, r4
 8003464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d014      	beq.n	8003496 <USB_ActivateEndpoint+0x4c6>
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800347e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003482:	b29c      	uxth	r4, r3
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	441a      	add	r2, r3
 800348e:	4b2c      	ldr	r3, [pc, #176]	; (8003540 <USB_ActivateEndpoint+0x570>)
 8003490:	4323      	orrs	r3, r4
 8003492:	b29b      	uxth	r3, r3
 8003494:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4413      	add	r3, r2
 80034a0:	881b      	ldrh	r3, [r3, #0]
 80034a2:	b29c      	uxth	r4, r3
 80034a4:	4623      	mov	r3, r4
 80034a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d014      	beq.n	80034d8 <USB_ActivateEndpoint+0x508>
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c4:	b29c      	uxth	r4, r3
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	441a      	add	r2, r3
 80034d0:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <USB_ActivateEndpoint+0x574>)
 80034d2:	4323      	orrs	r3, r4
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ee:	b29c      	uxth	r4, r3
 80034f0:	687a      	ldr	r2, [r7, #4]
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	441a      	add	r2, r3
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <USB_ActivateEndpoint+0x570>)
 80034fc:	4323      	orrs	r3, r4
 80034fe:	b29b      	uxth	r3, r3
 8003500:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	78db      	ldrb	r3, [r3, #3]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d020      	beq.n	800354c <USB_ActivateEndpoint+0x57c>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	881b      	ldrh	r3, [r3, #0]
 8003516:	b29b      	uxth	r3, r3
 8003518:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800351c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003520:	b29c      	uxth	r4, r3
 8003522:	f084 0320 	eor.w	r3, r4, #32
 8003526:	b29c      	uxth	r4, r3
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	441a      	add	r2, r3
 8003532:	4b05      	ldr	r3, [pc, #20]	; (8003548 <USB_ActivateEndpoint+0x578>)
 8003534:	4323      	orrs	r3, r4
 8003536:	b29b      	uxth	r3, r3
 8003538:	8013      	strh	r3, [r2, #0]
 800353a:	e01c      	b.n	8003576 <USB_ActivateEndpoint+0x5a6>
 800353c:	ffff8180 	.word	0xffff8180
 8003540:	ffffc080 	.word	0xffffc080
 8003544:	ffff80c0 	.word	0xffff80c0
 8003548:	ffff8080 	.word	0xffff8080
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	4413      	add	r3, r2
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800355e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003562:	b29c      	uxth	r4, r3
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <USB_ActivateEndpoint+0x5dc>)
 8003570:	4323      	orrs	r3, r4
 8003572:	b29b      	uxth	r3, r3
 8003574:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	b29b      	uxth	r3, r3
 8003584:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800358c:	b29c      	uxth	r4, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	441a      	add	r2, r3
 8003598:	4b04      	ldr	r3, [pc, #16]	; (80035ac <USB_ActivateEndpoint+0x5dc>)
 800359a:	4323      	orrs	r3, r4
 800359c:	b29b      	uxth	r3, r3
 800359e:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 80035a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc90      	pop	{r4, r7}
 80035aa:	4770      	bx	lr
 80035ac:	ffff8080 	.word	0xffff8080

080035b0 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80035b0:	b490      	push	{r4, r7}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	7b1b      	ldrb	r3, [r3, #12]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d171      	bne.n	80036a6 <USB_DeactivateEndpoint+0xf6>
  {
    if (ep->is_in != 0U)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	785b      	ldrb	r3, [r3, #1]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d036      	beq.n	8003638 <USB_DeactivateEndpoint+0x88>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4413      	add	r3, r2
 80035d4:	881b      	ldrh	r3, [r3, #0]
 80035d6:	b29c      	uxth	r4, r3
 80035d8:	4623      	mov	r3, r4
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d014      	beq.n	800360c <USB_DeactivateEndpoint+0x5c>
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	881b      	ldrh	r3, [r3, #0]
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035f8:	b29c      	uxth	r4, r3
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	441a      	add	r2, r3
 8003604:	4b6b      	ldr	r3, [pc, #428]	; (80037b4 <USB_DeactivateEndpoint+0x204>)
 8003606:	4323      	orrs	r3, r4
 8003608:	b29b      	uxth	r3, r3
 800360a:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800360c:	687a      	ldr	r2, [r7, #4]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	881b      	ldrh	r3, [r3, #0]
 8003618:	b29b      	uxth	r3, r3
 800361a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800361e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003622:	b29c      	uxth	r4, r3
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	441a      	add	r2, r3
 800362e:	4b62      	ldr	r3, [pc, #392]	; (80037b8 <USB_DeactivateEndpoint+0x208>)
 8003630:	4323      	orrs	r3, r4
 8003632:	b29b      	uxth	r3, r3
 8003634:	8013      	strh	r3, [r2, #0]
 8003636:	e144      	b.n	80038c2 <USB_DeactivateEndpoint+0x312>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	881b      	ldrh	r3, [r3, #0]
 8003644:	b29c      	uxth	r4, r3
 8003646:	4623      	mov	r3, r4
 8003648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d014      	beq.n	800367a <USB_DeactivateEndpoint+0xca>
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	881b      	ldrh	r3, [r3, #0]
 800365c:	b29b      	uxth	r3, r3
 800365e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003662:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003666:	b29c      	uxth	r4, r3
 8003668:	687a      	ldr	r2, [r7, #4]
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	441a      	add	r2, r3
 8003672:	4b52      	ldr	r3, [pc, #328]	; (80037bc <USB_DeactivateEndpoint+0x20c>)
 8003674:	4323      	orrs	r3, r4
 8003676:	b29b      	uxth	r3, r3
 8003678:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	4413      	add	r3, r2
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800368c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003690:	b29c      	uxth	r4, r3
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	441a      	add	r2, r3
 800369c:	4b46      	ldr	r3, [pc, #280]	; (80037b8 <USB_DeactivateEndpoint+0x208>)
 800369e:	4323      	orrs	r3, r4
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	8013      	strh	r3, [r2, #0]
 80036a4:	e10d      	b.n	80038c2 <USB_DeactivateEndpoint+0x312>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	785b      	ldrb	r3, [r3, #1]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	f040 8088 	bne.w	80037c0 <USB_DeactivateEndpoint+0x210>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4413      	add	r3, r2
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	b29c      	uxth	r4, r3
 80036be:	4623      	mov	r3, r4
 80036c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d014      	beq.n	80036f2 <USB_DeactivateEndpoint+0x142>
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	009b      	lsls	r3, r3, #2
 80036d0:	4413      	add	r3, r2
 80036d2:	881b      	ldrh	r3, [r3, #0]
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036de:	b29c      	uxth	r4, r3
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	441a      	add	r2, r3
 80036ea:	4b34      	ldr	r3, [pc, #208]	; (80037bc <USB_DeactivateEndpoint+0x20c>)
 80036ec:	4323      	orrs	r3, r4
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29c      	uxth	r4, r3
 8003700:	4623      	mov	r3, r4
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b00      	cmp	r3, #0
 8003708:	d014      	beq.n	8003734 <USB_DeactivateEndpoint+0x184>
 800370a:	687a      	ldr	r2, [r7, #4]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	4413      	add	r3, r2
 8003714:	881b      	ldrh	r3, [r3, #0]
 8003716:	b29b      	uxth	r3, r3
 8003718:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800371c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003720:	b29c      	uxth	r4, r3
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	441a      	add	r2, r3
 800372c:	4b21      	ldr	r3, [pc, #132]	; (80037b4 <USB_DeactivateEndpoint+0x204>)
 800372e:	4323      	orrs	r3, r4
 8003730:	b29b      	uxth	r3, r3
 8003732:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	881b      	ldrh	r3, [r3, #0]
 8003740:	b29b      	uxth	r3, r3
 8003742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	b29c      	uxth	r4, r3
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	441a      	add	r2, r3
 8003756:	4b17      	ldr	r3, [pc, #92]	; (80037b4 <USB_DeactivateEndpoint+0x204>)
 8003758:	4323      	orrs	r3, r4
 800375a:	b29b      	uxth	r3, r3
 800375c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800375e:	687a      	ldr	r2, [r7, #4]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4413      	add	r3, r2
 8003768:	881b      	ldrh	r3, [r3, #0]
 800376a:	b29b      	uxth	r3, r3
 800376c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003770:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003774:	b29c      	uxth	r4, r3
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	441a      	add	r2, r3
 8003780:	4b0d      	ldr	r3, [pc, #52]	; (80037b8 <USB_DeactivateEndpoint+0x208>)
 8003782:	4323      	orrs	r3, r4
 8003784:	b29b      	uxth	r3, r3
 8003786:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	881b      	ldrh	r3, [r3, #0]
 8003794:	b29b      	uxth	r3, r3
 8003796:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800379a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800379e:	b29c      	uxth	r4, r3
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	441a      	add	r2, r3
 80037aa:	4b03      	ldr	r3, [pc, #12]	; (80037b8 <USB_DeactivateEndpoint+0x208>)
 80037ac:	4323      	orrs	r3, r4
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	8013      	strh	r3, [r2, #0]
 80037b2:	e086      	b.n	80038c2 <USB_DeactivateEndpoint+0x312>
 80037b4:	ffff80c0 	.word	0xffff80c0
 80037b8:	ffff8080 	.word	0xffff8080
 80037bc:	ffffc080 	.word	0xffffc080
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	881b      	ldrh	r3, [r3, #0]
 80037cc:	b29c      	uxth	r4, r3
 80037ce:	4623      	mov	r3, r4
 80037d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d014      	beq.n	8003802 <USB_DeactivateEndpoint+0x252>
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ee:	b29c      	uxth	r4, r3
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <USB_DeactivateEndpoint+0x320>)
 80037fc:	4323      	orrs	r3, r4
 80037fe:	b29b      	uxth	r3, r3
 8003800:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	881b      	ldrh	r3, [r3, #0]
 800380e:	b29c      	uxth	r4, r3
 8003810:	4623      	mov	r3, r4
 8003812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003816:	2b00      	cmp	r3, #0
 8003818:	d014      	beq.n	8003844 <USB_DeactivateEndpoint+0x294>
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003830:	b29c      	uxth	r4, r3
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	4b25      	ldr	r3, [pc, #148]	; (80038d4 <USB_DeactivateEndpoint+0x324>)
 800383e:	4323      	orrs	r3, r4
 8003840:	b29b      	uxth	r3, r3
 8003842:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	b29b      	uxth	r3, r3
 8003852:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800385a:	b29c      	uxth	r4, r3
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	441a      	add	r2, r3
 8003866:	4b1a      	ldr	r3, [pc, #104]	; (80038d0 <USB_DeactivateEndpoint+0x320>)
 8003868:	4323      	orrs	r3, r4
 800386a:	b29b      	uxth	r3, r3
 800386c:	8013      	strh	r3, [r2, #0]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	4413      	add	r3, r2
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003884:	b29c      	uxth	r4, r3
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	781b      	ldrb	r3, [r3, #0]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	441a      	add	r2, r3
 8003890:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <USB_DeactivateEndpoint+0x328>)
 8003892:	4323      	orrs	r3, r4
 8003894:	b29b      	uxth	r3, r3
 8003896:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	4413      	add	r3, r2
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ae:	b29c      	uxth	r4, r3
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	441a      	add	r2, r3
 80038ba:	4b07      	ldr	r3, [pc, #28]	; (80038d8 <USB_DeactivateEndpoint+0x328>)
 80038bc:	4323      	orrs	r3, r4
 80038be:	b29b      	uxth	r3, r3
 80038c0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80038c2:	2300      	movs	r3, #0
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3708      	adds	r7, #8
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bc90      	pop	{r4, r7}
 80038cc:	4770      	bx	lr
 80038ce:	bf00      	nop
 80038d0:	ffffc080 	.word	0xffffc080
 80038d4:	ffff80c0 	.word	0xffff80c0
 80038d8:	ffff8080 	.word	0xffff8080

080038dc <USB_EPStartXfer>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80038dc:	b590      	push	{r4, r7, lr}
 80038de:	b08d      	sub	sp, #52	; 0x34
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint32_t len;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	785b      	ldrb	r3, [r3, #1]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	f040 8160 	bne.w	8003bb0 <USB_EPStartXfer+0x2d4>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691b      	ldr	r3, [r3, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d909      	bls.n	8003910 <USB_EPStartXfer+0x34>
    {
      len = ep->maxpacket;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003908:	1ad2      	subs	r2, r2, r3
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	619a      	str	r2, [r3, #24]
 800390e:	e005      	b.n	800391c <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	7b1b      	ldrb	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d119      	bne.n	8003958 <USB_EPStartXfer+0x7c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6959      	ldr	r1, [r3, #20]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	88da      	ldrh	r2, [r3, #6]
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	b29b      	uxth	r3, r3
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 fba8 	bl	8004086 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003936:	687c      	ldr	r4, [r7, #4]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800393e:	b29b      	uxth	r3, r3
 8003940:	441c      	add	r4, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	4423      	add	r3, r4
 800394a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800394e:	461c      	mov	r4, r3
 8003950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003952:	b29b      	uxth	r3, r3
 8003954:	8023      	strh	r3, [r4, #0]
 8003956:	e10f      	b.n	8003b78 <USB_EPStartXfer+0x29c>
    }
    else
    {
      /* Write the data to the USB endpoint */
      if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	b29b      	uxth	r3, r3
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b00      	cmp	r3, #0
 800396c:	d065      	beq.n	8003a3a <USB_EPStartXfer+0x15e>
      {
        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800396e:	687c      	ldr	r4, [r7, #4]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	785b      	ldrb	r3, [r3, #1]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d148      	bne.n	8003a0a <USB_EPStartXfer+0x12e>
 8003978:	687c      	ldr	r4, [r7, #4]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003980:	b29b      	uxth	r3, r3
 8003982:	441c      	add	r4, r3
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4423      	add	r3, r4
 800398c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003990:	461c      	mov	r4, r3
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10e      	bne.n	80039b6 <USB_EPStartXfer+0xda>
 8003998:	8823      	ldrh	r3, [r4, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	8023      	strh	r3, [r4, #0]
 80039a4:	8823      	ldrh	r3, [r4, #0]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80039ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	8023      	strh	r3, [r4, #0]
 80039b4:	e03d      	b.n	8003a32 <USB_EPStartXfer+0x156>
 80039b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b8:	2b3e      	cmp	r3, #62	; 0x3e
 80039ba:	d810      	bhi.n	80039de <USB_EPStartXfer+0x102>
 80039bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d002      	beq.n	80039d2 <USB_EPStartXfer+0xf6>
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	3301      	adds	r3, #1
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	029b      	lsls	r3, r3, #10
 80039d8:	b29b      	uxth	r3, r3
 80039da:	8023      	strh	r3, [r4, #0]
 80039dc:	e029      	b.n	8003a32 <USB_EPStartXfer+0x156>
 80039de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e0:	095b      	lsrs	r3, r3, #5
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
 80039e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <USB_EPStartXfer+0x118>
 80039ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f0:	3b01      	subs	r3, #1
 80039f2:	627b      	str	r3, [r7, #36]	; 0x24
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	029b      	lsls	r3, r3, #10
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8023      	strh	r3, [r4, #0]
 8003a08:	e013      	b.n	8003a32 <USB_EPStartXfer+0x156>
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	785b      	ldrb	r3, [r3, #1]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d10f      	bne.n	8003a32 <USB_EPStartXfer+0x156>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	441c      	add	r4, r3
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	781b      	ldrb	r3, [r3, #0]
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	4423      	add	r3, r4
 8003a24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	801a      	strh	r2, [r3, #0]
        pmabuffer = ep->pmaaddr1;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	895b      	ldrh	r3, [r3, #10]
 8003a36:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003a38:	e063      	b.n	8003b02 <USB_EPStartXfer+0x226>
      }
      else
      {
        /* Set the Double buffer counter for pmabuffer0 */
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d148      	bne.n	8003ad4 <USB_EPStartXfer+0x1f8>
 8003a42:	687c      	ldr	r4, [r7, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	441c      	add	r4, r3
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4423      	add	r3, r4
 8003a56:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a5a:	461c      	mov	r4, r3
 8003a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10e      	bne.n	8003a80 <USB_EPStartXfer+0x1a4>
 8003a62:	8823      	ldrh	r3, [r4, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003a6a:	b29b      	uxth	r3, r3
 8003a6c:	8023      	strh	r3, [r4, #0]
 8003a6e:	8823      	ldrh	r3, [r4, #0]
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	8023      	strh	r3, [r4, #0]
 8003a7e:	e03d      	b.n	8003afc <USB_EPStartXfer+0x220>
 8003a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a82:	2b3e      	cmp	r3, #62	; 0x3e
 8003a84:	d810      	bhi.n	8003aa8 <USB_EPStartXfer+0x1cc>
 8003a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a88:	085b      	lsrs	r3, r3, #1
 8003a8a:	623b      	str	r3, [r7, #32]
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <USB_EPStartXfer+0x1c0>
 8003a96:	6a3b      	ldr	r3, [r7, #32]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	623b      	str	r3, [r7, #32]
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	029b      	lsls	r3, r3, #10
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	8023      	strh	r3, [r4, #0]
 8003aa6:	e029      	b.n	8003afc <USB_EPStartXfer+0x220>
 8003aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aaa:	095b      	lsrs	r3, r3, #5
 8003aac:	623b      	str	r3, [r7, #32]
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	f003 031f 	and.w	r3, r3, #31
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d102      	bne.n	8003abe <USB_EPStartXfer+0x1e2>
 8003ab8:	6a3b      	ldr	r3, [r7, #32]
 8003aba:	3b01      	subs	r3, #1
 8003abc:	623b      	str	r3, [r7, #32]
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	029b      	lsls	r3, r3, #10
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8023      	strh	r3, [r4, #0]
 8003ad2:	e013      	b.n	8003afc <USB_EPStartXfer+0x220>
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	785b      	ldrb	r3, [r3, #1]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d10f      	bne.n	8003afc <USB_EPStartXfer+0x220>
 8003adc:	687c      	ldr	r4, [r7, #4]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	441c      	add	r4, r3
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4423      	add	r3, r4
 8003af0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003af4:	461c      	mov	r4, r3
 8003af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	8023      	strh	r3, [r4, #0]
        pmabuffer = ep->pmaaddr0;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	891b      	ldrh	r3, [r3, #8]
 8003b00:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	6959      	ldr	r1, [r3, #20]
 8003b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 faba 	bl	8004086 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	785b      	ldrb	r3, [r3, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d115      	bne.n	8003b46 <USB_EPStartXfer+0x26a>
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	881b      	ldrh	r3, [r3, #0]
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b30:	b29c      	uxth	r4, r3
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	009b      	lsls	r3, r3, #2
 8003b3a:	441a      	add	r2, r3
 8003b3c:	4b9a      	ldr	r3, [pc, #616]	; (8003da8 <USB_EPStartXfer+0x4cc>)
 8003b3e:	4323      	orrs	r3, r4
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	8013      	strh	r3, [r2, #0]
 8003b44:	e018      	b.n	8003b78 <USB_EPStartXfer+0x29c>
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	785b      	ldrb	r3, [r3, #1]
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d114      	bne.n	8003b78 <USB_EPStartXfer+0x29c>
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	781b      	ldrb	r3, [r3, #0]
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	881b      	ldrh	r3, [r3, #0]
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b64:	b29c      	uxth	r4, r3
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	441a      	add	r2, r3
 8003b70:	4b8e      	ldr	r3, [pc, #568]	; (8003dac <USB_EPStartXfer+0x4d0>)
 8003b72:	4323      	orrs	r3, r4
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	8013      	strh	r3, [r2, #0]
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	b29b      	uxth	r3, r3
 8003b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b8e:	b29c      	uxth	r4, r3
 8003b90:	f084 0310 	eor.w	r3, r4, #16
 8003b94:	b29c      	uxth	r4, r3
 8003b96:	f084 0320 	eor.w	r3, r4, #32
 8003b9a:	b29c      	uxth	r4, r3
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	441a      	add	r2, r3
 8003ba6:	4b82      	ldr	r3, [pc, #520]	; (8003db0 <USB_EPStartXfer+0x4d4>)
 8003ba8:	4323      	orrs	r3, r4
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	8013      	strh	r3, [r2, #0]
 8003bae:	e146      	b.n	8003e3e <USB_EPStartXfer+0x562>
  }
  else /* OUT endpoint */
  {
    /* Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	699a      	ldr	r2, [r3, #24]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	691b      	ldr	r3, [r3, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d909      	bls.n	8003bd0 <USB_EPStartXfer+0x2f4>
    {
      len = ep->maxpacket;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len -= len;
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc8:	1ad2      	subs	r2, r2, r3
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	619a      	str	r2, [r3, #24]
 8003bce:	e005      	b.n	8003bdc <USB_EPStartXfer+0x300>
    }
    else
    {
      len = ep->xfer_len;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	699b      	ldr	r3, [r3, #24]
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
      ep->xfer_len = 0U;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	2200      	movs	r2, #0
 8003bda:	619a      	str	r2, [r3, #24]
    }

    /* configure and validate Rx endpoint */
    if (ep->doublebuffer == 0U)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	7b1b      	ldrb	r3, [r3, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d148      	bne.n	8003c76 <USB_EPStartXfer+0x39a>
    {
      /*Set RX buffer count*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8003be4:	687c      	ldr	r4, [r7, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	441c      	add	r4, r3
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	781b      	ldrb	r3, [r3, #0]
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	4423      	add	r3, r4
 8003bf8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003bfc:	461c      	mov	r4, r3
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10e      	bne.n	8003c22 <USB_EPStartXfer+0x346>
 8003c04:	8823      	ldrh	r3, [r4, #0]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	8023      	strh	r3, [r4, #0]
 8003c10:	8823      	ldrh	r3, [r4, #0]
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c1c:	b29b      	uxth	r3, r3
 8003c1e:	8023      	strh	r3, [r4, #0]
 8003c20:	e0f2      	b.n	8003e08 <USB_EPStartXfer+0x52c>
 8003c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c24:	2b3e      	cmp	r3, #62	; 0x3e
 8003c26:	d810      	bhi.n	8003c4a <USB_EPStartXfer+0x36e>
 8003c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	61fb      	str	r3, [r7, #28]
 8003c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <USB_EPStartXfer+0x362>
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	61fb      	str	r3, [r7, #28]
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	029b      	lsls	r3, r3, #10
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	8023      	strh	r3, [r4, #0]
 8003c48:	e0de      	b.n	8003e08 <USB_EPStartXfer+0x52c>
 8003c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c4c:	095b      	lsrs	r3, r3, #5
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c52:	f003 031f 	and.w	r3, r3, #31
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d102      	bne.n	8003c60 <USB_EPStartXfer+0x384>
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	61fb      	str	r3, [r7, #28]
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	029b      	lsls	r3, r3, #10
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003c6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	8023      	strh	r3, [r4, #0]
 8003c74:	e0c8      	b.n	8003e08 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /*Set the Double buffer counter*/
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	785b      	ldrb	r3, [r3, #1]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d148      	bne.n	8003d10 <USB_EPStartXfer+0x434>
 8003c7e:	687c      	ldr	r4, [r7, #4]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	441c      	add	r4, r3
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4423      	add	r3, r4
 8003c92:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003c96:	461c      	mov	r4, r3
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d10e      	bne.n	8003cbc <USB_EPStartXfer+0x3e0>
 8003c9e:	8823      	ldrh	r3, [r4, #0]
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	8023      	strh	r3, [r4, #0]
 8003caa:	8823      	ldrh	r3, [r4, #0]
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003cb2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	8023      	strh	r3, [r4, #0]
 8003cba:	e03d      	b.n	8003d38 <USB_EPStartXfer+0x45c>
 8003cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8003cc0:	d810      	bhi.n	8003ce4 <USB_EPStartXfer+0x408>
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	085b      	lsrs	r3, r3, #1
 8003cc6:	61bb      	str	r3, [r7, #24]
 8003cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d002      	beq.n	8003cd8 <USB_EPStartXfer+0x3fc>
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	61bb      	str	r3, [r7, #24]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	029b      	lsls	r3, r3, #10
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8023      	strh	r3, [r4, #0]
 8003ce2:	e029      	b.n	8003d38 <USB_EPStartXfer+0x45c>
 8003ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	61bb      	str	r3, [r7, #24]
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	f003 031f 	and.w	r3, r3, #31
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d102      	bne.n	8003cfa <USB_EPStartXfer+0x41e>
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	029b      	lsls	r3, r3, #10
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	8023      	strh	r3, [r4, #0]
 8003d0e:	e013      	b.n	8003d38 <USB_EPStartXfer+0x45c>
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	785b      	ldrb	r3, [r3, #1]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10f      	bne.n	8003d38 <USB_EPStartXfer+0x45c>
 8003d18:	687c      	ldr	r4, [r7, #4]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	441c      	add	r4, r3
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4423      	add	r3, r4
 8003d2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003d30:	461c      	mov	r4, r3
 8003d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	8023      	strh	r3, [r4, #0]
 8003d38:	687c      	ldr	r4, [r7, #4]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	785b      	ldrb	r3, [r3, #1]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d14e      	bne.n	8003de0 <USB_EPStartXfer+0x504>
 8003d42:	687c      	ldr	r4, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	441c      	add	r4, r3
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	00db      	lsls	r3, r3, #3
 8003d54:	4423      	add	r3, r4
 8003d56:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003d5a:	461c      	mov	r4, r3
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d10e      	bne.n	8003d80 <USB_EPStartXfer+0x4a4>
 8003d62:	8823      	ldrh	r3, [r4, #0]
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	8023      	strh	r3, [r4, #0]
 8003d6e:	8823      	ldrh	r3, [r4, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	8023      	strh	r3, [r4, #0]
 8003d7e:	e043      	b.n	8003e08 <USB_EPStartXfer+0x52c>
 8003d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d82:	2b3e      	cmp	r3, #62	; 0x3e
 8003d84:	d816      	bhi.n	8003db4 <USB_EPStartXfer+0x4d8>
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	085b      	lsrs	r3, r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d002      	beq.n	8003d9c <USB_EPStartXfer+0x4c0>
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	029b      	lsls	r3, r3, #10
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	8023      	strh	r3, [r4, #0]
 8003da6:	e02f      	b.n	8003e08 <USB_EPStartXfer+0x52c>
 8003da8:	ffff80c0 	.word	0xffff80c0
 8003dac:	ffffc080 	.word	0xffffc080
 8003db0:	ffff8080 	.word	0xffff8080
 8003db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003db6:	095b      	lsrs	r3, r3, #5
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dbc:	f003 031f 	and.w	r3, r3, #31
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d102      	bne.n	8003dca <USB_EPStartXfer+0x4ee>
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	617b      	str	r3, [r7, #20]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	029b      	lsls	r3, r3, #10
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003dd6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	8023      	strh	r3, [r4, #0]
 8003dde:	e013      	b.n	8003e08 <USB_EPStartXfer+0x52c>
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	785b      	ldrb	r3, [r3, #1]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d10f      	bne.n	8003e08 <USB_EPStartXfer+0x52c>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	441c      	add	r4, r3
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4423      	add	r3, r4
 8003dfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	801a      	strh	r2, [r3, #0]
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	b29c      	uxth	r4, r3
 8003e20:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003e24:	b29c      	uxth	r4, r3
 8003e26:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003e2a:	b29c      	uxth	r4, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	441a      	add	r2, r3
 8003e36:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <USB_EPStartXfer+0x56c>)
 8003e38:	4323      	orrs	r3, r4
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3734      	adds	r7, #52	; 0x34
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd90      	pop	{r4, r7, pc}
 8003e48:	ffff8080 	.word	0xffff8080

08003e4c <USB_EPSetStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003e4c:	b490      	push	{r4, r7}
 8003e4e:	b082      	sub	sp, #8
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	785b      	ldrb	r3, [r3, #1]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d018      	beq.n	8003e90 <USB_EPSetStall+0x44>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	881b      	ldrh	r3, [r3, #0]
 8003e6a:	b29b      	uxth	r3, r3
 8003e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e74:	b29c      	uxth	r4, r3
 8003e76:	f084 0310 	eor.w	r3, r4, #16
 8003e7a:	b29c      	uxth	r4, r3
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	781b      	ldrb	r3, [r3, #0]
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	441a      	add	r2, r3
 8003e86:	4b11      	ldr	r3, [pc, #68]	; (8003ecc <USB_EPSetStall+0x80>)
 8003e88:	4323      	orrs	r3, r4
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	8013      	strh	r3, [r2, #0]
 8003e8e:	e017      	b.n	8003ec0 <USB_EPSetStall+0x74>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ea6:	b29c      	uxth	r4, r3
 8003ea8:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003eac:	b29c      	uxth	r4, r3
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	441a      	add	r2, r3
 8003eb8:	4b04      	ldr	r3, [pc, #16]	; (8003ecc <USB_EPSetStall+0x80>)
 8003eba:	4323      	orrs	r3, r4
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3708      	adds	r7, #8
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc90      	pop	{r4, r7}
 8003eca:	4770      	bx	lr
 8003ecc:	ffff8080 	.word	0xffff8080

08003ed0 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003ed0:	b490      	push	{r4, r7}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	7b1b      	ldrb	r3, [r3, #12]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d17d      	bne.n	8003fde <USB_EPClearStall+0x10e>
  {
    if (ep->is_in != 0U)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	785b      	ldrb	r3, [r3, #1]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d03d      	beq.n	8003f66 <USB_EPClearStall+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	781b      	ldrb	r3, [r3, #0]
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	b29c      	uxth	r4, r3
 8003ef8:	4623      	mov	r3, r4
 8003efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d014      	beq.n	8003f2c <USB_EPClearStall+0x5c>
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f18:	b29c      	uxth	r4, r3
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	4b31      	ldr	r3, [pc, #196]	; (8003fec <USB_EPClearStall+0x11c>)
 8003f26:	4323      	orrs	r3, r4
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	78db      	ldrb	r3, [r3, #3]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d054      	beq.n	8003fde <USB_EPClearStall+0x10e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4413      	add	r3, r2
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f4a:	b29c      	uxth	r4, r3
 8003f4c:	f084 0320 	eor.w	r3, r4, #32
 8003f50:	b29c      	uxth	r4, r3
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	441a      	add	r2, r3
 8003f5c:	4b24      	ldr	r3, [pc, #144]	; (8003ff0 <USB_EPClearStall+0x120>)
 8003f5e:	4323      	orrs	r3, r4
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	8013      	strh	r3, [r2, #0]
 8003f64:	e03b      	b.n	8003fde <USB_EPClearStall+0x10e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	881b      	ldrh	r3, [r3, #0]
 8003f72:	b29c      	uxth	r4, r3
 8003f74:	4623      	mov	r3, r4
 8003f76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <USB_EPClearStall+0xd8>
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	881b      	ldrh	r3, [r3, #0]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f94:	b29c      	uxth	r4, r3
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	009b      	lsls	r3, r3, #2
 8003f9e:	441a      	add	r2, r3
 8003fa0:	4b14      	ldr	r3, [pc, #80]	; (8003ff4 <USB_EPClearStall+0x124>)
 8003fa2:	4323      	orrs	r3, r4
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003fa8:	687a      	ldr	r2, [r7, #4]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	b29c      	uxth	r4, r3
 8003fc0:	f484 5380 	eor.w	r3, r4, #4096	; 0x1000
 8003fc4:	b29c      	uxth	r4, r3
 8003fc6:	f484 5300 	eor.w	r3, r4, #8192	; 0x2000
 8003fca:	b29c      	uxth	r4, r3
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <USB_EPClearStall+0x120>)
 8003fd8:	4323      	orrs	r3, r4
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc90      	pop	{r4, r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	ffff80c0 	.word	0xffff80c0
 8003ff0:	ffff8080 	.word	0xffff8080
 8003ff4:	ffffc080 	.word	0xffffc080

08003ff8 <USB_SetDevAddress>:
  * @param  address : new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	460b      	mov	r3, r1
 8004002:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8004004:	78fb      	ldrb	r3, [r7, #3]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d103      	bne.n	8004012 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2280      	movs	r2, #128	; 0x80
 800400e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800402e:	b29b      	uxth	r3, r3
 8004030:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004034:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx : Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800405c:	b29b      	uxth	r3, r3
 800405e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8004060:	68fb      	ldr	r3, [r7, #12]
}
 8004062:	4618      	mov	r0, r3
 8004064:	3714      	adds	r7, #20
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800406e:	b480      	push	{r7}
 8004070:	b083      	sub	sp, #12
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
 8004076:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	370c      	adds	r7, #12
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004086:	b480      	push	{r7}
 8004088:	b08d      	sub	sp, #52	; 0x34
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	4611      	mov	r1, r2
 8004092:	461a      	mov	r2, r3
 8004094:	460b      	mov	r3, r1
 8004096:	80fb      	strh	r3, [r7, #6]
 8004098:	4613      	mov	r3, r2
 800409a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800409c:	88bb      	ldrh	r3, [r7, #4]
 800409e:	3301      	adds	r3, #1
 80040a0:	085b      	lsrs	r3, r3, #1
 80040a2:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80040ac:	88fa      	ldrh	r2, [r7, #6]
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80040b8:	6a3b      	ldr	r3, [r7, #32]
 80040ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040bc:	e01b      	b.n	80040f6 <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	3301      	adds	r3, #1
 80040c8:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	021b      	lsls	r3, r3, #8
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	461a      	mov	r2, r3
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	b29a      	uxth	r2, r3
 80040e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80040e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e6:	3302      	adds	r3, #2
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif

    pBuf++;
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	3301      	adds	r3, #1
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 80040f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f2:	3b01      	subs	r3, #1
 80040f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e0      	bne.n	80040be <USB_WritePMA+0x38>
  }
}
 80040fc:	bf00      	nop
 80040fe:	3734      	adds	r7, #52	; 0x34
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes: no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004108:	b480      	push	{r7}
 800410a:	b08b      	sub	sp, #44	; 0x2c
 800410c:	af00      	add	r7, sp, #0
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	460b      	mov	r3, r1
 8004118:	80fb      	strh	r3, [r7, #6]
 800411a:	4613      	mov	r3, r2
 800411c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800411e:	88bb      	ldrh	r3, [r7, #4]
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	b29b      	uxth	r3, r3
 8004124:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800412e:	88fa      	ldrh	r2, [r7, #6]
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	4413      	add	r3, r2
 8004134:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004138:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
 800413e:	e018      	b.n	8004172 <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8004140:	6a3b      	ldr	r3, [r7, #32]
 8004142:	881b      	ldrh	r3, [r3, #0]
 8004144:	b29b      	uxth	r3, r3
 8004146:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	3302      	adds	r3, #2
 800414c:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	b2da      	uxtb	r2, r3
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	3301      	adds	r3, #1
 800415a:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	0a1b      	lsrs	r3, r3, #8
 8004160:	b2da      	uxtb	r2, r3
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	3301      	adds	r3, #1
 800416a:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	3b01      	subs	r3, #1
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
 8004172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1e3      	bne.n	8004140 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8004178:	88bb      	ldrh	r3, [r7, #4]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d007      	beq.n	8004194 <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	881b      	ldrh	r3, [r3, #0]
 8004188:	b29b      	uxth	r3, r3
 800418a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	b2da      	uxtb	r2, r3
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	701a      	strb	r2, [r3, #0]
  }
}
 8004194:	bf00      	nop
 8004196:	372c      	adds	r7, #44	; 0x2c
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	460b      	mov	r3, r1
 80041aa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	7c1b      	ldrb	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d113      	bne.n	80041e0 <USBD_CDC_Init+0x40>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80041b8:	2340      	movs	r3, #64	; 0x40
 80041ba:	2202      	movs	r2, #2
 80041bc:	2181      	movs	r1, #129	; 0x81
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f002 f8b3 	bl	800632a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80041ca:	2340      	movs	r3, #64	; 0x40
 80041cc:	2202      	movs	r2, #2
 80041ce:	2101      	movs	r1, #1
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f002 f8aa 	bl	800632a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80041de:	e012      	b.n	8004206 <USBD_CDC_Init+0x66>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80041e0:	2340      	movs	r3, #64	; 0x40
 80041e2:	2202      	movs	r2, #2
 80041e4:	2181      	movs	r1, #129	; 0x81
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f002 f89f 	bl	800632a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80041f2:	2340      	movs	r3, #64	; 0x40
 80041f4:	2202      	movs	r2, #2
 80041f6:	2101      	movs	r1, #1
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f002 f896 	bl	800632a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2201      	movs	r2, #1
 8004202:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
//  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800420c:	205c      	movs	r0, #92	; 0x5c
 800420e:	f002 f9e3 	bl	80065d8 <USBD_static_malloc>
 8004212:	4602      	mov	r2, r0
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <USBD_CDC_Init+0x8a>
  {
    ret = 1U;
 8004224:	2301      	movs	r3, #1
 8004226:	73fb      	strb	r3, [r7, #15]
 8004228:	e021      	b.n	800426e <USBD_CDC_Init+0xce>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004230:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
    hcdc->RxState = 0U;
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	2200      	movs	r2, #0
 8004246:	659a      	str	r2, [r3, #88]	; 0x58

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7c1b      	ldrb	r3, [r3, #16]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d107      	bne.n	8004260 <USBD_CDC_Init+0xc0>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004254:	2340      	movs	r3, #64	; 0x40
 8004256:	2101      	movs	r1, #1
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f002 f951 	bl	8006500 <USBD_LL_PrepareReceive>
 800425e:	e006      	b.n	800426e <USBD_CDC_Init+0xce>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004264:	2340      	movs	r3, #64	; 0x40
 8004266:	2101      	movs	r1, #1
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f002 f949 	bl	8006500 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800426e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004270:	4618      	mov	r0, r3
 8004272:	3710      	adds	r7, #16
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004288:	2181      	movs	r1, #129	; 0x81
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f002 f873 	bl	8006376 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004296:	2101      	movs	r1, #1
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f002 f86c 	bl	8006376 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
//  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00e      	beq.n	80042d4 <USBD_CDC_DeInit+0x5c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042c6:	4618      	mov	r0, r3
 80042c8:	f002 f994 	bl	80065f4 <USBD_static_free>
    pdev->pClassData = NULL;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80042d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}

080042de <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80042de:	b580      	push	{r7, lr}
 80042e0:	b086      	sub	sp, #24
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80042ee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80042f4:	2300      	movs	r3, #0
 80042f6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004304:	2b00      	cmp	r3, #0
 8004306:	d039      	beq.n	800437c <USBD_CDC_Setup+0x9e>
 8004308:	2b20      	cmp	r3, #32
 800430a:	d17c      	bne.n	8004406 <USBD_CDC_Setup+0x128>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	88db      	ldrh	r3, [r3, #6]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d029      	beq.n	8004368 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	b25b      	sxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	da11      	bge.n	8004342 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800432a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	88d2      	ldrh	r2, [r2, #6]
 8004330:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004332:	6939      	ldr	r1, [r7, #16]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	88db      	ldrh	r3, [r3, #6]
 8004338:	461a      	mov	r2, r3
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f001 f9d0 	bl	80056e0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8004340:	e068      	b.n	8004414 <USBD_CDC_Setup+0x136>
          hcdc->CmdOpCode = req->bRequest;
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	785a      	ldrb	r2, [r3, #1]
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          hcdc->CmdLength = (uint8_t)req->wLength;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	88db      	ldrh	r3, [r3, #6]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8004358:	6939      	ldr	r1, [r7, #16]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	88db      	ldrh	r3, [r3, #6]
 800435e:	461a      	mov	r2, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f001 f9eb 	bl	800573c <USBD_CtlPrepareRx>
      break;
 8004366:	e055      	b.n	8004414 <USBD_CDC_Setup+0x136>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	7850      	ldrb	r0, [r2, #1]
 8004374:	2200      	movs	r2, #0
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	4798      	blx	r3
      break;
 800437a:	e04b      	b.n	8004414 <USBD_CDC_Setup+0x136>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	785b      	ldrb	r3, [r3, #1]
 8004380:	2b0a      	cmp	r3, #10
 8004382:	d017      	beq.n	80043b4 <USBD_CDC_Setup+0xd6>
 8004384:	2b0b      	cmp	r3, #11
 8004386:	d029      	beq.n	80043dc <USBD_CDC_Setup+0xfe>
 8004388:	2b00      	cmp	r3, #0
 800438a:	d133      	bne.n	80043f4 <USBD_CDC_Setup+0x116>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004392:	2b03      	cmp	r3, #3
 8004394:	d107      	bne.n	80043a6 <USBD_CDC_Setup+0xc8>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8004396:	f107 030c 	add.w	r3, r7, #12
 800439a:	2202      	movs	r2, #2
 800439c:	4619      	mov	r1, r3
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f001 f99e 	bl	80056e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80043a4:	e02e      	b.n	8004404 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80043a6:	6839      	ldr	r1, [r7, #0]
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f001 f92e 	bl	800560a <USBD_CtlError>
            ret = USBD_FAIL;
 80043ae:	2302      	movs	r3, #2
 80043b0:	75fb      	strb	r3, [r7, #23]
          break;
 80043b2:	e027      	b.n	8004404 <USBD_CDC_Setup+0x126>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d107      	bne.n	80043ce <USBD_CDC_Setup+0xf0>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80043be:	f107 030f 	add.w	r3, r7, #15
 80043c2:	2201      	movs	r2, #1
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 f98a 	bl	80056e0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80043cc:	e01a      	b.n	8004404 <USBD_CDC_Setup+0x126>
            USBD_CtlError(pdev, req);
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f001 f91a 	bl	800560a <USBD_CtlError>
            ret = USBD_FAIL;
 80043d6:	2302      	movs	r3, #2
 80043d8:	75fb      	strb	r3, [r7, #23]
          break;
 80043da:	e013      	b.n	8004404 <USBD_CDC_Setup+0x126>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d00d      	beq.n	8004402 <USBD_CDC_Setup+0x124>
          {
            USBD_CtlError(pdev, req);
 80043e6:	6839      	ldr	r1, [r7, #0]
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f001 f90e 	bl	800560a <USBD_CtlError>
            ret = USBD_FAIL;
 80043ee:	2302      	movs	r3, #2
 80043f0:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80043f2:	e006      	b.n	8004402 <USBD_CDC_Setup+0x124>

        default:
          USBD_CtlError(pdev, req);
 80043f4:	6839      	ldr	r1, [r7, #0]
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f001 f907 	bl	800560a <USBD_CtlError>
          ret = USBD_FAIL;
 80043fc:	2302      	movs	r3, #2
 80043fe:	75fb      	strb	r3, [r7, #23]
          break;
 8004400:	e000      	b.n	8004404 <USBD_CDC_Setup+0x126>
          break;
 8004402:	bf00      	nop
      }
      break;
 8004404:	e006      	b.n	8004414 <USBD_CDC_Setup+0x136>

    default:
      USBD_CtlError(pdev, req);
 8004406:	6839      	ldr	r1, [r7, #0]
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	f001 f8fe 	bl	800560a <USBD_CtlError>
      ret = USBD_FAIL;
 800440e:	2302      	movs	r3, #2
 8004410:	75fb      	strb	r3, [r7, #23]
      break;
 8004412:	bf00      	nop
  }

  return ret;
 8004414:	7dfb      	ldrb	r3, [r7, #23]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b084      	sub	sp, #16
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	460b      	mov	r3, r1
 8004428:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004430:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004438:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004440:	2b00      	cmp	r3, #0
 8004442:	d036      	beq.n	80044b2 <USBD_CDC_DataIn+0x94>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	331c      	adds	r3, #28
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d026      	beq.n	80044a8 <USBD_CDC_DataIn+0x8a>
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4413      	add	r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	331c      	adds	r3, #28
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	78fa      	ldrb	r2, [r7, #3]
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	0152      	lsls	r2, r2, #5
 8004472:	440a      	add	r2, r1
 8004474:	3238      	adds	r2, #56	; 0x38
 8004476:	6812      	ldr	r2, [r2, #0]
 8004478:	fbb3 f1f2 	udiv	r1, r3, r2
 800447c:	fb02 f201 	mul.w	r2, r2, r1
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d110      	bne.n	80044a8 <USBD_CDC_DataIn+0x8a>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	4413      	add	r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	331c      	adds	r3, #28
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800449a:	78f9      	ldrb	r1, [r7, #3]
 800449c:	2300      	movs	r3, #0
 800449e:	2200      	movs	r2, #0
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f002 f80a 	bl	80064ba <USBD_LL_Transmit>
 80044a6:	e002      	b.n	80044ae <USBD_CDC_DataIn+0x90>
    }
    else
    {
      hcdc->TxState = 0U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
    return USBD_OK;
 80044ae:	2300      	movs	r3, #0
 80044b0:	e000      	b.n	80044b4 <USBD_CDC_DataIn+0x96>
  }
  else
  {
    return USBD_FAIL;
 80044b2:	2302      	movs	r3, #2
  }
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80044d0:	78fb      	ldrb	r3, [r7, #3]
 80044d2:	4619      	mov	r1, r3
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f002 f836 	bl	8006546 <USBD_LL_GetRxDataSize>
 80044da:	4602      	mov	r2, r0
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d00b      	beq.n	8004502 <USBD_CDC_DataOut+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	68fa      	ldr	r2, [r7, #12]
 80044f4:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	324c      	adds	r2, #76	; 0x4c
 80044fa:	4611      	mov	r1, r2
 80044fc:	4798      	blx	r3

    return USBD_OK;
 80044fe:	2300      	movs	r3, #0
 8004500:	e000      	b.n	8004504 <USBD_CDC_DataOut+0x48>
  }
  else
  {
    return USBD_FAIL;
 8004502:	2302      	movs	r3, #2
  }
}
 8004504:	4618      	mov	r0, r3
 8004506:	3710      	adds	r7, #16
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800451a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004522:	2b00      	cmp	r3, #0
 8004524:	d015      	beq.n	8004552 <USBD_CDC_EP0_RxReady+0x46>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800452c:	2bff      	cmp	r3, #255	; 0xff
 800452e:	d010      	beq.n	8004552 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
                                                      (uint8_t *)(void *)hcdc->data,
 800453e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004546:	b292      	uxth	r2, r2
 8004548:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	22ff      	movs	r2, #255	; 0xff
 800454e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  }
  return USBD_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2220      	movs	r2, #32
 8004568:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800456a:	4b03      	ldr	r3, [pc, #12]	; (8004578 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800456c:	4618      	mov	r0, r3
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	2000004c 	.word	0x2000004c

0800457c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	220a      	movs	r2, #10
 8004588:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800458a:	4b03      	ldr	r3, [pc, #12]	; (8004598 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800458c:	4618      	mov	r0, r3
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr
 8004598:	20000008 	.word	0x20000008

0800459c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
 80045a4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80045a6:	2302      	movs	r3, #2
 80045a8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80045bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b087      	sub	sp, #28
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	60f8      	str	r0, [r7, #12]
 80045d2:	60b9      	str	r1, [r7, #8]
 80045d4:	4613      	mov	r3, r2
 80045d6:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80045de:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	68ba      	ldr	r2, [r7, #8]
 80045e4:	649a      	str	r2, [r3, #72]	; 0x48
  hcdc->TxLength = length;
 80045e6:	88fa      	ldrh	r2, [r7, #6]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	651a      	str	r2, [r3, #80]	; 0x50

  return USBD_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	371c      	adds	r7, #28
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b085      	sub	sp, #20
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
 8004602:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800460a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	683a      	ldr	r2, [r7, #0]
 8004610:	645a      	str	r2, [r3, #68]	; 0x44

  return USBD_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800462e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004636:	2b00      	cmp	r3, #0
 8004638:	d014      	beq.n	8004664 <USBD_CDC_ReceivePacket+0x44>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	7c1b      	ldrb	r3, [r3, #16]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d107      	bne.n	8004652 <USBD_CDC_ReceivePacket+0x32>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004646:	2340      	movs	r3, #64	; 0x40
 8004648:	2101      	movs	r1, #1
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f001 ff58 	bl	8006500 <USBD_LL_PrepareReceive>
 8004650:	e006      	b.n	8004660 <USBD_CDC_ReceivePacket+0x40>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004656:	2340      	movs	r3, #64	; 0x40
 8004658:	2101      	movs	r1, #1
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f001 ff50 	bl	8006500 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <USBD_CDC_ReceivePacket+0x46>
  }
  else
  {
    return USBD_FAIL;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3710      	adds	r7, #16
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b084      	sub	sp, #16
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	4613      	mov	r3, r2
 800467a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8004682:	2302      	movs	r3, #2
 8004684:	e01a      	b.n	80046bc <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	79fa      	ldrb	r2, [r7, #7]
 80046b2:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80046b4:	68f8      	ldr	r0, [r7, #12]
 80046b6:	f001 fdbd 	bl	8006234 <USBD_LL_Init>

  return USBD_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3710      	adds	r7, #16
 80046c0:	46bd      	mov	sp, r7
 80046c2:	bd80      	pop	{r7, pc}

080046c4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80046ce:	2300      	movs	r3, #0
 80046d0:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d006      	beq.n	80046e6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	73fb      	strb	r3, [r7, #15]
 80046e4:	e001      	b.n	80046ea <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80046e6:	2302      	movs	r3, #2
 80046e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80046ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f001 fdf7 	bl	80062f4 <USBD_LL_Start>

  return USBD_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr

08004726 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
 800472e:	460b      	mov	r3, r1
 8004730:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004732:	2302      	movs	r3, #2
 8004734:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00c      	beq.n	800475a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	78fa      	ldrb	r2, [r7, #3]
 800474a:	4611      	mov	r1, r2
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	4798      	blx	r3
 8004750:	4603      	mov	r3, r0
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800475a:	7bfb      	ldrb	r3, [r7, #15]
}
 800475c:	4618      	mov	r0, r3
 800475e:	3710      	adds	r7, #16
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	460b      	mov	r3, r1
 800476e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	4611      	mov	r1, r2
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	4798      	blx	r3

  return USBD_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3708      	adds	r7, #8
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b082      	sub	sp, #8
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800479a:	6839      	ldr	r1, [r7, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fef7 	bl	8005590 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2201      	movs	r2, #1
 80047a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80047b0:	461a      	mov	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d00c      	beq.n	80047e0 <USBD_LL_SetupStage+0x56>
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d302      	bcc.n	80047d0 <USBD_LL_SetupStage+0x46>
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d010      	beq.n	80047f0 <USBD_LL_SetupStage+0x66>
 80047ce:	e017      	b.n	8004800 <USBD_LL_SetupStage+0x76>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80047d6:	4619      	mov	r1, r3
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f000 f9cd 	bl	8004b78 <USBD_StdDevReq>
      break;
 80047de:	e01a      	b.n	8004816 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80047e6:	4619      	mov	r1, r3
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 fa2f 	bl	8004c4c <USBD_StdItfReq>
      break;
 80047ee:	e012      	b.n	8004816 <USBD_LL_SetupStage+0x8c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80047f6:	4619      	mov	r1, r3
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fa6d 	bl	8004cd8 <USBD_StdEPReq>
      break;
 80047fe:	e00a      	b.n	8004816 <USBD_LL_SetupStage+0x8c>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8004806:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800480a:	b2db      	uxtb	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f001 fdd0 	bl	80063b4 <USBD_LL_StallEP>
      break;
 8004814:	bf00      	nop
  }

  return USBD_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	460b      	mov	r3, r1
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800482e:	7afb      	ldrb	r3, [r7, #11]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d14b      	bne.n	80048cc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800483a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004842:	2b03      	cmp	r3, #3
 8004844:	d134      	bne.n	80048b0 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	697b      	ldr	r3, [r7, #20]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	429a      	cmp	r2, r3
 8004850:	d919      	bls.n	8004886 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	1ad2      	subs	r2, r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004868:	429a      	cmp	r2, r3
 800486a:	d203      	bcs.n	8004874 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8004870:	b29b      	uxth	r3, r3
 8004872:	e002      	b.n	800487a <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8004878:	b29b      	uxth	r3, r3
 800487a:	461a      	mov	r2, r3
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 ff7a 	bl	8005778 <USBD_CtlContinueRx>
 8004884:	e038      	b.n	80048f8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8004898:	2b03      	cmp	r3, #3
 800489a:	d105      	bne.n	80048a8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048a2:	691b      	ldr	r3, [r3, #16]
 80048a4:	68f8      	ldr	r0, [r7, #12]
 80048a6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 80048a8:	68f8      	ldr	r0, [r7, #12]
 80048aa:	f000 ff77 	bl	800579c <USBD_CtlSendStatus>
 80048ae:	e023      	b.n	80048f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80048b6:	2b05      	cmp	r3, #5
 80048b8:	d11e      	bne.n	80048f8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80048c2:	2100      	movs	r1, #0
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f001 fd75 	bl	80063b4 <USBD_LL_StallEP>
 80048ca:	e015      	b.n	80048f8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048d2:	699b      	ldr	r3, [r3, #24]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00d      	beq.n	80048f4 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d108      	bne.n	80048f4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80048e8:	699b      	ldr	r3, [r3, #24]
 80048ea:	7afa      	ldrb	r2, [r7, #11]
 80048ec:	4611      	mov	r1, r2
 80048ee:	68f8      	ldr	r0, [r7, #12]
 80048f0:	4798      	blx	r3
 80048f2:	e001      	b.n	80048f8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80048f4:	2302      	movs	r3, #2
 80048f6:	e000      	b.n	80048fa <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	460b      	mov	r3, r1
 800490c:	607a      	str	r2, [r7, #4]
 800490e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8004910:	7afb      	ldrb	r3, [r7, #11]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d17f      	bne.n	8004a16 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3314      	adds	r3, #20
 800491a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004922:	2b02      	cmp	r3, #2
 8004924:	d15c      	bne.n	80049e0 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	68da      	ldr	r2, [r3, #12]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	429a      	cmp	r2, r3
 8004930:	d915      	bls.n	800495e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004932:	697b      	ldr	r3, [r7, #20]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	1ad2      	subs	r2, r2, r3
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	b29b      	uxth	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f000 fee4 	bl	8005718 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004950:	2300      	movs	r3, #0
 8004952:	2200      	movs	r2, #0
 8004954:	2100      	movs	r1, #0
 8004956:	68f8      	ldr	r0, [r7, #12]
 8004958:	f001 fdd2 	bl	8006500 <USBD_LL_PrepareReceive>
 800495c:	e04e      	b.n	80049fc <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	6912      	ldr	r2, [r2, #16]
 8004966:	fbb3 f1f2 	udiv	r1, r3, r2
 800496a:	fb02 f201 	mul.w	r2, r2, r1
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d11c      	bne.n	80049ae <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	689a      	ldr	r2, [r3, #8]
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800497c:	429a      	cmp	r2, r3
 800497e:	d316      	bcc.n	80049ae <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800498a:	429a      	cmp	r2, r3
 800498c:	d20f      	bcs.n	80049ae <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800498e:	2200      	movs	r2, #0
 8004990:	2100      	movs	r1, #0
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 fec0 	bl	8005718 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80049a0:	2300      	movs	r3, #0
 80049a2:	2200      	movs	r2, #0
 80049a4:	2100      	movs	r1, #0
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f001 fdaa 	bl	8006500 <USBD_LL_PrepareReceive>
 80049ac:	e026      	b.n	80049fc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80049c0:	2b03      	cmp	r3, #3
 80049c2:	d105      	bne.n	80049d0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80049d0:	2180      	movs	r1, #128	; 0x80
 80049d2:	68f8      	ldr	r0, [r7, #12]
 80049d4:	f001 fcee 	bl	80063b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fef2 	bl	80057c2 <USBD_CtlReceiveStatus>
 80049de:	e00d      	b.n	80049fc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80049e6:	2b04      	cmp	r3, #4
 80049e8:	d004      	beq.n	80049f4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d103      	bne.n	80049fc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f001 fcdc 	bl	80063b4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d11d      	bne.n	8004a42 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f7ff fe82 	bl	8004710 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a14:	e015      	b.n	8004a42 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00d      	beq.n	8004a3e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004a28:	2b03      	cmp	r3, #3
 8004a2a:	d108      	bne.n	8004a3e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004a32:	695b      	ldr	r3, [r3, #20]
 8004a34:	7afa      	ldrb	r2, [r7, #11]
 8004a36:	4611      	mov	r1, r2
 8004a38:	68f8      	ldr	r0, [r7, #12]
 8004a3a:	4798      	blx	r3
 8004a3c:	e001      	b.n	8004a42 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004a3e:	2302      	movs	r3, #2
 8004a40:	e000      	b.n	8004a44 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3718      	adds	r7, #24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b082      	sub	sp, #8
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a54:	2340      	movs	r3, #64	; 0x40
 8004a56:	2200      	movs	r2, #0
 8004a58:	2100      	movs	r1, #0
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f001 fc65 	bl	800632a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2240      	movs	r2, #64	; 0x40
 8004a6c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004a70:	2340      	movs	r3, #64	; 0x40
 8004a72:	2200      	movs	r2, #0
 8004a74:	2180      	movs	r1, #128	; 0x80
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f001 fc57 	bl	800632a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2240      	movs	r2, #64	; 0x40
 8004a86:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6852      	ldr	r2, [r2, #4]
 8004abc:	b2d2      	uxtb	r2, r2
 8004abe:	4611      	mov	r1, r2
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	4798      	blx	r3
  }

  return USBD_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3708      	adds	r7, #8
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}

08004ace <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004ace:	b480      	push	{r7}
 8004ad0:	b083      	sub	sp, #12
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	78fa      	ldrb	r2, [r7, #3]
 8004ade:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr

08004aee <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004aee:	b480      	push	{r7}
 8004af0:	b083      	sub	sp, #12
 8004af2:	af00      	add	r7, sp, #0
 8004af4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2204      	movs	r2, #4
 8004b06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b083      	sub	sp, #12
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	d105      	bne.n	8004b36 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr

08004b44 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b52:	2b03      	cmp	r3, #3
 8004b54:	d10b      	bne.n	8004b6e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004b68:	69db      	ldr	r3, [r3, #28]
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004b8e:	2b20      	cmp	r3, #32
 8004b90:	d004      	beq.n	8004b9c <USBD_StdDevReq+0x24>
 8004b92:	2b40      	cmp	r3, #64	; 0x40
 8004b94:	d002      	beq.n	8004b9c <USBD_StdDevReq+0x24>
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d008      	beq.n	8004bac <USBD_StdDevReq+0x34>
 8004b9a:	e04c      	b.n	8004c36 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	6839      	ldr	r1, [r7, #0]
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	4798      	blx	r3
      break;
 8004baa:	e049      	b.n	8004c40 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	785b      	ldrb	r3, [r3, #1]
 8004bb0:	2b09      	cmp	r3, #9
 8004bb2:	d83a      	bhi.n	8004c2a <USBD_StdDevReq+0xb2>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <USBD_StdDevReq+0x44>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004c0d 	.word	0x08004c0d
 8004bc0:	08004c21 	.word	0x08004c21
 8004bc4:	08004c2b 	.word	0x08004c2b
 8004bc8:	08004c17 	.word	0x08004c17
 8004bcc:	08004c2b 	.word	0x08004c2b
 8004bd0:	08004bef 	.word	0x08004bef
 8004bd4:	08004be5 	.word	0x08004be5
 8004bd8:	08004c2b 	.word	0x08004c2b
 8004bdc:	08004c03 	.word	0x08004c03
 8004be0:	08004bf9 	.word	0x08004bf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8004be4:	6839      	ldr	r1, [r7, #0]
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f9d4 	bl	8004f94 <USBD_GetDescriptor>
          break;
 8004bec:	e022      	b.n	8004c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8004bee:	6839      	ldr	r1, [r7, #0]
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 fb61 	bl	80052b8 <USBD_SetAddress>
          break;
 8004bf6:	e01d      	b.n	8004c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8004bf8:	6839      	ldr	r1, [r7, #0]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fb9e 	bl	800533c <USBD_SetConfig>
          break;
 8004c00:	e018      	b.n	8004c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8004c02:	6839      	ldr	r1, [r7, #0]
 8004c04:	6878      	ldr	r0, [r7, #4]
 8004c06:	f000 fc27 	bl	8005458 <USBD_GetConfig>
          break;
 8004c0a:	e013      	b.n	8004c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8004c0c:	6839      	ldr	r1, [r7, #0]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fc56 	bl	80054c0 <USBD_GetStatus>
          break;
 8004c14:	e00e      	b.n	8004c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8004c16:	6839      	ldr	r1, [r7, #0]
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fc84 	bl	8005526 <USBD_SetFeature>
          break;
 8004c1e:	e009      	b.n	8004c34 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8004c20:	6839      	ldr	r1, [r7, #0]
 8004c22:	6878      	ldr	r0, [r7, #4]
 8004c24:	f000 fc93 	bl	800554e <USBD_ClrFeature>
          break;
 8004c28:	e004      	b.n	8004c34 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8004c2a:	6839      	ldr	r1, [r7, #0]
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 fcec 	bl	800560a <USBD_CtlError>
          break;
 8004c32:	bf00      	nop
      }
      break;
 8004c34:	e004      	b.n	8004c40 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8004c36:	6839      	ldr	r1, [r7, #0]
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fce6 	bl	800560a <USBD_CtlError>
      break;
 8004c3e:	bf00      	nop
  }

  return ret;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop

08004c4c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004c56:	2300      	movs	r3, #0
 8004c58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d003      	beq.n	8004c6e <USBD_StdItfReq+0x22>
 8004c66:	2b40      	cmp	r3, #64	; 0x40
 8004c68:	d001      	beq.n	8004c6e <USBD_StdItfReq+0x22>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d12a      	bne.n	8004cc4 <USBD_StdItfReq+0x78>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c74:	3b01      	subs	r3, #1
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d81d      	bhi.n	8004cb6 <USBD_StdItfReq+0x6a>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	889b      	ldrh	r3, [r3, #4]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d813      	bhi.n	8004cac <USBD_StdItfReq+0x60>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	6839      	ldr	r1, [r7, #0]
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
 8004c92:	4603      	mov	r3, r0
 8004c94:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	88db      	ldrh	r3, [r3, #6]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d110      	bne.n	8004cc0 <USBD_StdItfReq+0x74>
 8004c9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10d      	bne.n	8004cc0 <USBD_StdItfReq+0x74>
            {
              USBD_CtlSendStatus(pdev);
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f000 fd79 	bl	800579c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8004caa:	e009      	b.n	8004cc0 <USBD_StdItfReq+0x74>
            USBD_CtlError(pdev, req);
 8004cac:	6839      	ldr	r1, [r7, #0]
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fcab 	bl	800560a <USBD_CtlError>
          break;
 8004cb4:	e004      	b.n	8004cc0 <USBD_StdItfReq+0x74>

        default:
          USBD_CtlError(pdev, req);
 8004cb6:	6839      	ldr	r1, [r7, #0]
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fca6 	bl	800560a <USBD_CtlError>
          break;
 8004cbe:	e000      	b.n	8004cc2 <USBD_StdItfReq+0x76>
          break;
 8004cc0:	bf00      	nop
      }
      break;
 8004cc2:	e004      	b.n	8004cce <USBD_StdItfReq+0x82>

    default:
      USBD_CtlError(pdev, req);
 8004cc4:	6839      	ldr	r1, [r7, #0]
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 fc9f 	bl	800560a <USBD_CtlError>
      break;
 8004ccc:	bf00      	nop
  }

  return USBD_OK;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b084      	sub	sp, #16
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	889b      	ldrh	r3, [r3, #4]
 8004cea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004cf4:	2b20      	cmp	r3, #32
 8004cf6:	d004      	beq.n	8004d02 <USBD_StdEPReq+0x2a>
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d002      	beq.n	8004d02 <USBD_StdEPReq+0x2a>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <USBD_StdEPReq+0x3a>
 8004d00:	e13d      	b.n	8004f7e <USBD_StdEPReq+0x2a6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	6839      	ldr	r1, [r7, #0]
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	4798      	blx	r3
      break;
 8004d10:	e13a      	b.n	8004f88 <USBD_StdEPReq+0x2b0>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d1a:	2b20      	cmp	r3, #32
 8004d1c:	d10a      	bne.n	8004d34 <USBD_StdEPReq+0x5c>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	6839      	ldr	r1, [r7, #0]
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	4798      	blx	r3
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	73fb      	strb	r3, [r7, #15]

        return ret;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	e12a      	b.n	8004f8a <USBD_StdEPReq+0x2b2>
      }

      switch (req->bRequest)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	785b      	ldrb	r3, [r3, #1]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d03e      	beq.n	8004dba <USBD_StdEPReq+0xe2>
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d002      	beq.n	8004d46 <USBD_StdEPReq+0x6e>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d070      	beq.n	8004e26 <USBD_StdEPReq+0x14e>
 8004d44:	e115      	b.n	8004f72 <USBD_StdEPReq+0x29a>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d002      	beq.n	8004d56 <USBD_StdEPReq+0x7e>
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d015      	beq.n	8004d80 <USBD_StdEPReq+0xa8>
 8004d54:	e02b      	b.n	8004dae <USBD_StdEPReq+0xd6>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004d56:	7bbb      	ldrb	r3, [r7, #14]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d00c      	beq.n	8004d76 <USBD_StdEPReq+0x9e>
 8004d5c:	7bbb      	ldrb	r3, [r7, #14]
 8004d5e:	2b80      	cmp	r3, #128	; 0x80
 8004d60:	d009      	beq.n	8004d76 <USBD_StdEPReq+0x9e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004d62:	7bbb      	ldrb	r3, [r7, #14]
 8004d64:	4619      	mov	r1, r3
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f001 fb24 	bl	80063b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f001 fb20 	bl	80063b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004d74:	e020      	b.n	8004db8 <USBD_StdEPReq+0xe0>
                USBD_CtlError(pdev, req);
 8004d76:	6839      	ldr	r1, [r7, #0]
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fc46 	bl	800560a <USBD_CtlError>
              break;
 8004d7e:	e01b      	b.n	8004db8 <USBD_StdEPReq+0xe0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	885b      	ldrh	r3, [r3, #2]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d10e      	bne.n	8004da6 <USBD_StdEPReq+0xce>
              {
                if ((ep_addr != 0x00U) &&
 8004d88:	7bbb      	ldrb	r3, [r7, #14]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00b      	beq.n	8004da6 <USBD_StdEPReq+0xce>
 8004d8e:	7bbb      	ldrb	r3, [r7, #14]
 8004d90:	2b80      	cmp	r3, #128	; 0x80
 8004d92:	d008      	beq.n	8004da6 <USBD_StdEPReq+0xce>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	88db      	ldrh	r3, [r3, #6]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d104      	bne.n	8004da6 <USBD_StdEPReq+0xce>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8004d9c:	7bbb      	ldrb	r3, [r7, #14]
 8004d9e:	4619      	mov	r1, r3
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 fb07 	bl	80063b4 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fcf8 	bl	800579c <USBD_CtlSendStatus>

              break;
 8004dac:	e004      	b.n	8004db8 <USBD_StdEPReq+0xe0>

            default:
              USBD_CtlError(pdev, req);
 8004dae:	6839      	ldr	r1, [r7, #0]
 8004db0:	6878      	ldr	r0, [r7, #4]
 8004db2:	f000 fc2a 	bl	800560a <USBD_CtlError>
              break;
 8004db6:	bf00      	nop
          }
          break;
 8004db8:	e0e0      	b.n	8004f7c <USBD_StdEPReq+0x2a4>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d002      	beq.n	8004dca <USBD_StdEPReq+0xf2>
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d015      	beq.n	8004df4 <USBD_StdEPReq+0x11c>
 8004dc8:	e026      	b.n	8004e18 <USBD_StdEPReq+0x140>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004dca:	7bbb      	ldrb	r3, [r7, #14]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d00c      	beq.n	8004dea <USBD_StdEPReq+0x112>
 8004dd0:	7bbb      	ldrb	r3, [r7, #14]
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d009      	beq.n	8004dea <USBD_StdEPReq+0x112>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8004dd6:	7bbb      	ldrb	r3, [r7, #14]
 8004dd8:	4619      	mov	r1, r3
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f001 faea 	bl	80063b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8004de0:	2180      	movs	r1, #128	; 0x80
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f001 fae6 	bl	80063b4 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8004de8:	e01c      	b.n	8004e24 <USBD_StdEPReq+0x14c>
                USBD_CtlError(pdev, req);
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fc0c 	bl	800560a <USBD_CtlError>
              break;
 8004df2:	e017      	b.n	8004e24 <USBD_StdEPReq+0x14c>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	885b      	ldrh	r3, [r3, #2]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d112      	bne.n	8004e22 <USBD_StdEPReq+0x14a>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8004dfc:	7bbb      	ldrb	r3, [r7, #14]
 8004dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d004      	beq.n	8004e10 <USBD_StdEPReq+0x138>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8004e06:	7bbb      	ldrb	r3, [r7, #14]
 8004e08:	4619      	mov	r1, r3
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f001 faf1 	bl	80063f2 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8004e10:	6878      	ldr	r0, [r7, #4]
 8004e12:	f000 fcc3 	bl	800579c <USBD_CtlSendStatus>
              }
              break;
 8004e16:	e004      	b.n	8004e22 <USBD_StdEPReq+0x14a>

            default:
              USBD_CtlError(pdev, req);
 8004e18:	6839      	ldr	r1, [r7, #0]
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fbf5 	bl	800560a <USBD_CtlError>
              break;
 8004e20:	e000      	b.n	8004e24 <USBD_StdEPReq+0x14c>
              break;
 8004e22:	bf00      	nop
          }
          break;
 8004e24:	e0aa      	b.n	8004f7c <USBD_StdEPReq+0x2a4>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d002      	beq.n	8004e36 <USBD_StdEPReq+0x15e>
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d032      	beq.n	8004e9a <USBD_StdEPReq+0x1c2>
 8004e34:	e097      	b.n	8004f66 <USBD_StdEPReq+0x28e>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004e36:	7bbb      	ldrb	r3, [r7, #14]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d007      	beq.n	8004e4c <USBD_StdEPReq+0x174>
 8004e3c:	7bbb      	ldrb	r3, [r7, #14]
 8004e3e:	2b80      	cmp	r3, #128	; 0x80
 8004e40:	d004      	beq.n	8004e4c <USBD_StdEPReq+0x174>
              {
                USBD_CtlError(pdev, req);
 8004e42:	6839      	ldr	r1, [r7, #0]
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 fbe0 	bl	800560a <USBD_CtlError>
                break;
 8004e4a:	e091      	b.n	8004f70 <USBD_StdEPReq+0x298>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	da0b      	bge.n	8004e6c <USBD_StdEPReq+0x194>
 8004e54:	7bbb      	ldrb	r3, [r7, #14]
 8004e56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	3310      	adds	r3, #16
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	4413      	add	r3, r2
 8004e68:	3304      	adds	r3, #4
 8004e6a:	e00b      	b.n	8004e84 <USBD_StdEPReq+0x1ac>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004e6c:	7bbb      	ldrb	r3, [r7, #14]
 8004e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	4413      	add	r3, r2
 8004e82:	3304      	adds	r3, #4
 8004e84:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2202      	movs	r2, #2
 8004e90:	4619      	mov	r1, r3
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fc24 	bl	80056e0 <USBD_CtlSendData>
              break;
 8004e98:	e06a      	b.n	8004f70 <USBD_StdEPReq+0x298>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8004e9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	da11      	bge.n	8004ec6 <USBD_StdEPReq+0x1ee>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8004ea2:	7bbb      	ldrb	r3, [r7, #14]
 8004ea4:	f003 020f 	and.w	r2, r3, #15
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	4413      	add	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	440b      	add	r3, r1
 8004eb4:	3318      	adds	r3, #24
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d117      	bne.n	8004eec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004ebc:	6839      	ldr	r1, [r7, #0]
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 fba3 	bl	800560a <USBD_CtlError>
                  break;
 8004ec4:	e054      	b.n	8004f70 <USBD_StdEPReq+0x298>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8004ec6:	7bbb      	ldrb	r3, [r7, #14]
 8004ec8:	f003 020f 	and.w	r2, r3, #15
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d104      	bne.n	8004eec <USBD_StdEPReq+0x214>
                {
                  USBD_CtlError(pdev, req);
 8004ee2:	6839      	ldr	r1, [r7, #0]
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fb90 	bl	800560a <USBD_CtlError>
                  break;
 8004eea:	e041      	b.n	8004f70 <USBD_StdEPReq+0x298>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	da0b      	bge.n	8004f0c <USBD_StdEPReq+0x234>
 8004ef4:	7bbb      	ldrb	r3, [r7, #14]
 8004ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004efa:	4613      	mov	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	4413      	add	r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	3310      	adds	r3, #16
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	4413      	add	r3, r2
 8004f08:	3304      	adds	r3, #4
 8004f0a:	e00b      	b.n	8004f24 <USBD_StdEPReq+0x24c>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8004f0c:	7bbb      	ldrb	r3, [r7, #14]
 8004f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004f12:	4613      	mov	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	4413      	add	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004f1e:	687a      	ldr	r2, [r7, #4]
 8004f20:	4413      	add	r3, r2
 8004f22:	3304      	adds	r3, #4
 8004f24:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8004f26:	7bbb      	ldrb	r3, [r7, #14]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <USBD_StdEPReq+0x25a>
 8004f2c:	7bbb      	ldrb	r3, [r7, #14]
 8004f2e:	2b80      	cmp	r3, #128	; 0x80
 8004f30:	d103      	bne.n	8004f3a <USBD_StdEPReq+0x262>
              {
                pep->status = 0x0000U;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	e00e      	b.n	8004f58 <USBD_StdEPReq+0x280>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8004f3a:	7bbb      	ldrb	r3, [r7, #14]
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f001 fa76 	bl	8006430 <USBD_LL_IsStallEP>
 8004f44:	4603      	mov	r3, r0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <USBD_StdEPReq+0x27a>
              {
                pep->status = 0x0001U;
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
 8004f50:	e002      	b.n	8004f58 <USBD_StdEPReq+0x280>
              }
              else
              {
                pep->status = 0x0000U;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2202      	movs	r2, #2
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fbbe 	bl	80056e0 <USBD_CtlSendData>
              break;
 8004f64:	e004      	b.n	8004f70 <USBD_StdEPReq+0x298>

            default:
              USBD_CtlError(pdev, req);
 8004f66:	6839      	ldr	r1, [r7, #0]
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fb4e 	bl	800560a <USBD_CtlError>
              break;
 8004f6e:	bf00      	nop
          }
          break;
 8004f70:	e004      	b.n	8004f7c <USBD_StdEPReq+0x2a4>

        default:
          USBD_CtlError(pdev, req);
 8004f72:	6839      	ldr	r1, [r7, #0]
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 fb48 	bl	800560a <USBD_CtlError>
          break;
 8004f7a:	bf00      	nop
      }
      break;
 8004f7c:	e004      	b.n	8004f88 <USBD_StdEPReq+0x2b0>

    default:
      USBD_CtlError(pdev, req);
 8004f7e:	6839      	ldr	r1, [r7, #0]
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fb42 	bl	800560a <USBD_CtlError>
      break;
 8004f86:	bf00      	nop
  }

  return ret;
 8004f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
	...

08004f94 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	885b      	ldrh	r3, [r3, #2]
 8004fae:	0a1b      	lsrs	r3, r3, #8
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	2b0e      	cmp	r3, #14
 8004fb6:	f200 8152 	bhi.w	800525e <USBD_GetDescriptor+0x2ca>
 8004fba:	a201      	add	r2, pc, #4	; (adr r2, 8004fc0 <USBD_GetDescriptor+0x2c>)
 8004fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc0:	08005031 	.word	0x08005031
 8004fc4:	08005049 	.word	0x08005049
 8004fc8:	08005089 	.word	0x08005089
 8004fcc:	0800525f 	.word	0x0800525f
 8004fd0:	0800525f 	.word	0x0800525f
 8004fd4:	080051ff 	.word	0x080051ff
 8004fd8:	0800522b 	.word	0x0800522b
 8004fdc:	0800525f 	.word	0x0800525f
 8004fe0:	0800525f 	.word	0x0800525f
 8004fe4:	0800525f 	.word	0x0800525f
 8004fe8:	0800525f 	.word	0x0800525f
 8004fec:	0800525f 	.word	0x0800525f
 8004ff0:	0800525f 	.word	0x0800525f
 8004ff4:	0800525f 	.word	0x0800525f
 8004ff8:	08004ffd 	.word	0x08004ffd
  {
#if (USBD_LPM_ENABLED == 1U)
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00b      	beq.n	8005020 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	7c12      	ldrb	r2, [r2, #16]
 8005014:	f107 0108 	add.w	r1, r7, #8
 8005018:	4610      	mov	r0, r2
 800501a:	4798      	blx	r3
 800501c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800501e:	e126      	b.n	800526e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005020:	6839      	ldr	r1, [r7, #0]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 faf1 	bl	800560a <USBD_CtlError>
        err++;
 8005028:	7afb      	ldrb	r3, [r7, #11]
 800502a:	3301      	adds	r3, #1
 800502c:	72fb      	strb	r3, [r7, #11]
      break;
 800502e:	e11e      	b.n	800526e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	7c12      	ldrb	r2, [r2, #16]
 800503c:	f107 0108 	add.w	r1, r7, #8
 8005040:	4610      	mov	r0, r2
 8005042:	4798      	blx	r3
 8005044:	60f8      	str	r0, [r7, #12]
      break;
 8005046:	e112      	b.n	800526e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	7c1b      	ldrb	r3, [r3, #16]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10d      	bne.n	800506c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	f107 0208 	add.w	r2, r7, #8
 800505c:	4610      	mov	r0, r2
 800505e:	4798      	blx	r3
 8005060:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3301      	adds	r3, #1
 8005066:	2202      	movs	r2, #2
 8005068:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800506a:	e100      	b.n	800526e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	f107 0208 	add.w	r2, r7, #8
 8005078:	4610      	mov	r0, r2
 800507a:	4798      	blx	r3
 800507c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	3301      	adds	r3, #1
 8005082:	2202      	movs	r2, #2
 8005084:	701a      	strb	r2, [r3, #0]
      break;
 8005086:	e0f2      	b.n	800526e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	885b      	ldrh	r3, [r3, #2]
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b05      	cmp	r3, #5
 8005090:	f200 80ac 	bhi.w	80051ec <USBD_GetDescriptor+0x258>
 8005094:	a201      	add	r2, pc, #4	; (adr r2, 800509c <USBD_GetDescriptor+0x108>)
 8005096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509a:	bf00      	nop
 800509c:	080050b5 	.word	0x080050b5
 80050a0:	080050e9 	.word	0x080050e9
 80050a4:	0800511d 	.word	0x0800511d
 80050a8:	08005151 	.word	0x08005151
 80050ac:	08005185 	.word	0x08005185
 80050b0:	080051b9 	.word	0x080051b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	7c12      	ldrb	r2, [r2, #16]
 80050cc:	f107 0108 	add.w	r1, r7, #8
 80050d0:	4610      	mov	r0, r2
 80050d2:	4798      	blx	r3
 80050d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80050d6:	e091      	b.n	80051fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80050d8:	6839      	ldr	r1, [r7, #0]
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa95 	bl	800560a <USBD_CtlError>
            err++;
 80050e0:	7afb      	ldrb	r3, [r7, #11]
 80050e2:	3301      	adds	r3, #1
 80050e4:	72fb      	strb	r3, [r7, #11]
          break;
 80050e6:	e089      	b.n	80051fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00b      	beq.n	800510c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	7c12      	ldrb	r2, [r2, #16]
 8005100:	f107 0108 	add.w	r1, r7, #8
 8005104:	4610      	mov	r0, r2
 8005106:	4798      	blx	r3
 8005108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800510a:	e077      	b.n	80051fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fa7b 	bl	800560a <USBD_CtlError>
            err++;
 8005114:	7afb      	ldrb	r3, [r7, #11]
 8005116:	3301      	adds	r3, #1
 8005118:	72fb      	strb	r3, [r7, #11]
          break;
 800511a:	e06f      	b.n	80051fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d00b      	beq.n	8005140 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	687a      	ldr	r2, [r7, #4]
 8005132:	7c12      	ldrb	r2, [r2, #16]
 8005134:	f107 0108 	add.w	r1, r7, #8
 8005138:	4610      	mov	r0, r2
 800513a:	4798      	blx	r3
 800513c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800513e:	e05d      	b.n	80051fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005140:	6839      	ldr	r1, [r7, #0]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 fa61 	bl	800560a <USBD_CtlError>
            err++;
 8005148:	7afb      	ldrb	r3, [r7, #11]
 800514a:	3301      	adds	r3, #1
 800514c:	72fb      	strb	r3, [r7, #11]
          break;
 800514e:	e055      	b.n	80051fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005156:	691b      	ldr	r3, [r3, #16]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d00b      	beq.n	8005174 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	7c12      	ldrb	r2, [r2, #16]
 8005168:	f107 0108 	add.w	r1, r7, #8
 800516c:	4610      	mov	r0, r2
 800516e:	4798      	blx	r3
 8005170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005172:	e043      	b.n	80051fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005174:	6839      	ldr	r1, [r7, #0]
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 fa47 	bl	800560a <USBD_CtlError>
            err++;
 800517c:	7afb      	ldrb	r3, [r7, #11]
 800517e:	3301      	adds	r3, #1
 8005180:	72fb      	strb	r3, [r7, #11]
          break;
 8005182:	e03b      	b.n	80051fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00b      	beq.n	80051a8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	7c12      	ldrb	r2, [r2, #16]
 800519c:	f107 0108 	add.w	r1, r7, #8
 80051a0:	4610      	mov	r0, r2
 80051a2:	4798      	blx	r3
 80051a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051a6:	e029      	b.n	80051fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80051a8:	6839      	ldr	r1, [r7, #0]
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa2d 	bl	800560a <USBD_CtlError>
            err++;
 80051b0:	7afb      	ldrb	r3, [r7, #11]
 80051b2:	3301      	adds	r3, #1
 80051b4:	72fb      	strb	r3, [r7, #11]
          break;
 80051b6:	e021      	b.n	80051fc <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d00b      	beq.n	80051dc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	687a      	ldr	r2, [r7, #4]
 80051ce:	7c12      	ldrb	r2, [r2, #16]
 80051d0:	f107 0108 	add.w	r1, r7, #8
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
 80051d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80051da:	e00f      	b.n	80051fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80051dc:	6839      	ldr	r1, [r7, #0]
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fa13 	bl	800560a <USBD_CtlError>
            err++;
 80051e4:	7afb      	ldrb	r3, [r7, #11]
 80051e6:	3301      	adds	r3, #1
 80051e8:	72fb      	strb	r3, [r7, #11]
          break;
 80051ea:	e007      	b.n	80051fc <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 fa0b 	bl	800560a <USBD_CtlError>
          err++;
 80051f4:	7afb      	ldrb	r3, [r7, #11]
 80051f6:	3301      	adds	r3, #1
 80051f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80051fa:	e038      	b.n	800526e <USBD_GetDescriptor+0x2da>
 80051fc:	e037      	b.n	800526e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7c1b      	ldrb	r3, [r3, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d109      	bne.n	800521a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800520c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800520e:	f107 0208 	add.w	r2, r7, #8
 8005212:	4610      	mov	r0, r2
 8005214:	4798      	blx	r3
 8005216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005218:	e029      	b.n	800526e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800521a:	6839      	ldr	r1, [r7, #0]
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f9f4 	bl	800560a <USBD_CtlError>
        err++;
 8005222:	7afb      	ldrb	r3, [r7, #11]
 8005224:	3301      	adds	r3, #1
 8005226:	72fb      	strb	r3, [r7, #11]
      break;
 8005228:	e021      	b.n	800526e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	7c1b      	ldrb	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d10d      	bne.n	800524e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523a:	f107 0208 	add.w	r2, r7, #8
 800523e:	4610      	mov	r0, r2
 8005240:	4798      	blx	r3
 8005242:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	3301      	adds	r3, #1
 8005248:	2207      	movs	r2, #7
 800524a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800524c:	e00f      	b.n	800526e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800524e:	6839      	ldr	r1, [r7, #0]
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f9da 	bl	800560a <USBD_CtlError>
        err++;
 8005256:	7afb      	ldrb	r3, [r7, #11]
 8005258:	3301      	adds	r3, #1
 800525a:	72fb      	strb	r3, [r7, #11]
      break;
 800525c:	e007      	b.n	800526e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800525e:	6839      	ldr	r1, [r7, #0]
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f9d2 	bl	800560a <USBD_CtlError>
      err++;
 8005266:	7afb      	ldrb	r3, [r7, #11]
 8005268:	3301      	adds	r3, #1
 800526a:	72fb      	strb	r3, [r7, #11]
      break;
 800526c:	bf00      	nop
  }

  if (err != 0U)
 800526e:	7afb      	ldrb	r3, [r7, #11]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d11c      	bne.n	80052ae <USBD_GetDescriptor+0x31a>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8005274:	893b      	ldrh	r3, [r7, #8]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d011      	beq.n	800529e <USBD_GetDescriptor+0x30a>
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	88db      	ldrh	r3, [r3, #6]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d00d      	beq.n	800529e <USBD_GetDescriptor+0x30a>
    {
      len = MIN(len, req->wLength);
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	88da      	ldrh	r2, [r3, #6]
 8005286:	893b      	ldrh	r3, [r7, #8]
 8005288:	4293      	cmp	r3, r2
 800528a:	bf28      	it	cs
 800528c:	4613      	movcs	r3, r2
 800528e:	b29b      	uxth	r3, r3
 8005290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005292:	893b      	ldrh	r3, [r7, #8]
 8005294:	461a      	mov	r2, r3
 8005296:	68f9      	ldr	r1, [r7, #12]
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fa21 	bl	80056e0 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	88db      	ldrh	r3, [r3, #6]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d104      	bne.n	80052b0 <USBD_GetDescriptor+0x31c>
    {
      (void)USBD_CtlSendStatus(pdev);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 fa78 	bl	800579c <USBD_CtlSendStatus>
 80052ac:	e000      	b.n	80052b0 <USBD_GetDescriptor+0x31c>
    return;
 80052ae:	bf00      	nop
    }
  }
}
 80052b0:	3710      	adds	r7, #16
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop

080052b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	889b      	ldrh	r3, [r3, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d130      	bne.n	800532c <USBD_SetAddress+0x74>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	88db      	ldrh	r3, [r3, #6]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d12c      	bne.n	800532c <USBD_SetAddress+0x74>
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	885b      	ldrh	r3, [r3, #2]
 80052d6:	2b7f      	cmp	r3, #127	; 0x7f
 80052d8:	d828      	bhi.n	800532c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	885b      	ldrh	r3, [r3, #2]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ec:	2b03      	cmp	r3, #3
 80052ee:	d104      	bne.n	80052fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 f989 	bl	800560a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80052f8:	e01c      	b.n	8005334 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	7bfa      	ldrb	r2, [r7, #15]
 80052fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005302:	7bfb      	ldrb	r3, [r7, #15]
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f001 f8b8 	bl	800647c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa45 	bl	800579c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005312:	7bfb      	ldrb	r3, [r7, #15]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d004      	beq.n	8005322 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005320:	e008      	b.n	8005334 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2201      	movs	r2, #1
 8005326:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800532a:	e003      	b.n	8005334 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800532c:	6839      	ldr	r1, [r7, #0]
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f96b 	bl	800560a <USBD_CtlError>
  }
}
 8005334:	bf00      	nop
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	885b      	ldrh	r3, [r3, #2]
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b41      	ldr	r3, [pc, #260]	; (8005454 <USBD_SetConfig+0x118>)
 800534e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005350:	4b40      	ldr	r3, [pc, #256]	; (8005454 <USBD_SetConfig+0x118>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d904      	bls.n	8005362 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8005358:	6839      	ldr	r1, [r7, #0]
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f955 	bl	800560a <USBD_CtlError>
 8005360:	e075      	b.n	800544e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005368:	2b02      	cmp	r3, #2
 800536a:	d002      	beq.n	8005372 <USBD_SetConfig+0x36>
 800536c:	2b03      	cmp	r3, #3
 800536e:	d023      	beq.n	80053b8 <USBD_SetConfig+0x7c>
 8005370:	e062      	b.n	8005438 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8005372:	4b38      	ldr	r3, [pc, #224]	; (8005454 <USBD_SetConfig+0x118>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d01a      	beq.n	80053b0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800537a:	4b36      	ldr	r3, [pc, #216]	; (8005454 <USBD_SetConfig+0x118>)
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	461a      	mov	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2203      	movs	r2, #3
 8005388:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800538c:	4b31      	ldr	r3, [pc, #196]	; (8005454 <USBD_SetConfig+0x118>)
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	4619      	mov	r1, r3
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7ff f9c7 	bl	8004726 <USBD_SetClassConfig>
 8005398:	4603      	mov	r3, r0
 800539a:	2b02      	cmp	r3, #2
 800539c:	d104      	bne.n	80053a8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 f932 	bl	800560a <USBD_CtlError>
            return;
 80053a6:	e052      	b.n	800544e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80053a8:	6878      	ldr	r0, [r7, #4]
 80053aa:	f000 f9f7 	bl	800579c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80053ae:	e04e      	b.n	800544e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 f9f3 	bl	800579c <USBD_CtlSendStatus>
        break;
 80053b6:	e04a      	b.n	800544e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80053b8:	4b26      	ldr	r3, [pc, #152]	; (8005454 <USBD_SetConfig+0x118>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d112      	bne.n	80053e6 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2202      	movs	r2, #2
 80053c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80053c8:	4b22      	ldr	r3, [pc, #136]	; (8005454 <USBD_SetConfig+0x118>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	461a      	mov	r2, r3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80053d2:	4b20      	ldr	r3, [pc, #128]	; (8005454 <USBD_SetConfig+0x118>)
 80053d4:	781b      	ldrb	r3, [r3, #0]
 80053d6:	4619      	mov	r1, r3
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff f9c3 	bl	8004764 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 f9dc 	bl	800579c <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80053e4:	e033      	b.n	800544e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80053e6:	4b1b      	ldr	r3, [pc, #108]	; (8005454 <USBD_SetConfig+0x118>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	685b      	ldr	r3, [r3, #4]
 80053f0:	429a      	cmp	r2, r3
 80053f2:	d01d      	beq.n	8005430 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	4619      	mov	r1, r3
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f7ff f9b1 	bl	8004764 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005402:	4b14      	ldr	r3, [pc, #80]	; (8005454 <USBD_SetConfig+0x118>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800540c:	4b11      	ldr	r3, [pc, #68]	; (8005454 <USBD_SetConfig+0x118>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	4619      	mov	r1, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff f987 	bl	8004726 <USBD_SetClassConfig>
 8005418:	4603      	mov	r3, r0
 800541a:	2b02      	cmp	r3, #2
 800541c:	d104      	bne.n	8005428 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800541e:	6839      	ldr	r1, [r7, #0]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f8f2 	bl	800560a <USBD_CtlError>
            return;
 8005426:	e012      	b.n	800544e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f9b7 	bl	800579c <USBD_CtlSendStatus>
        break;
 800542e:	e00e      	b.n	800544e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f9b3 	bl	800579c <USBD_CtlSendStatus>
        break;
 8005436:	e00a      	b.n	800544e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8005438:	6839      	ldr	r1, [r7, #0]
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f8e5 	bl	800560a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005440:	4b04      	ldr	r3, [pc, #16]	; (8005454 <USBD_SetConfig+0x118>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	4619      	mov	r1, r3
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7ff f98c 	bl	8004764 <USBD_ClrClassConfig>
        break;
 800544c:	bf00      	nop
    }
  }
}
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	20000110 	.word	0x20000110

08005458 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	88db      	ldrh	r3, [r3, #6]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d004      	beq.n	8005474 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f8cc 	bl	800560a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005472:	e021      	b.n	80054b8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800547a:	2b01      	cmp	r3, #1
 800547c:	db17      	blt.n	80054ae <USBD_GetConfig+0x56>
 800547e:	2b02      	cmp	r3, #2
 8005480:	dd02      	ble.n	8005488 <USBD_GetConfig+0x30>
 8005482:	2b03      	cmp	r3, #3
 8005484:	d00b      	beq.n	800549e <USBD_GetConfig+0x46>
 8005486:	e012      	b.n	80054ae <USBD_GetConfig+0x56>
        pdev->dev_default_config = 0U;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	3308      	adds	r3, #8
 8005492:	2201      	movs	r2, #1
 8005494:	4619      	mov	r1, r3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f000 f922 	bl	80056e0 <USBD_CtlSendData>
        break;
 800549c:	e00c      	b.n	80054b8 <USBD_GetConfig+0x60>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3304      	adds	r3, #4
 80054a2:	2201      	movs	r2, #1
 80054a4:	4619      	mov	r1, r3
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 f91a 	bl	80056e0 <USBD_CtlSendData>
        break;
 80054ac:	e004      	b.n	80054b8 <USBD_GetConfig+0x60>
        USBD_CtlError(pdev, req);
 80054ae:	6839      	ldr	r1, [r7, #0]
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 f8aa 	bl	800560a <USBD_CtlError>
        break;
 80054b6:	bf00      	nop
}
 80054b8:	bf00      	nop
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b082      	sub	sp, #8
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d0:	3b01      	subs	r3, #1
 80054d2:	2b02      	cmp	r3, #2
 80054d4:	d81e      	bhi.n	8005514 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	88db      	ldrh	r3, [r3, #6]
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d004      	beq.n	80054e8 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 f892 	bl	800560a <USBD_CtlError>
        break;
 80054e6:	e01a      	b.n	800551e <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d005      	beq.n	8005504 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f043 0202 	orr.w	r2, r3, #2
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	330c      	adds	r3, #12
 8005508:	2202      	movs	r2, #2
 800550a:	4619      	mov	r1, r3
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f000 f8e7 	bl	80056e0 <USBD_CtlSendData>
      break;
 8005512:	e004      	b.n	800551e <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8005514:	6839      	ldr	r1, [r7, #0]
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f877 	bl	800560a <USBD_CtlError>
      break;
 800551c:	bf00      	nop
  }
}
 800551e:	bf00      	nop
 8005520:	3708      	adds	r7, #8
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	885b      	ldrh	r3, [r3, #2]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d106      	bne.n	8005546 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 f92b 	bl	800579c <USBD_CtlSendStatus>
  }
}
 8005546:	bf00      	nop
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b082      	sub	sp, #8
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
 8005556:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800555e:	3b01      	subs	r3, #1
 8005560:	2b02      	cmp	r3, #2
 8005562:	d80b      	bhi.n	800557c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	885b      	ldrh	r3, [r3, #2]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d10c      	bne.n	8005586 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f911 	bl	800579c <USBD_CtlSendStatus>
      }
      break;
 800557a:	e004      	b.n	8005586 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800557c:	6839      	ldr	r1, [r7, #0]
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f843 	bl	800560a <USBD_CtlError>
      break;
 8005584:	e000      	b.n	8005588 <USBD_ClrFeature+0x3a>
      break;
 8005586:	bf00      	nop
  }
}
 8005588:	bf00      	nop
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}

08005590 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	781a      	ldrb	r2, [r3, #0]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	785a      	ldrb	r2, [r3, #1]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	3302      	adds	r3, #2
 80055ae:	781b      	ldrb	r3, [r3, #0]
 80055b0:	b29a      	uxth	r2, r3
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	3303      	adds	r3, #3
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	b29b      	uxth	r3, r3
 80055be:	4413      	add	r3, r2
 80055c0:	b29a      	uxth	r2, r3
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	3304      	adds	r3, #4
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	3305      	adds	r3, #5
 80055d2:	781b      	ldrb	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	b29b      	uxth	r3, r3
 80055da:	4413      	add	r3, r2
 80055dc:	b29a      	uxth	r2, r3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	3306      	adds	r3, #6
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	3307      	adds	r3, #7
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	021b      	lsls	r3, r3, #8
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	4413      	add	r3, r2
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	80da      	strh	r2, [r3, #6]

}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr

0800560a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b082      	sub	sp, #8
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8005614:	2180      	movs	r1, #128	; 0x80
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 fecc 	bl	80063b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800561c:	2100      	movs	r1, #0
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 fec8 	bl	80063b4 <USBD_LL_StallEP>
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}

0800562c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b086      	sub	sp, #24
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d032      	beq.n	80056a8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005642:	68f8      	ldr	r0, [r7, #12]
 8005644:	f000 f834 	bl	80056b0 <USBD_GetLen>
 8005648:	4603      	mov	r3, r0
 800564a:	3301      	adds	r3, #1
 800564c:	b29b      	uxth	r3, r3
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	b29a      	uxth	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005656:	7dfb      	ldrb	r3, [r7, #23]
 8005658:	1c5a      	adds	r2, r3, #1
 800565a:	75fa      	strb	r2, [r7, #23]
 800565c:	461a      	mov	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	4413      	add	r3, r2
 8005662:	687a      	ldr	r2, [r7, #4]
 8005664:	7812      	ldrb	r2, [r2, #0]
 8005666:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
 800566a:	1c5a      	adds	r2, r3, #1
 800566c:	75fa      	strb	r2, [r7, #23]
 800566e:	461a      	mov	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4413      	add	r3, r2
 8005674:	2203      	movs	r2, #3
 8005676:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8005678:	e012      	b.n	80056a0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	60fa      	str	r2, [r7, #12]
 8005680:	7dfa      	ldrb	r2, [r7, #23]
 8005682:	1c51      	adds	r1, r2, #1
 8005684:	75f9      	strb	r1, [r7, #23]
 8005686:	4611      	mov	r1, r2
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	440a      	add	r2, r1
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8005690:	7dfb      	ldrb	r3, [r7, #23]
 8005692:	1c5a      	adds	r2, r3, #1
 8005694:	75fa      	strb	r2, [r7, #23]
 8005696:	461a      	mov	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	4413      	add	r3, r2
 800569c:	2200      	movs	r2, #0
 800569e:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1e8      	bne.n	800567a <USBD_GetString+0x4e>
    }
  }
}
 80056a8:	bf00      	nop
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80056bc:	e005      	b.n	80056ca <USBD_GetLen+0x1a>
  {
    len++;
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	3301      	adds	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
    buf++;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	3301      	adds	r3, #1
 80056c8:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f5      	bne.n	80056be <USBD_GetLen+0xe>
  }

  return len;
 80056d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3714      	adds	r7, #20
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2202      	movs	r2, #2
 80056f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80056f6:	88fa      	ldrh	r2, [r7, #6]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80056fc:	88fa      	ldrh	r2, [r7, #6]
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	2100      	movs	r1, #0
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 fed6 	bl	80064ba <USBD_LL_Transmit>

  return USBD_OK;
 800570e:	2300      	movs	r3, #0
}
 8005710:	4618      	mov	r0, r3
 8005712:	3710      	adds	r7, #16
 8005714:	46bd      	mov	sp, r7
 8005716:	bd80      	pop	{r7, pc}

08005718 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	60f8      	str	r0, [r7, #12]
 8005720:	60b9      	str	r1, [r7, #8]
 8005722:	4613      	mov	r3, r2
 8005724:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	2100      	movs	r1, #0
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fec4 	bl	80064ba <USBD_LL_Transmit>

  return USBD_OK;
 8005732:	2300      	movs	r3, #0
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4613      	mov	r3, r2
 8005748:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2203      	movs	r2, #3
 800574e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8005752:	88fa      	ldrh	r2, [r7, #6]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005762:	88fb      	ldrh	r3, [r7, #6]
 8005764:	68ba      	ldr	r2, [r7, #8]
 8005766:	2100      	movs	r1, #0
 8005768:	68f8      	ldr	r0, [r7, #12]
 800576a:	f000 fec9 	bl	8006500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	4613      	mov	r3, r2
 8005784:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005786:	88fb      	ldrh	r3, [r7, #6]
 8005788:	68ba      	ldr	r2, [r7, #8]
 800578a:	2100      	movs	r1, #0
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f000 feb7 	bl	8006500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3710      	adds	r7, #16
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2204      	movs	r2, #4
 80057a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80057ac:	2300      	movs	r3, #0
 80057ae:	2200      	movs	r2, #0
 80057b0:	2100      	movs	r1, #0
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 fe81 	bl	80064ba <USBD_LL_Transmit>

  return USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b082      	sub	sp, #8
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2205      	movs	r2, #5
 80057ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80057d2:	2300      	movs	r3, #0
 80057d4:	2200      	movs	r2, #0
 80057d6:	2100      	movs	r1, #0
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fe91 	bl	8006500 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3708      	adds	r7, #8
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}

080057e8 <RING_init>:
 *  Created on: 7 cze 2020
 *      Author: Admin
 */
#include "RING.h"

void RING_init(Ring_type *ring) {
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
    ring->tail = ring->head = 0;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2ab1 	strb.w	r2, [r3, #2737]	; 0xab1
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f893 2ab1 	ldrb.w	r2, [r3, #2737]	; 0xab1
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f883 2ab0 	strb.w	r2, [r3, #2736]	; 0xab0
    ring->status = RING_IS_EMPTY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2ab2 	strb.w	r2, [r3, #2738]	; 0xab2
}
 800580c:	bf00      	nop
 800580e:	370c      	adds	r7, #12
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <RING_is_full>:

uint8_t RING_is_empty(Ring_type *ring){
    return (RING_IS_EMPTY == ring->status);
}

uint8_t RING_is_full(Ring_type *ring) {
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
    return (RING_IS_FULL == ring->status);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f893 3ab2 	ldrb.w	r3, [r3, #2738]	; 0xab2
 8005826:	2b02      	cmp	r3, #2
 8005828:	bf0c      	ite	eq
 800582a:	2301      	moveq	r3, #1
 800582c:	2300      	movne	r3, #0
 800582e:	b2db      	uxtb	r3, r3
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <RING_put>:

void RING_put(Ring_type *ring, uint8_t *data, uint32_t len) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
    if(RING_is_full(ring))
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f7ff ffe5 	bl	8005818 <RING_is_full>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d154      	bne.n	80058fe <RING_put+0xc2>
    	return;

    if(len > MAX_CAN_FRAME_SIZE)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2baa      	cmp	r3, #170	; 0xaa
 8005858:	d853      	bhi.n	8005902 <RING_put+0xc6>
    	return;

    memcpy(&(ring->data[ring->head][0]), data, len);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 8005860:	461a      	mov	r2, r3
 8005862:	23aa      	movs	r3, #170	; 0xaa
 8005864:	fb03 f302 	mul.w	r3, r3, r2
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	68b9      	ldr	r1, [r7, #8]
 8005870:	4618      	mov	r0, r3
 8005872:	f001 f857 	bl	8006924 <memcpy>
    if(len < MAX_CAN_FRAME_SIZE) {
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2ba9      	cmp	r3, #169	; 0xa9
 800587a:	d811      	bhi.n	80058a0 <RING_put+0x64>
        memset(&(ring->data[ring->head][len]), 1, MAX_CAN_FRAME_SIZE - len);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 8005882:	461a      	mov	r2, r3
 8005884:	23aa      	movs	r3, #170	; 0xaa
 8005886:	fb03 f202 	mul.w	r2, r3, r2
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	18d0      	adds	r0, r2, r3
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f1c3 03aa 	rsb	r3, r3, #170	; 0xaa
 8005898:	461a      	mov	r2, r3
 800589a:	2101      	movs	r1, #1
 800589c:	f001 f84d 	bl	800693a <memset>
    }
    ring->size[ring->head] = len;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 80058a6:	4619      	mov	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	b2da      	uxtb	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	440b      	add	r3, r1
 80058b0:	f883 2aa0 	strb.w	r2, [r3, #2720]	; 0xaa0
    ring->head++;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 80058ba:	3301      	adds	r3, #1
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	f883 2ab1 	strb.w	r2, [r3, #2737]	; 0xab1
    ring->status = RING_IS_NOT_FULL;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2ab2 	strb.w	r2, [r3, #2738]	; 0xab2
    if(ring->head >= UCAN_FRAME_RX_FIFO_SIZE){
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 80058d2:	2b0f      	cmp	r3, #15
 80058d4:	d903      	bls.n	80058de <RING_put+0xa2>
        ring->head = 0;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	f883 2ab1 	strb.w	r2, [r3, #2737]	; 0xab1
    }
    
    if((ring->head + 1) % UCAN_FRAME_RX_FIFO_SIZE == ring->tail) {
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f893 3ab1 	ldrb.w	r3, [r3, #2737]	; 0xab1
 80058e4:	3301      	adds	r3, #1
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	f892 2ab0 	ldrb.w	r2, [r2, #2736]	; 0xab0
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d107      	bne.n	8005904 <RING_put+0xc8>
        ring->status = RING_IS_FULL;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	2202      	movs	r2, #2
 80058f8:	f883 2ab2 	strb.w	r2, [r3, #2738]	; 0xab2
 80058fc:	e002      	b.n	8005904 <RING_put+0xc8>
    	return;
 80058fe:	bf00      	nop
 8005900:	e000      	b.n	8005904 <RING_put+0xc8>
    	return;
 8005902:	bf00      	nop
    }
}
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
	...

0800590c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
volatile static int counter = 1;
int main(void) {
 800590c:	b580      	push	{r7, lr}
 800590e:	b09e      	sub	sp, #120	; 0x78
 8005910:	af00      	add	r7, sp, #0

	/* USER CODE END 1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8005912:	f7fa fc81 	bl	8000218 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8005916:	f000 f867 	bl	80059e8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800591a:	f000 f935 	bl	8005b88 <MX_GPIO_Init>
	MX_USB_Device_Init();
 800591e:	f000 fa73 	bl	8005e08 <MX_USB_Device_Init>
	MX_FDCAN1_Init();
 8005922:	f000 f8eb 	bl	8005afc <MX_FDCAN1_Init>

	/* USER CODE BEGIN 2 */
	HAL_FDCAN_Start(&hfdcan1);
 8005926:	482c      	ldr	r0, [pc, #176]	; (80059d8 <main+0xcc>)
 8005928:	f7fa ff72 	bl	8000810 <HAL_FDCAN_Start>

	RING_init(&usb_rx);
 800592c:	482b      	ldr	r0, [pc, #172]	; (80059dc <main+0xd0>)
 800592e:	f7ff ff5b 	bl	80057e8 <RING_init>
  memset(usb_rx.data,0x55,32*64);
 8005932:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005936:	2155      	movs	r1, #85	; 0x55
 8005938:	4828      	ldr	r0, [pc, #160]	; (80059dc <main+0xd0>)
 800593a:	f000 fffe 	bl	800693a <memset>
	RING_init(&usb_tx);
 800593e:	4828      	ldr	r0, [pc, #160]	; (80059e0 <main+0xd4>)
 8005940:	f7ff ff52 	bl	80057e8 <RING_init>

	for (uint8_t i = 0; i < 10; i++) {
 8005944:	2300      	movs	r3, #0
 8005946:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800594a:	e011      	b.n	8005970 <main+0x64>
		HAL_Delay(i * 10);
 800594c:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	4618      	mov	r0, r3
 800595a:	f7fa fccd 	bl	80002f8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800595e:	2120      	movs	r1, #32
 8005960:	4820      	ldr	r0, [pc, #128]	; (80059e4 <main+0xd8>)
 8005962:	f7fb fbdb 	bl	800111c <HAL_GPIO_TogglePin>
	for (uint8_t i = 0; i < 10; i++) {
 8005966:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800596a:	3301      	adds	r3, #1
 800596c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005970:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8005974:	2b09      	cmp	r3, #9
 8005976:	d9e9      	bls.n	800594c <main+0x40>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint8_t TxData[8];
	FDCAN_TxHeaderTypeDef TxHeader;
	  /* Prepare Tx Header */
	  TxHeader.Identifier = 0x321;
 8005978:	f240 3321 	movw	r3, #801	; 0x321
 800597c:	64bb      	str	r3, [r7, #72]	; 0x48
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 800597e:	2300      	movs	r3, #0
 8005980:	64fb      	str	r3, [r7, #76]	; 0x4c
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8005982:	2300      	movs	r3, #0
 8005984:	653b      	str	r3, [r7, #80]	; 0x50
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 8005986:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800598a:	657b      	str	r3, [r7, #84]	; 0x54
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800598c:	2300      	movs	r3, #0
 800598e:	65bb      	str	r3, [r7, #88]	; 0x58
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8005990:	2300      	movs	r3, #0
 8005992:	65fb      	str	r3, [r7, #92]	; 0x5c
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 8005994:	2300      	movs	r3, #0
 8005996:	663b      	str	r3, [r7, #96]	; 0x60
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8005998:	2300      	movs	r3, #0
 800599a:	667b      	str	r3, [r7, #100]	; 0x64
	  TxHeader.MessageMarker = 0;
 800599c:	2300      	movs	r3, #0
 800599e:	66bb      	str	r3, [r7, #104]	; 0x68
	while(1) {
		HAL_Delay(1000);
 80059a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059a4:	f7fa fca8 	bl	80002f8 <HAL_Delay>
		/* Set the data to be transmitted */
		TxData[0] = 1;
 80059a8:	2301      	movs	r3, #1
 80059aa:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
		TxData[1] = 0xAD;
 80059ae:	23ad      	movs	r3, #173	; 0xad
 80059b0:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		TxData[7] = 0x36;
 80059b4:	2336      	movs	r3, #54	; 0x36
 80059b6:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
		/* Start the Transmission process */
		if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80059ba:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 80059be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80059c2:	4619      	mov	r1, r3
 80059c4:	4804      	ldr	r0, [pc, #16]	; (80059d8 <main+0xcc>)
 80059c6:	f7fa ff4b 	bl	8000860 <HAL_FDCAN_AddMessageToTxFifoQ>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d0e7      	beq.n	80059a0 <main+0x94>
		{
		  /* Transmission request Error */
		  Error_Handler();
 80059d0:	f000 f924 	bl	8005c1c <Error_Handler>
		HAL_Delay(1000);
 80059d4:	e7e4      	b.n	80059a0 <main+0x94>
 80059d6:	bf00      	nop
 80059d8:	20000c38 	.word	0x20000c38
 80059dc:	20000c9c 	.word	0x20000c9c
 80059e0:	20000184 	.word	0x20000184
 80059e4:	48000400 	.word	0x48000400

080059e8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b0aa      	sub	sp, #168	; 0xa8
 80059ec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80059ee:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80059f2:	2238      	movs	r2, #56	; 0x38
 80059f4:	2100      	movs	r1, #0
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 ff9f 	bl	800693a <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80059fc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	605a      	str	r2, [r3, #4]
 8005a06:	609a      	str	r2, [r3, #8]
 8005a08:	60da      	str	r2, [r3, #12]
 8005a0a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 8005a0c:	f107 0318 	add.w	r3, r7, #24
 8005a10:	2244      	movs	r2, #68	; 0x44
 8005a12:	2100      	movs	r1, #0
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 ff90 	bl	800693a <memset>
  RCC_CRSInitTypeDef pInit = {0};
 8005a1a:	463b      	mov	r3, r7
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	601a      	str	r2, [r3, #0]
 8005a20:	605a      	str	r2, [r3, #4]
 8005a22:	609a      	str	r2, [r3, #8]
 8005a24:	60da      	str	r2, [r3, #12]
 8005a26:	611a      	str	r2, [r3, #16]
 8005a28:	615a      	str	r2, [r3, #20]

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a2a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005a2e:	f7fc faa5 	bl	8001f7c <HAL_PWREx_ControlVoltageScaling>
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a32:	2302      	movs	r3, #2
 8005a34:	673b      	str	r3, [r7, #112]	; 0x70
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a3a:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005a3c:	2340      	movs	r3, #64	; 0x40
 8005a3e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a42:	2302      	movs	r3, #2
 8005a44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005a48:	2302      	movs	r3, #2
 8005a4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005a4e:	2302      	movs	r3, #2
 8005a50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLN = 36;
 8005a54:	2324      	movs	r3, #36	; 0x24
 8005a56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8005a60:	2306      	movs	r3, #6
 8005a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005a66:	2302      	movs	r3, #2
 8005a68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8005a6c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8005a70:	4618      	mov	r0, r3
 8005a72:	f7fc fb27 	bl	80020c4 <HAL_RCC_OscConfig>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <SystemClock_Config+0x98>
		Error_Handler();
 8005a7c:	f000 f8ce 	bl	8005c1c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8005a80:	230f      	movs	r3, #15
 8005a82:	65fb      	str	r3, [r7, #92]	; 0x5c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005a84:	2303      	movs	r3, #3
 8005a86:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a90:	2300      	movs	r3, #0
 8005a92:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8005a94:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8005a98:	2107      	movs	r1, #7
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fc fe2a 	bl	80026f4 <HAL_RCC_ClockConfig>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d001      	beq.n	8005aaa <SystemClock_Config+0xc2>
		Error_Handler();
 8005aa6:	f000 f8b9 	bl	8005c1c <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInit.PeriphClockSelection =
 8005aaa:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8005aae:	61bb      	str	r3, [r7, #24]
	RCC_PERIPHCLK_USB | RCC_PERIPHCLK_FDCAN;
	PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8005ab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005ab4:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8005ab6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aba:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 8005abc:	f107 0318 	add.w	r3, r7, #24
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fc fffb 	bl	8002abc <HAL_RCCEx_PeriphCLKConfig>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d001      	beq.n	8005ad0 <SystemClock_Config+0xe8>
		Error_Handler();
 8005acc:	f000 f8a6 	bl	8005c1c <Error_Handler>
	}
  /** Configures CRS 
  */
  pInit.Prescaler = RCC_CRS_SYNC_DIV1;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	603b      	str	r3, [r7, #0]
  pInit.Source = RCC_CRS_SYNC_SOURCE_USB;
 8005ad4:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8005ad8:	607b      	str	r3, [r7, #4]
  pInit.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8005ada:	2300      	movs	r3, #0
 8005adc:	60bb      	str	r3, [r7, #8]
  pInit.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,1000);
 8005ade:	f64b 337f 	movw	r3, #47999	; 0xbb7f
 8005ae2:	60fb      	str	r3, [r7, #12]
  pInit.ErrorLimitValue = 34;
 8005ae4:	2322      	movs	r3, #34	; 0x22
 8005ae6:	613b      	str	r3, [r7, #16]
  pInit.HSI48CalibrationValue = 32;
 8005ae8:	2320      	movs	r3, #32
 8005aea:	617b      	str	r3, [r7, #20]

  HAL_RCCEx_CRSConfig(&pInit);
 8005aec:	463b      	mov	r3, r7
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fd f9d4 	bl	8002e9c <HAL_RCCEx_CRSConfig>
}
 8005af4:	bf00      	nop
 8005af6:	37a8      	adds	r7, #168	; 0xa8
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <MX_FDCAN1_Init>:
/**
 * @brief FDCAN1 Initialization Function
 * @param None
 * @retval None
 */
void MX_FDCAN1_Init(void) {
 8005afc:	b580      	push	{r7, lr}
 8005afe:	af00      	add	r7, sp, #0
	/* USER CODE END FDCAN1_Init 0 */

	/* USER CODE BEGIN FDCAN1_Init 1 */

	/* USER CODE END FDCAN1_Init 1 */
	hfdcan1.Instance = FDCAN1;
 8005b00:	4b1f      	ldr	r3, [pc, #124]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b02:	4a20      	ldr	r2, [pc, #128]	; (8005b84 <MX_FDCAN1_Init+0x88>)
 8005b04:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV30;
 8005b06:	4b1e      	ldr	r3, [pc, #120]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b08:	220f      	movs	r2, #15
 8005b0a:	605a      	str	r2, [r3, #4]
	hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8005b0c:	4b1c      	ldr	r3, [pc, #112]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b0e:	2200      	movs	r2, #0
 8005b10:	609a      	str	r2, [r3, #8]
	hfdcan1.Init.Mode = FDCAN_MODE_EXTERNAL_LOOPBACK;
 8005b12:	4b1b      	ldr	r3, [pc, #108]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b14:	2204      	movs	r2, #4
 8005b16:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8005b18:	4b19      	ldr	r3, [pc, #100]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	741a      	strb	r2, [r3, #16]
	hfdcan1.Init.TransmitPause = DISABLE;
 8005b1e:	4b18      	ldr	r3, [pc, #96]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b20:	2200      	movs	r2, #0
 8005b22:	745a      	strb	r2, [r3, #17]
	hfdcan1.Init.ProtocolException = DISABLE;
 8005b24:	4b16      	ldr	r3, [pc, #88]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b26:	2200      	movs	r2, #0
 8005b28:	749a      	strb	r2, [r3, #18]
	hfdcan1.Init.NominalPrescaler = 1;
 8005b2a:	4b15      	ldr	r3, [pc, #84]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	615a      	str	r2, [r3, #20]
	hfdcan1.Init.NominalSyncJumpWidth = 1;
 8005b30:	4b13      	ldr	r3, [pc, #76]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b32:	2201      	movs	r2, #1
 8005b34:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 30;
 8005b36:	4b12      	ldr	r3, [pc, #72]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b38:	221e      	movs	r2, #30
 8005b3a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 16;
 8005b3c:	4b10      	ldr	r3, [pc, #64]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b3e:	2210      	movs	r2, #16
 8005b40:	621a      	str	r2, [r3, #32]
	hfdcan1.Init.DataPrescaler = 1;
 8005b42:	4b0f      	ldr	r3, [pc, #60]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	625a      	str	r2, [r3, #36]	; 0x24
	hfdcan1.Init.DataSyncJumpWidth = 1;
 8005b48:	4b0d      	ldr	r3, [pc, #52]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 30;
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b50:	221e      	movs	r2, #30
 8005b52:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 16;
 8005b54:	4b0a      	ldr	r3, [pc, #40]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b56:	2210      	movs	r2, #16
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
	hfdcan1.Init.StdFiltersNbr = 0;
 8005b5a:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	635a      	str	r2, [r3, #52]	; 0x34
	hfdcan1.Init.ExtFiltersNbr = 0;
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b62:	2200      	movs	r2, #0
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
	hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8005b66:	4b06      	ldr	r3, [pc, #24]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b68:	2200      	movs	r2, #0
 8005b6a:	63da      	str	r2, [r3, #60]	; 0x3c
	if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK) {
 8005b6c:	4804      	ldr	r0, [pc, #16]	; (8005b80 <MX_FDCAN1_Init+0x84>)
 8005b6e:	f7fa fcf5 	bl	800055c <HAL_FDCAN_Init>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d001      	beq.n	8005b7c <MX_FDCAN1_Init+0x80>
		Error_Handler();
 8005b78:	f000 f850 	bl	8005c1c <Error_Handler>
	}
	/* USER CODE BEGIN FDCAN1_Init 2 */

	/* USER CODE END FDCAN1_Init 2 */

}
 8005b7c:	bf00      	nop
 8005b7e:	bd80      	pop	{r7, pc}
 8005b80:	20000c38 	.word	0x20000c38
 8005b84:	40006400 	.word	0x40006400

08005b88 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b088      	sub	sp, #32
 8005b8c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8005b8e:	f107 030c 	add.w	r3, r7, #12
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	605a      	str	r2, [r3, #4]
 8005b98:	609a      	str	r2, [r3, #8]
 8005b9a:	60da      	str	r2, [r3, #12]
 8005b9c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <MX_GPIO_Init+0x8c>)
 8005ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ba2:	4a1c      	ldr	r2, [pc, #112]	; (8005c14 <MX_GPIO_Init+0x8c>)
 8005ba4:	f043 0320 	orr.w	r3, r3, #32
 8005ba8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005baa:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <MX_GPIO_Init+0x8c>)
 8005bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bae:	f003 0320 	and.w	r3, r3, #32
 8005bb2:	60bb      	str	r3, [r7, #8]
 8005bb4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8005bb6:	4b17      	ldr	r3, [pc, #92]	; (8005c14 <MX_GPIO_Init+0x8c>)
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bba:	4a16      	ldr	r2, [pc, #88]	; (8005c14 <MX_GPIO_Init+0x8c>)
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <MX_GPIO_Init+0x8c>)
 8005bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	607b      	str	r3, [r7, #4]
 8005bcc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <MX_GPIO_Init+0x8c>)
 8005bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bd2:	4a10      	ldr	r2, [pc, #64]	; (8005c14 <MX_GPIO_Init+0x8c>)
 8005bd4:	f043 0302 	orr.w	r3, r3, #2
 8005bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005bda:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <MX_GPIO_Init+0x8c>)
 8005bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005bde:	f003 0302 	and.w	r3, r3, #2
 8005be2:	603b      	str	r3, [r7, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8005be6:	2200      	movs	r2, #0
 8005be8:	2120      	movs	r1, #32
 8005bea:	480b      	ldr	r0, [pc, #44]	; (8005c18 <MX_GPIO_Init+0x90>)
 8005bec:	f7fb fa7e 	bl	80010ec <HAL_GPIO_WritePin>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8005bf0:	2320      	movs	r3, #32
 8005bf2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8005c00:	f107 030c 	add.w	r3, r7, #12
 8005c04:	4619      	mov	r1, r3
 8005c06:	4804      	ldr	r0, [pc, #16]	; (8005c18 <MX_GPIO_Init+0x90>)
 8005c08:	f7fb f8ee 	bl	8000de8 <HAL_GPIO_Init>

}
 8005c0c:	bf00      	nop
 8005c0e:	3720      	adds	r7, #32
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40021000 	.word	0x40021000
 8005c18:	48000400 	.word	0x48000400

08005c1c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005c1c:	b480      	push	{r7}
 8005c1e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8005c20:	bf00      	nop
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005c30:	4b05      	ldr	r3, [pc, #20]	; (8005c48 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	4a04      	ldr	r2, [pc, #16]	; (8005c48 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8005c36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c3a:	6093      	str	r3, [r2, #8]
}
 8005c3c:	bf00      	nop
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40007000 	.word	0x40007000

08005c4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b082      	sub	sp, #8
 8005c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c52:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <HAL_MspInit+0x44>)
 8005c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c56:	4a0e      	ldr	r2, [pc, #56]	; (8005c90 <HAL_MspInit+0x44>)
 8005c58:	f043 0301 	orr.w	r3, r3, #1
 8005c5c:	6613      	str	r3, [r2, #96]	; 0x60
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <HAL_MspInit+0x44>)
 8005c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	607b      	str	r3, [r7, #4]
 8005c68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_MspInit+0x44>)
 8005c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c6e:	4a08      	ldr	r2, [pc, #32]	; (8005c90 <HAL_MspInit+0x44>)
 8005c70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c74:	6593      	str	r3, [r2, #88]	; 0x58
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <HAL_MspInit+0x44>)
 8005c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c7e:	603b      	str	r3, [r7, #0]
 8005c80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8005c82:	f7ff ffd3 	bl	8005c2c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c86:	bf00      	nop
 8005c88:	3708      	adds	r7, #8
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	40021000 	.word	0x40021000

08005c94 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c9c:	f107 0314 	add.w	r3, r7, #20
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	605a      	str	r2, [r3, #4]
 8005ca6:	609a      	str	r2, [r3, #8]
 8005ca8:	60da      	str	r2, [r3, #12]
 8005caa:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a1b      	ldr	r2, [pc, #108]	; (8005d20 <HAL_FDCAN_MspInit+0x8c>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d130      	bne.n	8005d18 <HAL_FDCAN_MspInit+0x84>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005cb6:	4b1b      	ldr	r3, [pc, #108]	; (8005d24 <HAL_FDCAN_MspInit+0x90>)
 8005cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cba:	4a1a      	ldr	r2, [pc, #104]	; (8005d24 <HAL_FDCAN_MspInit+0x90>)
 8005cbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005cc0:	6593      	str	r3, [r2, #88]	; 0x58
 8005cc2:	4b18      	ldr	r3, [pc, #96]	; (8005d24 <HAL_FDCAN_MspInit+0x90>)
 8005cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cca:	613b      	str	r3, [r7, #16]
 8005ccc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cce:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <HAL_FDCAN_MspInit+0x90>)
 8005cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cd2:	4a14      	ldr	r2, [pc, #80]	; (8005d24 <HAL_FDCAN_MspInit+0x90>)
 8005cd4:	f043 0302 	orr.w	r3, r3, #2
 8005cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <HAL_FDCAN_MspInit+0x90>)
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	60fb      	str	r3, [r7, #12]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
    /**FDCAN1 GPIO Configuration    
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005ce6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cec:	2302      	movs	r3, #2
 8005cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8005cf8:	2309      	movs	r3, #9
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005cfc:	f107 0314 	add.w	r3, r7, #20
 8005d00:	4619      	mov	r1, r3
 8005d02:	4809      	ldr	r0, [pc, #36]	; (8005d28 <HAL_FDCAN_MspInit+0x94>)
 8005d04:	f7fb f870 	bl	8000de8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8005d08:	2200      	movs	r2, #0
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	2016      	movs	r0, #22
 8005d0e:	f7fa fbf0 	bl	80004f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8005d12:	2016      	movs	r0, #22
 8005d14:	f7fa fc07 	bl	8000526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8005d18:	bf00      	nop
 8005d1a:	3728      	adds	r7, #40	; 0x28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}
 8005d20:	40006400 	.word	0x40006400
 8005d24:	40021000 	.word	0x40021000
 8005d28:	48000400 	.word	0x48000400

08005d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005d30:	bf00      	nop
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005d3e:	e7fe      	b.n	8005d3e <HardFault_Handler+0x4>

08005d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005d44:	e7fe      	b.n	8005d44 <MemManage_Handler+0x4>

08005d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005d46:	b480      	push	{r7}
 8005d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005d4a:	e7fe      	b.n	8005d4a <BusFault_Handler+0x4>

08005d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005d50:	e7fe      	b.n	8005d50 <UsageFault_Handler+0x4>

08005d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005d52:	b480      	push	{r7}
 8005d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005d56:	bf00      	nop
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005d64:	bf00      	nop
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005d72:	bf00      	nop
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005d80:	f7fa fa9c 	bl	80002bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005d84:	bf00      	nop
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8005d8c:	4802      	ldr	r0, [pc, #8]	; (8005d98 <USB_LP_IRQHandler+0x10>)
 8005d8e:	f7fb fabb 	bl	8001308 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8005d92:	bf00      	nop
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	bf00      	nop
 8005d98:	200021e4 	.word	0x200021e4

08005d9c <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005da0:	4802      	ldr	r0, [pc, #8]	; (8005dac <FDCAN1_IT1_IRQHandler+0x10>)
 8005da2:	f7fa fda1 	bl	80008e8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8005da6:	bf00      	nop
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000c38 	.word	0x20000c38

08005db0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005db0:	b480      	push	{r7}
 8005db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005db4:	4b08      	ldr	r3, [pc, #32]	; (8005dd8 <SystemInit+0x28>)
 8005db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dba:	4a07      	ldr	r2, [pc, #28]	; (8005dd8 <SystemInit+0x28>)
 8005dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005dc4:	4b04      	ldr	r3, [pc, #16]	; (8005dd8 <SystemInit+0x28>)
 8005dc6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005dca:	609a      	str	r2, [r3, #8]
#endif
}
 8005dcc:	bf00      	nop
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop
 8005dd8:	e000ed00 	.word	0xe000ed00

08005ddc <UCAN_get_frame_size>:
		{ 0xAABBCCDD, 1213, 5566, 44, 55, 66, 0xAABBCCDD }, //FDCAN_InitTypeDef
		{ 2, 1, UCAN_CAN_FD, { 1, 2, 3, 4, 5 } } //FDCAN_Device_DescritionDef
};

uint32_t UCAN_get_frame_size(UCAN_FRAME_TYPE ucan_frame)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
			sizeof(UCAN_Get_CAN_Status),//UCAN_FD_GET_CAN_STATUS
			sizeof(UCAN_RxFrameDef), //UCAN_FD_RX
			sizeof(UCAN_AckFrameDef) //UCAN_FD_ACK
	};

	if ((uint32_t)ucan_frame < (uint32_t)UCAN_FD_LAST)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2b07      	cmp	r3, #7
 8005de8:	d804      	bhi.n	8005df4 <UCAN_get_frame_size+0x18>
		return sizeof_array[(uint32_t)ucan_frame];
 8005dea:	4a06      	ldr	r2, [pc, #24]	; (8005e04 <UCAN_get_frame_size+0x28>)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df2:	e000      	b.n	8005df6 <UCAN_get_frame_size+0x1a>
	else
		return 0;
 8005df4:	2300      	movs	r3, #0

}
 8005df6:	4618      	mov	r0, r3
 8005df8:	370c      	adds	r7, #12
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000070 	.word	0x20000070

08005e08 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */
  
  /* USER CODE END USB_Device_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	4912      	ldr	r1, [pc, #72]	; (8005e58 <MX_USB_Device_Init+0x50>)
 8005e10:	4812      	ldr	r0, [pc, #72]	; (8005e5c <MX_USB_Device_Init+0x54>)
 8005e12:	f7fe fc2c 	bl	800466e <USBD_Init>
 8005e16:	4603      	mov	r3, r0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d001      	beq.n	8005e20 <MX_USB_Device_Init+0x18>
    Error_Handler();
 8005e1c:	f7ff fefe 	bl	8005c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 8005e20:	490f      	ldr	r1, [pc, #60]	; (8005e60 <MX_USB_Device_Init+0x58>)
 8005e22:	480e      	ldr	r0, [pc, #56]	; (8005e5c <MX_USB_Device_Init+0x54>)
 8005e24:	f7fe fc4e 	bl	80046c4 <USBD_RegisterClass>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d001      	beq.n	8005e32 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 8005e2e:	f7ff fef5 	bl	8005c1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 8005e32:	490c      	ldr	r1, [pc, #48]	; (8005e64 <MX_USB_Device_Init+0x5c>)
 8005e34:	4809      	ldr	r0, [pc, #36]	; (8005e5c <MX_USB_Device_Init+0x54>)
 8005e36:	f7fe fbb1 	bl	800459c <USBD_CDC_RegisterInterface>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 8005e40:	f7ff feec 	bl	8005c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8005e44:	4805      	ldr	r0, [pc, #20]	; (8005e5c <MX_USB_Device_Init+0x54>)
 8005e46:	f7fe fc57 	bl	80046f8 <USBD_Start>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d001      	beq.n	8005e54 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 8005e50:	f7ff fee4 	bl	8005c1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */
  
  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8005e54:	bf00      	nop
 8005e56:	bd80      	pop	{r7, pc}
 8005e58:	200000a0 	.word	0x200000a0
 8005e5c:	20001750 	.word	0x20001750
 8005e60:	20000014 	.word	0x20000014
 8005e64:	20000090 	.word	0x20000090

08005e68 <CDC_Init_FS>:
/* Private functions ---------------------------------------------------------*/
/**
 * @brief  Initializes the CDC media low layer over the FS USB IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_FS(void) {
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 3 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	4905      	ldr	r1, [pc, #20]	; (8005e84 <CDC_Init_FS+0x1c>)
 8005e70:	4805      	ldr	r0, [pc, #20]	; (8005e88 <CDC_Init_FS+0x20>)
 8005e72:	f7fe fbaa 	bl	80045ca <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005e76:	4905      	ldr	r1, [pc, #20]	; (8005e8c <CDC_Init_FS+0x24>)
 8005e78:	4803      	ldr	r0, [pc, #12]	; (8005e88 <CDC_Init_FS+0x20>)
 8005e7a:	f7fe fbbe 	bl	80045fa <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8005e7e:	2300      	movs	r3, #0
	/* USER CODE END 3 */
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	bd80      	pop	{r7, pc}
 8005e84:	20001dfc 	.word	0x20001dfc
 8005e88:	20001750 	.word	0x20001750
 8005e8c:	20001a14 	.word	0x20001a14

08005e90 <CDC_DeInit_FS>:

/**
 * @brief  DeInitializes the CDC media low layer
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_FS(void) {
 8005e90:	b480      	push	{r7}
 8005e92:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 4 */
	return (USBD_OK);
 8005e94:	2300      	movs	r3, #0
	/* USER CODE END 4 */
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <CDC_Control_FS>:
 * @param  cmd: Command code
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t *pbuf, uint16_t length) {
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	6039      	str	r1, [r7, #0]
 8005eaa:	71fb      	strb	r3, [r7, #7]
 8005eac:	4613      	mov	r3, r2
 8005eae:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 5 */
	switch (cmd) {
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	2b23      	cmp	r3, #35	; 0x23
 8005eb4:	d84a      	bhi.n	8005f4c <CDC_Control_FS+0xac>
 8005eb6:	a201      	add	r2, pc, #4	; (adr r2, 8005ebc <CDC_Control_FS+0x1c>)
 8005eb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ebc:	08005f4d 	.word	0x08005f4d
 8005ec0:	08005f4d 	.word	0x08005f4d
 8005ec4:	08005f4d 	.word	0x08005f4d
 8005ec8:	08005f4d 	.word	0x08005f4d
 8005ecc:	08005f4d 	.word	0x08005f4d
 8005ed0:	08005f4d 	.word	0x08005f4d
 8005ed4:	08005f4d 	.word	0x08005f4d
 8005ed8:	08005f4d 	.word	0x08005f4d
 8005edc:	08005f4d 	.word	0x08005f4d
 8005ee0:	08005f4d 	.word	0x08005f4d
 8005ee4:	08005f4d 	.word	0x08005f4d
 8005ee8:	08005f4d 	.word	0x08005f4d
 8005eec:	08005f4d 	.word	0x08005f4d
 8005ef0:	08005f4d 	.word	0x08005f4d
 8005ef4:	08005f4d 	.word	0x08005f4d
 8005ef8:	08005f4d 	.word	0x08005f4d
 8005efc:	08005f4d 	.word	0x08005f4d
 8005f00:	08005f4d 	.word	0x08005f4d
 8005f04:	08005f4d 	.word	0x08005f4d
 8005f08:	08005f4d 	.word	0x08005f4d
 8005f0c:	08005f4d 	.word	0x08005f4d
 8005f10:	08005f4d 	.word	0x08005f4d
 8005f14:	08005f4d 	.word	0x08005f4d
 8005f18:	08005f4d 	.word	0x08005f4d
 8005f1c:	08005f4d 	.word	0x08005f4d
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	08005f4d 	.word	0x08005f4d
 8005f28:	08005f4d 	.word	0x08005f4d
 8005f2c:	08005f4d 	.word	0x08005f4d
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	08005f4d 	.word	0x08005f4d
 8005f38:	08005f4d 	.word	0x08005f4d
 8005f3c:	08005f4d 	.word	0x08005f4d
 8005f40:	08005f4d 	.word	0x08005f4d
 8005f44:	08005f4d 	.word	0x08005f4d
 8005f48:	08005f4d 	.word	0x08005f4d
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8005f4c:	bf00      	nop
	}

	return (USBD_OK);
 8005f4e:	2300      	movs	r3, #0
	/* USER CODE END 5 */
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <CDC_Receive_FS>:
 *
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_FS(uint8_t *Buf, uint32_t *Len) {
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 6 */
	uint32_t len = *Len;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]
	static uint32_t frame_size = 0;
	UCAN_InitFrameDef *dummy_frame = (UCAN_InitFrameDef*)Buf;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	60bb      	str	r3, [r7, #8]
	static uint32_t buff_offset = 0;
	static uint8_t* buff_start = NULL;

	if (buff_offset == 0)
 8005f70:	4b34      	ldr	r3, [pc, #208]	; (8006044 <CDC_Receive_FS+0xe8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d12f      	bne.n	8005fd8 <CDC_Receive_FS+0x7c>
	{
		frame_size = UCAN_get_frame_size(dummy_frame->frame_type);
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f7ff ff2d 	bl	8005ddc <UCAN_get_frame_size>
 8005f82:	4602      	mov	r2, r0
 8005f84:	4b30      	ldr	r3, [pc, #192]	; (8006048 <CDC_Receive_FS+0xec>)
 8005f86:	601a      	str	r2, [r3, #0]
		if ((frame_size == 0) || (frame_size < len))
 8005f88:	4b2f      	ldr	r3, [pc, #188]	; (8006048 <CDC_Receive_FS+0xec>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d004      	beq.n	8005f9a <CDC_Receive_FS+0x3e>
 8005f90:	4b2d      	ldr	r3, [pc, #180]	; (8006048 <CDC_Receive_FS+0xec>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	d903      	bls.n	8005fa2 <CDC_Receive_FS+0x46>
		{
			buff_offset = 0; // wrong data
 8005f9a:	4b2a      	ldr	r3, [pc, #168]	; (8006044 <CDC_Receive_FS+0xe8>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e03c      	b.n	800601c <CDC_Receive_FS+0xc0>
		} else
		{
			if (frame_size == len) {
 8005fa2:	4b29      	ldr	r3, [pc, #164]	; (8006048 <CDC_Receive_FS+0xec>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d109      	bne.n	8005fc0 <CDC_Receive_FS+0x64>
				RING_put(&usb_rx, Buf, frame_size);
 8005fac:	4b26      	ldr	r3, [pc, #152]	; (8006048 <CDC_Receive_FS+0xec>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	4825      	ldr	r0, [pc, #148]	; (800604c <CDC_Receive_FS+0xf0>)
 8005fb6:	f7ff fc41 	bl	800583c <RING_put>
				buff_offset = 0;
 8005fba:	4b22      	ldr	r3, [pc, #136]	; (8006044 <CDC_Receive_FS+0xe8>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	601a      	str	r2, [r3, #0]
			}
			if (frame_size > len) {
 8005fc0:	4b21      	ldr	r3, [pc, #132]	; (8006048 <CDC_Receive_FS+0xec>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d228      	bcs.n	800601c <CDC_Receive_FS+0xc0>
				buff_offset = len;
 8005fca:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <CDC_Receive_FS+0xe8>)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	6013      	str	r3, [r2, #0]
				buff_start = Buf;
 8005fd0:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <CDC_Receive_FS+0xf4>)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6013      	str	r3, [r2, #0]
 8005fd6:	e021      	b.n	800601c <CDC_Receive_FS+0xc0>
			}
		}
	} else
	{
		if (frame_size == (buff_offset + len)) // last packet rx
 8005fd8:	4b1a      	ldr	r3, [pc, #104]	; (8006044 <CDC_Receive_FS+0xe8>)
 8005fda:	681a      	ldr	r2, [r3, #0]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	441a      	add	r2, r3
 8005fe0:	4b19      	ldr	r3, [pc, #100]	; (8006048 <CDC_Receive_FS+0xec>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d10b      	bne.n	8006000 <CDC_Receive_FS+0xa4>
		{
			RING_put(&usb_rx, buff_start, frame_size);
 8005fe8:	4b19      	ldr	r3, [pc, #100]	; (8006050 <CDC_Receive_FS+0xf4>)
 8005fea:	6819      	ldr	r1, [r3, #0]
 8005fec:	4b16      	ldr	r3, [pc, #88]	; (8006048 <CDC_Receive_FS+0xec>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4816      	ldr	r0, [pc, #88]	; (800604c <CDC_Receive_FS+0xf0>)
 8005ff4:	f7ff fc22 	bl	800583c <RING_put>
			buff_offset = 0;
 8005ff8:	4b12      	ldr	r3, [pc, #72]	; (8006044 <CDC_Receive_FS+0xe8>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e00d      	b.n	800601c <CDC_Receive_FS+0xc0>
		} else
		{
			buff_offset += len;
 8006000:	4b10      	ldr	r3, [pc, #64]	; (8006044 <CDC_Receive_FS+0xe8>)
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	4413      	add	r3, r2
 8006008:	4a0e      	ldr	r2, [pc, #56]	; (8006044 <CDC_Receive_FS+0xe8>)
 800600a:	6013      	str	r3, [r2, #0]
			if (buff_offset > 300) // to long frame error, shold be max of UCAN_get_frame_size
 800600c:	4b0d      	ldr	r3, [pc, #52]	; (8006044 <CDC_Receive_FS+0xe8>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8006014:	d902      	bls.n	800601c <CDC_Receive_FS+0xc0>
				buff_offset = 0;
 8006016:	4b0b      	ldr	r3, [pc, #44]	; (8006044 <CDC_Receive_FS+0xe8>)
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]
		}
	}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[buff_offset]);
 800601c:	4b09      	ldr	r3, [pc, #36]	; (8006044 <CDC_Receive_FS+0xe8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	4619      	mov	r1, r3
 8006026:	480b      	ldr	r0, [pc, #44]	; (8006054 <CDC_Receive_FS+0xf8>)
 8006028:	f7fe fae7 	bl	80045fa <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800602c:	4809      	ldr	r0, [pc, #36]	; (8006054 <CDC_Receive_FS+0xf8>)
 800602e:	f7fe faf7 	bl	8004620 <USBD_CDC_ReceivePacket>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8006032:	2120      	movs	r1, #32
 8006034:	4808      	ldr	r0, [pc, #32]	; (8006058 <CDC_Receive_FS+0xfc>)
 8006036:	f7fb f871 	bl	800111c <HAL_GPIO_TogglePin>

	return (USBD_OK);
 800603a:	2300      	movs	r3, #0

	/* USER CODE END 6 */
}
 800603c:	4618      	mov	r0, r3
 800603e:	3710      	adds	r7, #16
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}
 8006044:	20000114 	.word	0x20000114
 8006048:	20000118 	.word	0x20000118
 800604c:	20000c9c 	.word	0x20000c9c
 8006050:	2000011c 	.word	0x2000011c
 8006054:	20001750 	.word	0x20001750
 8006058:	48000400 	.word	0x48000400

0800605c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACK == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACK */
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006064:	f107 0314 	add.w	r3, r7, #20
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1a      	ldr	r2, [pc, #104]	; (80060e4 <HAL_PCD_MspInit+0x88>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d12d      	bne.n	80060da <HAL_PCD_MspInit+0x7e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800607e:	4b1a      	ldr	r3, [pc, #104]	; (80060e8 <HAL_PCD_MspInit+0x8c>)
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	4a19      	ldr	r2, [pc, #100]	; (80060e8 <HAL_PCD_MspInit+0x8c>)
 8006084:	f043 0301 	orr.w	r3, r3, #1
 8006088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800608a:	4b17      	ldr	r3, [pc, #92]	; (80060e8 <HAL_PCD_MspInit+0x8c>)
 800608c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	613b      	str	r3, [r7, #16]
 8006094:	693b      	ldr	r3, [r7, #16]
    /**USB GPIO Configuration    
    PA11     ------> USB_DM
    PA12     ------> USB_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006096:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800609a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800609c:	2303      	movs	r3, #3
 800609e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060a0:	2300      	movs	r3, #0
 80060a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060a4:	f107 0314 	add.w	r3, r7, #20
 80060a8:	4619      	mov	r1, r3
 80060aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060ae:	f7fa fe9b 	bl	8000de8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80060b2:	4b0d      	ldr	r3, [pc, #52]	; (80060e8 <HAL_PCD_MspInit+0x8c>)
 80060b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b6:	4a0c      	ldr	r2, [pc, #48]	; (80060e8 <HAL_PCD_MspInit+0x8c>)
 80060b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80060bc:	6593      	str	r3, [r2, #88]	; 0x58
 80060be:	4b0a      	ldr	r3, [pc, #40]	; (80060e8 <HAL_PCD_MspInit+0x8c>)
 80060c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 80060ca:	2200      	movs	r2, #0
 80060cc:	2100      	movs	r1, #0
 80060ce:	2014      	movs	r0, #20
 80060d0:	f7fa fa0f 	bl	80004f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 80060d4:	2014      	movs	r0, #20
 80060d6:	f7fa fa26 	bl	8000526 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80060da:	bf00      	nop
 80060dc:	3728      	adds	r7, #40	; 0x28
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	40005c00 	.word	0x40005c00
 80060e8:	40021000 	.word	0x40021000

080060ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);  
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8006100:	4619      	mov	r1, r3
 8006102:	4610      	mov	r0, r2
 8006104:	f7fe fb41 	bl	800478a <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */
  
  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8006108:	bf00      	nop
 800610a:	3708      	adds	r7, #8
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);  
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8006122:	78fb      	ldrb	r3, [r7, #3]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	015b      	lsls	r3, r3, #5
 8006128:	4413      	add	r3, r2
 800612a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	4619      	mov	r1, r3
 8006134:	f7fe fb74 	bl	8004820 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	460b      	mov	r3, r1
 800614a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */  
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);  
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f8d3 0270 	ldr.w	r0, [r3, #624]	; 0x270
 8006152:	78fb      	ldrb	r3, [r7, #3]
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	015b      	lsls	r3, r3, #5
 8006158:	4413      	add	r3, r2
 800615a:	333c      	adds	r3, #60	; 0x3c
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	78fb      	ldrb	r3, [r7, #3]
 8006160:	4619      	mov	r1, r3
 8006162:	f7fe fbce 	bl	8004902 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */
  
  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b082      	sub	sp, #8
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */  
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);  
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800617c:	4618      	mov	r0, r3
 800617e:	f7fe fce1 	bl	8004b44 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8006182:	bf00      	nop
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 800618a:	b580      	push	{r7, lr}
 800618c:	b084      	sub	sp, #16
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006192:	2301      	movs	r3, #1
 8006194:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d001      	beq.n	80061a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800619e:	f7ff fd3d 	bl	8005c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061a8:	7bfa      	ldrb	r2, [r7, #15]
 80061aa:	4611      	mov	r1, r2
 80061ac:	4618      	mov	r0, r3
 80061ae:	f7fe fc8e 	bl	8004ace <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7fe fc47 	bl	8004a4c <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
	...

080061c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b082      	sub	sp, #8
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7fe fc89 	bl	8004aee <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d005      	beq.n	80061f0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80061e4:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <HAL_PCD_SuspendCallback+0x30>)
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	4a03      	ldr	r2, [pc, #12]	; (80061f8 <HAL_PCD_SuspendCallback+0x30>)
 80061ea:	f043 0306 	orr.w	r3, r3, #6
 80061ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 80061f0:	bf00      	nop
 80061f2:	3708      	adds	r7, #8
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	e000ed00 	.word	0xe000ed00

080061fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80061fc:	b580      	push	{r7, lr}
 80061fe:	b082      	sub	sp, #8
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800620c:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_PCD_ResumeCallback+0x34>)
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	4a07      	ldr	r2, [pc, #28]	; (8006230 <HAL_PCD_ResumeCallback+0x34>)
 8006212:	f023 0306 	bic.w	r3, r3, #6
 8006216:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006218:	f000 f9f6 	bl	8006608 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
 
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 8006222:	4618      	mov	r0, r3
 8006224:	f7fe fc78 	bl	8004b18 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */
  
  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8006228:	bf00      	nop
 800622a:	3708      	adds	r7, #8
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	e000ed00 	.word	0xe000ed00

08006234 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800623c:	4a2b      	ldr	r2, [pc, #172]	; (80062ec <USBD_LL_Init+0xb8>)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8c2 3270 	str.w	r3, [r2, #624]	; 0x270
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a29      	ldr	r2, [pc, #164]	; (80062ec <USBD_LL_Init+0xb8>)
 8006248:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800624c:	4b27      	ldr	r3, [pc, #156]	; (80062ec <USBD_LL_Init+0xb8>)
 800624e:	4a28      	ldr	r2, [pc, #160]	; (80062f0 <USBD_LL_Init+0xbc>)
 8006250:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8006252:	4b26      	ldr	r3, [pc, #152]	; (80062ec <USBD_LL_Init+0xb8>)
 8006254:	2208      	movs	r2, #8
 8006256:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8006258:	4b24      	ldr	r3, [pc, #144]	; (80062ec <USBD_LL_Init+0xb8>)
 800625a:	2202      	movs	r2, #2
 800625c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800625e:	4b23      	ldr	r3, [pc, #140]	; (80062ec <USBD_LL_Init+0xb8>)
 8006260:	2202      	movs	r2, #2
 8006262:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8006264:	4b21      	ldr	r3, [pc, #132]	; (80062ec <USBD_LL_Init+0xb8>)
 8006266:	2200      	movs	r2, #0
 8006268:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800626a:	4b20      	ldr	r3, [pc, #128]	; (80062ec <USBD_LL_Init+0xb8>)
 800626c:	2200      	movs	r2, #0
 800626e:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8006270:	4b1e      	ldr	r3, [pc, #120]	; (80062ec <USBD_LL_Init+0xb8>)
 8006272:	2200      	movs	r2, #0
 8006274:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8006276:	4b1d      	ldr	r3, [pc, #116]	; (80062ec <USBD_LL_Init+0xb8>)
 8006278:	2200      	movs	r2, #0
 800627a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800627c:	481b      	ldr	r0, [pc, #108]	; (80062ec <USBD_LL_Init+0xb8>)
 800627e:	f7fa ff66 	bl	800114e <HAL_PCD_Init>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8006288:	f7ff fcc8 	bl	8005c1c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */
  
  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006292:	2318      	movs	r3, #24
 8006294:	2200      	movs	r2, #0
 8006296:	2100      	movs	r1, #0
 8006298:	f7fb fe08 	bl	8001eac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062a2:	2358      	movs	r3, #88	; 0x58
 80062a4:	2200      	movs	r2, #0
 80062a6:	2180      	movs	r1, #128	; 0x80
 80062a8:	f7fb fe00 	bl	8001eac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062b2:	23c0      	movs	r3, #192	; 0xc0
 80062b4:	2200      	movs	r2, #0
 80062b6:	2181      	movs	r1, #129	; 0x81
 80062b8:	f7fb fdf8 	bl	8001eac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062c2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80062c6:	2200      	movs	r2, #0
 80062c8:	2101      	movs	r1, #1
 80062ca:	f7fb fdef 	bl	8001eac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80062d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80062d8:	2200      	movs	r2, #0
 80062da:	2182      	movs	r1, #130	; 0x82
 80062dc:	f7fb fde6 	bl	8001eac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3708      	adds	r7, #8
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	200021e4 	.word	0x200021e4
 80062f0:	40005c00 	.word	0x40005c00

080062f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b084      	sub	sp, #16
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006300:	2300      	movs	r3, #0
 8006302:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800630a:	4618      	mov	r0, r3
 800630c:	f7fa ffda 	bl	80012c4 <HAL_PCD_Start>
 8006310:	4603      	mov	r3, r0
 8006312:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006314:	7bfb      	ldrb	r3, [r7, #15]
 8006316:	4618      	mov	r0, r3
 8006318:	f000 f97c 	bl	8006614 <USBD_Get_USB_Status>
 800631c:	4603      	mov	r3, r0
 800631e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8006320:	7bbb      	ldrb	r3, [r7, #14]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	4608      	mov	r0, r1
 8006334:	4611      	mov	r1, r2
 8006336:	461a      	mov	r2, r3
 8006338:	4603      	mov	r3, r0
 800633a:	70fb      	strb	r3, [r7, #3]
 800633c:	460b      	mov	r3, r1
 800633e:	70bb      	strb	r3, [r7, #2]
 8006340:	4613      	mov	r3, r2
 8006342:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006344:	2300      	movs	r3, #0
 8006346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006352:	78bb      	ldrb	r3, [r7, #2]
 8006354:	883a      	ldrh	r2, [r7, #0]
 8006356:	78f9      	ldrb	r1, [r7, #3]
 8006358:	f7fb f949 	bl	80015ee <HAL_PCD_EP_Open>
 800635c:	4603      	mov	r3, r0
 800635e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 f956 	bl	8006614 <USBD_Get_USB_Status>
 8006368:	4603      	mov	r3, r0
 800636a:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800636c:	7bbb      	ldrb	r3, [r7, #14]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006382:	2300      	movs	r3, #0
 8006384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006390:	78fa      	ldrb	r2, [r7, #3]
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f7fb f98a 	bl	80016ae <HAL_PCD_EP_Close>
 800639a:	4603      	mov	r3, r0
 800639c:	73fb      	strb	r3, [r7, #15]
      
  usb_status =  USBD_Get_USB_Status(hal_status);
 800639e:	7bfb      	ldrb	r3, [r7, #15]
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 f937 	bl	8006614 <USBD_Get_USB_Status>
 80063a6:	4603      	mov	r3, r0
 80063a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;  
 80063aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	460b      	mov	r3, r1
 80063be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063c0:	2300      	movs	r3, #0
 80063c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80063c4:	2300      	movs	r3, #0
 80063c6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063ce:	78fa      	ldrb	r2, [r7, #3]
 80063d0:	4611      	mov	r1, r2
 80063d2:	4618      	mov	r0, r3
 80063d4:	f7fb fa35 	bl	8001842 <HAL_PCD_EP_SetStall>
 80063d8:	4603      	mov	r3, r0
 80063da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80063dc:	7bfb      	ldrb	r3, [r7, #15]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 f918 	bl	8006614 <USBD_Get_USB_Status>
 80063e4:	4603      	mov	r3, r0
 80063e6:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80063e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}

080063f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b084      	sub	sp, #16
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
 80063fa:	460b      	mov	r3, r1
 80063fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80063fe:	2300      	movs	r3, #0
 8006400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006402:	2300      	movs	r3, #0
 8006404:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800640c:	78fa      	ldrb	r2, [r7, #3]
 800640e:	4611      	mov	r1, r2
 8006410:	4618      	mov	r0, r3
 8006412:	f7fb fa70 	bl	80018f6 <HAL_PCD_EP_ClrStall>
 8006416:	4603      	mov	r3, r0
 8006418:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 800641a:	7bfb      	ldrb	r3, [r7, #15]
 800641c:	4618      	mov	r0, r3
 800641e:	f000 f8f9 	bl	8006614 <USBD_Get_USB_Status>
 8006422:	4603      	mov	r3, r0
 8006424:	73bb      	strb	r3, [r7, #14]

  return usb_status; 
 8006426:	7bbb      	ldrb	r3, [r7, #14]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006430:	b480      	push	{r7}
 8006432:	b085      	sub	sp, #20
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006442:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8006444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006448:	2b00      	cmp	r3, #0
 800644a:	da08      	bge.n	800645e <USBD_LL_IsStallEP+0x2e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800644c:	78fb      	ldrb	r3, [r7, #3]
 800644e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	015b      	lsls	r3, r3, #5
 8006456:	4413      	add	r3, r2
 8006458:	332a      	adds	r3, #42	; 0x2a
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	e008      	b.n	8006470 <USBD_LL_IsStallEP+0x40>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800645e:	78fb      	ldrb	r3, [r7, #3]
 8006460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	015b      	lsls	r3, r3, #5
 8006468:	4413      	add	r3, r2
 800646a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800646e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006470:	4618      	mov	r0, r3
 8006472:	3714      	adds	r7, #20
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006488:	2300      	movs	r3, #0
 800648a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800648c:	2300      	movs	r3, #0
 800648e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	4611      	mov	r1, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f7fb f882 	bl	80015a4 <HAL_PCD_SetAddress>
 80064a0:	4603      	mov	r3, r0
 80064a2:	73fb      	strb	r3, [r7, #15]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 f8b4 	bl	8006614 <USBD_Get_USB_Status>
 80064ac:	4603      	mov	r3, r0
 80064ae:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80064b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3710      	adds	r7, #16
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b086      	sub	sp, #24
 80064be:	af00      	add	r7, sp, #0
 80064c0:	60f8      	str	r0, [r7, #12]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	461a      	mov	r2, r3
 80064c6:	460b      	mov	r3, r1
 80064c8:	72fb      	strb	r3, [r7, #11]
 80064ca:	4613      	mov	r3, r2
 80064cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80064dc:	893b      	ldrh	r3, [r7, #8]
 80064de:	7af9      	ldrb	r1, [r7, #11]
 80064e0:	687a      	ldr	r2, [r7, #4]
 80064e2:	f7fb f975 	bl	80017d0 <HAL_PCD_EP_Transmit>
 80064e6:	4603      	mov	r3, r0
 80064e8:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	4618      	mov	r0, r3
 80064ee:	f000 f891 	bl	8006614 <USBD_Get_USB_Status>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 80064f6:	7dbb      	ldrb	r3, [r7, #22]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	461a      	mov	r2, r3
 800650c:	460b      	mov	r3, r1
 800650e:	72fb      	strb	r3, [r7, #11]
 8006510:	4613      	mov	r3, r2
 8006512:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8006522:	893b      	ldrh	r3, [r7, #8]
 8006524:	7af9      	ldrb	r1, [r7, #11]
 8006526:	687a      	ldr	r2, [r7, #4]
 8006528:	f7fb f903 	bl	8001732 <HAL_PCD_EP_Receive>
 800652c:	4603      	mov	r3, r0
 800652e:	75fb      	strb	r3, [r7, #23]
     
  usb_status =  USBD_Get_USB_Status(hal_status);
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	4618      	mov	r0, r3
 8006534:	f000 f86e 	bl	8006614 <USBD_Get_USB_Status>
 8006538:	4603      	mov	r3, r0
 800653a:	75bb      	strb	r3, [r7, #22]
  	
  return usb_status; 
 800653c:	7dbb      	ldrb	r3, [r7, #22]
}
 800653e:	4618      	mov	r0, r3
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b082      	sub	sp, #8
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
 800654e:	460b      	mov	r3, r1
 8006550:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006558:	78fa      	ldrb	r2, [r7, #3]
 800655a:	4611      	mov	r1, r2
 800655c:	4618      	mov	r0, r3
 800655e:	f7fb f922 	bl	80017a6 <HAL_PCD_EP_GetRxCount>
 8006562:	4603      	mov	r3, r0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	460b      	mov	r3, r1
 8006576:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 8006578:	78fb      	ldrb	r3, [r7, #3]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_PCDEx_LPM_Callback+0x18>
 800657e:	2b01      	cmp	r3, #1
 8006580:	d013      	beq.n	80065aa <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
  /* USER CODE END LPM_Callback */
}
 8006582:	e023      	b.n	80065cc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800658c:	f000 f83c 	bl	8006608 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006590:	4b10      	ldr	r3, [pc, #64]	; (80065d4 <HAL_PCDEx_LPM_Callback+0x68>)
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	4a0f      	ldr	r2, [pc, #60]	; (80065d4 <HAL_PCDEx_LPM_Callback+0x68>)
 8006596:	f023 0306 	bic.w	r3, r3, #6
 800659a:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe fab8 	bl	8004b18 <USBD_LL_Resume>
    break;
 80065a8:	e010      	b.n	80065cc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7fe fa9c 	bl	8004aee <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d005      	beq.n	80065ca <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80065be:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <HAL_PCDEx_LPM_Callback+0x68>)
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	4a04      	ldr	r2, [pc, #16]	; (80065d4 <HAL_PCDEx_LPM_Callback+0x68>)
 80065c4:	f043 0306 	orr.w	r3, r3, #6
 80065c8:	6113      	str	r3, [r2, #16]
    break;   
 80065ca:	bf00      	nop
}
 80065cc:	bf00      	nop
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}
 80065d4:	e000ed00 	.word	0xe000ed00

080065d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80065e0:	4b03      	ldr	r3, [pc, #12]	; (80065f0 <USBD_static_malloc+0x18>)
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	370c      	adds	r7, #12
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	20000120 	.word	0x20000120

080065f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b083      	sub	sp, #12
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]

}
 80065fc:	bf00      	nop
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800660c:	f7ff f9ec 	bl	80059e8 <SystemClock_Config>
}
 8006610:	bf00      	nop
 8006612:	bd80      	pop	{r7, pc}

08006614 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	4603      	mov	r3, r0
 800661c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006622:	79fb      	ldrb	r3, [r7, #7]
 8006624:	2b03      	cmp	r3, #3
 8006626:	d817      	bhi.n	8006658 <USBD_Get_USB_Status+0x44>
 8006628:	a201      	add	r2, pc, #4	; (adr r2, 8006630 <USBD_Get_USB_Status+0x1c>)
 800662a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800662e:	bf00      	nop
 8006630:	08006641 	.word	0x08006641
 8006634:	08006647 	.word	0x08006647
 8006638:	0800664d 	.word	0x0800664d
 800663c:	08006653 	.word	0x08006653
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006640:	2300      	movs	r3, #0
 8006642:	73fb      	strb	r3, [r7, #15]
    break;
 8006644:	e00b      	b.n	800665e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006646:	2302      	movs	r3, #2
 8006648:	73fb      	strb	r3, [r7, #15]
    break;
 800664a:	e008      	b.n	800665e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800664c:	2301      	movs	r3, #1
 800664e:	73fb      	strb	r3, [r7, #15]
    break;
 8006650:	e005      	b.n	800665e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006652:	2302      	movs	r3, #2
 8006654:	73fb      	strb	r3, [r7, #15]
    break;
 8006656:	e002      	b.n	800665e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006658:	2302      	movs	r3, #2
 800665a:	73fb      	strb	r3, [r7, #15]
    break;
 800665c:	bf00      	nop
  }
  return usb_status;
 800665e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3714      	adds	r7, #20
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	4603      	mov	r3, r0
 8006674:	6039      	str	r1, [r7, #0]
 8006676:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	2212      	movs	r2, #18
 800667c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800667e:	4b03      	ldr	r3, [pc, #12]	; (800668c <USBD_CDC_DeviceDescriptor+0x20>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	200000c0 	.word	0x200000c0

08006690 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	4603      	mov	r3, r0
 8006698:	6039      	str	r1, [r7, #0]
 800669a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	2204      	movs	r2, #4
 80066a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80066a2:	4b03      	ldr	r3, [pc, #12]	; (80066b0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr
 80066b0:	200000d4 	.word	0x200000d4

080066b4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b082      	sub	sp, #8
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d105      	bne.n	80066d2 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80066c6:	683a      	ldr	r2, [r7, #0]
 80066c8:	4907      	ldr	r1, [pc, #28]	; (80066e8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80066ca:	4808      	ldr	r0, [pc, #32]	; (80066ec <USBD_CDC_ProductStrDescriptor+0x38>)
 80066cc:	f7fe ffae 	bl	800562c <USBD_GetString>
 80066d0:	e004      	b.n	80066dc <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	4904      	ldr	r1, [pc, #16]	; (80066e8 <USBD_CDC_ProductStrDescriptor+0x34>)
 80066d6:	4805      	ldr	r0, [pc, #20]	; (80066ec <USBD_CDC_ProductStrDescriptor+0x38>)
 80066d8:	f7fe ffa8 	bl	800562c <USBD_GetString>
  }
  return USBD_StrDesc;
 80066dc:	4b02      	ldr	r3, [pc, #8]	; (80066e8 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3708      	adds	r7, #8
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20002458 	.word	0x20002458
 80066ec:	08006964 	.word	0x08006964

080066f0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b082      	sub	sp, #8
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	6039      	str	r1, [r7, #0]
 80066fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	4904      	ldr	r1, [pc, #16]	; (8006710 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8006700:	4804      	ldr	r0, [pc, #16]	; (8006714 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8006702:	f7fe ff93 	bl	800562c <USBD_GetString>
  return USBD_StrDesc;
 8006706:	4b02      	ldr	r3, [pc, #8]	; (8006710 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8006708:	4618      	mov	r0, r3
 800670a:	3708      	adds	r7, #8
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20002458 	.word	0x20002458
 8006714:	08006970 	.word	0x08006970

08006718 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	4603      	mov	r3, r0
 8006720:	6039      	str	r1, [r7, #0]
 8006722:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	221a      	movs	r2, #26
 8006728:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800672a:	f000 f843 	bl	80067b4 <Get_SerialNum>
  
  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */
  
  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800672e:	4b02      	ldr	r3, [pc, #8]	; (8006738 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8006730:	4618      	mov	r0, r3
 8006732:	3708      	adds	r7, #8
 8006734:	46bd      	mov	sp, r7
 8006736:	bd80      	pop	{r7, pc}
 8006738:	200000d8 	.word	0x200000d8

0800673c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b082      	sub	sp, #8
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	6039      	str	r1, [r7, #0]
 8006746:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006748:	79fb      	ldrb	r3, [r7, #7]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d105      	bne.n	800675a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800674e:	683a      	ldr	r2, [r7, #0]
 8006750:	4907      	ldr	r1, [pc, #28]	; (8006770 <USBD_CDC_ConfigStrDescriptor+0x34>)
 8006752:	4808      	ldr	r0, [pc, #32]	; (8006774 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8006754:	f7fe ff6a 	bl	800562c <USBD_GetString>
 8006758:	e004      	b.n	8006764 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	4904      	ldr	r1, [pc, #16]	; (8006770 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800675e:	4805      	ldr	r0, [pc, #20]	; (8006774 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8006760:	f7fe ff64 	bl	800562c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006764:	4b02      	ldr	r3, [pc, #8]	; (8006770 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8006766:	4618      	mov	r0, r3
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20002458 	.word	0x20002458
 8006774:	08006984 	.word	0x08006984

08006778 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	4603      	mov	r3, r0
 8006780:	6039      	str	r1, [r7, #0]
 8006782:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d105      	bne.n	8006796 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	4907      	ldr	r1, [pc, #28]	; (80067ac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800678e:	4808      	ldr	r0, [pc, #32]	; (80067b0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8006790:	f7fe ff4c 	bl	800562c <USBD_GetString>
 8006794:	e004      	b.n	80067a0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8006796:	683a      	ldr	r2, [r7, #0]
 8006798:	4904      	ldr	r1, [pc, #16]	; (80067ac <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800679a:	4805      	ldr	r0, [pc, #20]	; (80067b0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800679c:	f7fe ff46 	bl	800562c <USBD_GetString>
  }
  return USBD_StrDesc;
 80067a0:	4b02      	ldr	r3, [pc, #8]	; (80067ac <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3708      	adds	r7, #8
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
 80067aa:	bf00      	nop
 80067ac:	20002458 	.word	0x20002458
 80067b0:	08006990 	.word	0x08006990

080067b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <Get_SerialNum+0x44>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80067c0:	4b0e      	ldr	r3, [pc, #56]	; (80067fc <Get_SerialNum+0x48>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80067c6:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <Get_SerialNum+0x4c>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	4413      	add	r3, r2
 80067d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d009      	beq.n	80067ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80067da:	2208      	movs	r2, #8
 80067dc:	4909      	ldr	r1, [pc, #36]	; (8006804 <Get_SerialNum+0x50>)
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 f814 	bl	800680c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80067e4:	2204      	movs	r2, #4
 80067e6:	4908      	ldr	r1, [pc, #32]	; (8006808 <Get_SerialNum+0x54>)
 80067e8:	68b8      	ldr	r0, [r7, #8]
 80067ea:	f000 f80f 	bl	800680c <IntToUnicode>
  }
}
 80067ee:	bf00      	nop
 80067f0:	3710      	adds	r7, #16
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	1fff7590 	.word	0x1fff7590
 80067fc:	1fff7594 	.word	0x1fff7594
 8006800:	1fff7598 	.word	0x1fff7598
 8006804:	200000da 	.word	0x200000da
 8006808:	200000ea 	.word	0x200000ea

0800680c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800680c:	b480      	push	{r7}
 800680e:	b087      	sub	sp, #28
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	4613      	mov	r3, r2
 8006818:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800681a:	2300      	movs	r3, #0
 800681c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800681e:	2300      	movs	r3, #0
 8006820:	75fb      	strb	r3, [r7, #23]
 8006822:	e027      	b.n	8006874 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	0f1b      	lsrs	r3, r3, #28
 8006828:	2b09      	cmp	r3, #9
 800682a:	d80b      	bhi.n	8006844 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	0f1b      	lsrs	r3, r3, #28
 8006830:	b2da      	uxtb	r2, r3
 8006832:	7dfb      	ldrb	r3, [r7, #23]
 8006834:	005b      	lsls	r3, r3, #1
 8006836:	4619      	mov	r1, r3
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	440b      	add	r3, r1
 800683c:	3230      	adds	r2, #48	; 0x30
 800683e:	b2d2      	uxtb	r2, r2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	e00a      	b.n	800685a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	0f1b      	lsrs	r3, r3, #28
 8006848:	b2da      	uxtb	r2, r3
 800684a:	7dfb      	ldrb	r3, [r7, #23]
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	4619      	mov	r1, r3
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	440b      	add	r3, r1
 8006854:	3237      	adds	r2, #55	; 0x37
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006860:	7dfb      	ldrb	r3, [r7, #23]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	3301      	adds	r3, #1
 8006866:	68ba      	ldr	r2, [r7, #8]
 8006868:	4413      	add	r3, r2
 800686a:	2200      	movs	r2, #0
 800686c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	3301      	adds	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]
 8006874:	7dfa      	ldrb	r2, [r7, #23]
 8006876:	79fb      	ldrb	r3, [r7, #7]
 8006878:	429a      	cmp	r2, r3
 800687a:	d3d3      	bcc.n	8006824 <IntToUnicode+0x18>
  }
}
 800687c:	bf00      	nop
 800687e:	371c      	adds	r7, #28
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006888:	480d      	ldr	r0, [pc, #52]	; (80068c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800688a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800688c:	480d      	ldr	r0, [pc, #52]	; (80068c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800688e:	490e      	ldr	r1, [pc, #56]	; (80068c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006890:	4a0e      	ldr	r2, [pc, #56]	; (80068cc <LoopForever+0xe>)
  movs r3, #0
 8006892:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006894:	e002      	b.n	800689c <LoopCopyDataInit>

08006896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800689a:	3304      	adds	r3, #4

0800689c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800689c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800689e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068a0:	d3f9      	bcc.n	8006896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068a2:	4a0b      	ldr	r2, [pc, #44]	; (80068d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80068a4:	4c0b      	ldr	r4, [pc, #44]	; (80068d4 <LoopForever+0x16>)
  movs r3, #0
 80068a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068a8:	e001      	b.n	80068ae <LoopFillZerobss>

080068aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068ac:	3204      	adds	r2, #4

080068ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068b0:	d3fb      	bcc.n	80068aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80068b2:	f7ff fa7d 	bl	8005db0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068b6:	f000 f811 	bl	80068dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80068ba:	f7ff f827 	bl	800590c <main>

080068be <LoopForever>:

LoopForever:
    b LoopForever
 80068be:	e7fe      	b.n	80068be <LoopForever>
  ldr   r0, =_estack
 80068c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80068c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068c8:	200000f4 	.word	0x200000f4
  ldr r2, =_sidata
 80068cc:	080069c8 	.word	0x080069c8
  ldr r2, =_sbss
 80068d0:	200000f4 	.word	0x200000f4
  ldr r4, =_ebss
 80068d4:	20002658 	.word	0x20002658

080068d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80068d8:	e7fe      	b.n	80068d8 <ADC1_2_IRQHandler>
	...

080068dc <__libc_init_array>:
 80068dc:	b570      	push	{r4, r5, r6, lr}
 80068de:	4e0d      	ldr	r6, [pc, #52]	; (8006914 <__libc_init_array+0x38>)
 80068e0:	4c0d      	ldr	r4, [pc, #52]	; (8006918 <__libc_init_array+0x3c>)
 80068e2:	1ba4      	subs	r4, r4, r6
 80068e4:	10a4      	asrs	r4, r4, #2
 80068e6:	2500      	movs	r5, #0
 80068e8:	42a5      	cmp	r5, r4
 80068ea:	d109      	bne.n	8006900 <__libc_init_array+0x24>
 80068ec:	4e0b      	ldr	r6, [pc, #44]	; (800691c <__libc_init_array+0x40>)
 80068ee:	4c0c      	ldr	r4, [pc, #48]	; (8006920 <__libc_init_array+0x44>)
 80068f0:	f000 f82c 	bl	800694c <_init>
 80068f4:	1ba4      	subs	r4, r4, r6
 80068f6:	10a4      	asrs	r4, r4, #2
 80068f8:	2500      	movs	r5, #0
 80068fa:	42a5      	cmp	r5, r4
 80068fc:	d105      	bne.n	800690a <__libc_init_array+0x2e>
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006904:	4798      	blx	r3
 8006906:	3501      	adds	r5, #1
 8006908:	e7ee      	b.n	80068e8 <__libc_init_array+0xc>
 800690a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800690e:	4798      	blx	r3
 8006910:	3501      	adds	r5, #1
 8006912:	e7f2      	b.n	80068fa <__libc_init_array+0x1e>
 8006914:	080069c0 	.word	0x080069c0
 8006918:	080069c0 	.word	0x080069c0
 800691c:	080069c0 	.word	0x080069c0
 8006920:	080069c4 	.word	0x080069c4

08006924 <memcpy>:
 8006924:	b510      	push	{r4, lr}
 8006926:	1e43      	subs	r3, r0, #1
 8006928:	440a      	add	r2, r1
 800692a:	4291      	cmp	r1, r2
 800692c:	d100      	bne.n	8006930 <memcpy+0xc>
 800692e:	bd10      	pop	{r4, pc}
 8006930:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006934:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006938:	e7f7      	b.n	800692a <memcpy+0x6>

0800693a <memset>:
 800693a:	4402      	add	r2, r0
 800693c:	4603      	mov	r3, r0
 800693e:	4293      	cmp	r3, r2
 8006940:	d100      	bne.n	8006944 <memset+0xa>
 8006942:	4770      	bx	lr
 8006944:	f803 1b01 	strb.w	r1, [r3], #1
 8006948:	e7f9      	b.n	800693e <memset+0x4>
	...

0800694c <_init>:
 800694c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694e:	bf00      	nop
 8006950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006952:	bc08      	pop	{r3}
 8006954:	469e      	mov	lr, r3
 8006956:	4770      	bx	lr

08006958 <_fini>:
 8006958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800695a:	bf00      	nop
 800695c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800695e:	bc08      	pop	{r3}
 8006960:	469e      	mov	lr, r3
 8006962:	4770      	bx	lr
